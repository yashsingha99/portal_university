{"version":3,"file":"types.js","sources":["../src/types.ts"],"sourcesContent":["export interface Scope {\n  name?: string;\n  rootPath: string;\n  template?: string;\n  strapiVersion: string;\n  strapiDependencies: Array<string>;\n  installDependencies?: boolean;\n  additionalsDependencies: Record<string, string>;\n  docker: boolean;\n  useYarn: boolean;\n  useTypescript: boolean;\n  runQuickstartApp: boolean;\n  quick?: boolean;\n  uuid?: string;\n  deviceId?: string;\n  dbforce?: boolean;\n  database?: DatabaseInfo;\n  debug?: boolean;\n  tmpPath: string;\n  packageJsonStrapi: Record<string, unknown>;\n}\n\nexport interface NewOptions {\n  useNpm: boolean;\n  run: boolean;\n  debug: boolean;\n  quickstart: boolean;\n  template: string;\n  starter: string;\n  typescript: boolean;\n  dbforce: boolean;\n  dbssl: string;\n  dbclient: string;\n  dbhost: string;\n  dbport: string;\n  dbname: string;\n  dbusername: string;\n  dbpassword: string;\n  dbfile: string;\n}\n\nexport interface Configuration {\n  client: string;\n  connection: DatabaseInfo;\n  dependencies: Record<string, string>;\n}\n\nexport type ClientName = 'mysql' | 'mysql2' | 'postgres' | 'sqlite' | 'sqlite-legacy';\n\nexport interface DatabaseInfo {\n  client?: string;\n  connection: {\n    host?: string;\n    port?: string;\n    database?: string;\n    username?: string;\n    password?: string;\n    filename?: string;\n    ssl?: boolean;\n  };\n  useNullAsDefault?: boolean;\n}\n\nexport interface PackageInfo {\n  name: string;\n  version: string;\n}\n\nexport interface TemplateConfig {\n  package: Record<string, unknown>;\n}\n\nexport interface StderrError extends Error {\n  stderr: string;\n}\n\nexport function isStderrError(error: unknown): error is StderrError {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'stderr' in error &&\n    typeof error.stderr === 'string'\n  );\n}\n"],"names":[],"mappings":";;AA4EO,SAAS,cAAc,OAAsC;AAEhE,SAAA,OAAO,UAAU,YACjB,UAAU,QACV,YAAY,SACZ,OAAO,MAAM,WAAW;AAE5B;;"}