{"version":3,"file":"db-questions.mjs","sources":["../../src/utils/db-questions.ts"],"sourcesContent":["import type { Question } from 'inquirer';\nimport type { Scope } from '../types';\n\ninterface QuestionFactory {\n  (options: { scope: Scope; client: 'postgres' | 'mysql' | 'sqlite' }): Question;\n}\n\nconst DEFAULT_PORTS = {\n  postgres: 5432,\n  mysql: 3306,\n  sqlite: undefined,\n};\n\nconst database: QuestionFactory = ({ scope }) => ({\n  type: 'input',\n  name: 'database',\n  message: 'Database name:',\n  default: scope.name,\n  validate(value: string) {\n    if (value.includes('.')) {\n      return `The database name can't contain a \".\"`;\n    }\n\n    return true;\n  },\n});\n\nconst host: QuestionFactory = () => ({\n  type: 'input',\n  name: 'host',\n  message: 'Host:',\n  default: '127.0.0.1',\n});\n\nconst port: QuestionFactory = ({ client }) => ({\n  type: 'input',\n  name: 'port',\n  message: 'Port:',\n  default: DEFAULT_PORTS[client],\n});\n\nconst username: QuestionFactory = () => ({\n  type: 'input',\n  name: 'username',\n  message: 'Username:',\n});\n\nconst password: QuestionFactory = () => ({\n  type: 'password',\n  name: 'password',\n  message: 'Password:',\n  mask: '*',\n});\n\nconst ssl: QuestionFactory = () => ({\n  type: 'confirm',\n  name: 'ssl',\n  message: 'Enable SSL connection:',\n  default: false,\n});\n\nconst filename: QuestionFactory = () => ({\n  type: 'input',\n  name: 'filename',\n  message: 'Filename:',\n  default: '.tmp/data.db',\n});\n\nexport default {\n  sqlite: [filename],\n  postgres: [database, host, port, username, password, ssl],\n  mysql: [database, host, port, username, password, ssl],\n};\n"],"names":[],"mappings":"AAOA,MAAM,gBAAgB;AAAA,EACpB,UAAU;AAAA,EACV,OAAO;AAAA,EACP,QAAQ;AACV;AAEA,MAAM,WAA4B,CAAC,EAAE,aAAa;AAAA,EAChD,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS,MAAM;AAAA,EACf,SAAS,OAAe;AAClB,QAAA,MAAM,SAAS,GAAG,GAAG;AAChB,aAAA;AAAA,IACT;AAEO,WAAA;AAAA,EACT;AACF;AAEA,MAAM,OAAwB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS;AACX;AAEA,MAAM,OAAwB,CAAC,EAAE,cAAc;AAAA,EAC7C,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS,cAAc,MAAM;AAC/B;AAEA,MAAM,WAA4B,OAAO;AAAA,EACvC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AACX;AAEA,MAAM,WAA4B,OAAO;AAAA,EACvC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,EACT,MAAM;AACR;AAEA,MAAM,MAAuB,OAAO;AAAA,EAClC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS;AACX;AAEA,MAAM,WAA4B,OAAO;AAAA,EACvC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS;AACX;AAEA,MAAe,cAAA;AAAA,EACb,QAAQ,CAAC,QAAQ;AAAA,EACjB,UAAU,CAAC,UAAU,MAAM,MAAM,UAAU,UAAU,GAAG;AAAA,EACxD,OAAO,CAAC,UAAU,MAAM,MAAM,UAAU,UAAU,GAAG;AACvD;"}