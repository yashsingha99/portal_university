{"version":3,"file":"index-lVYanVuT.js","sources":["../../admin/src/utils/getTrad.ts","../../admin/src/contexts/DataManagerContext.ts","../../admin/src/hooks/useDataManager.ts","../../admin/src/contexts/FormModalNavigationContext.ts","../../admin/src/hooks/useFormModalNavigation.ts","../../admin/src/components/ContentTypeBuilderNav/useContentTypeBuilderMenu.ts","../../admin/src/components/ContentTypeBuilderNav/ContentTypeBuilderNav.tsx","../../admin/src/utils/isAllowedContentTypesForRelations.ts","../../admin/src/utils/findAttribute.ts","../../admin/src/components/AllowedTypesSelect.tsx","../../admin/src/components/AttributeIcon.tsx","../../admin/src/components/AttributeOptions/OptionBoxWrapper.tsx","../../admin/src/components/AttributeOptions/AttributeOption.tsx","../../admin/src/components/AttributeOptions/AttributeList.tsx","../../admin/src/components/AttributeOptions/CustomFieldOption.tsx","../../admin/src/components/AttributeOptions/EmptyAttributes.tsx","../../admin/src/components/AttributeOptions/CustomFieldsList.tsx","../../admin/src/components/AttributeOptions/AttributeOptions.tsx","../../admin/src/components/BooleanDefaultValueSelect.tsx","../../admin/src/components/CustomRadioGroup/Styles.tsx","../../admin/src/components/CustomRadioGroup/CustomRadioGroup.tsx","../../admin/src/components/BooleanRadioGroup.tsx","../../admin/src/components/CheckboxWithNumberField.tsx","../../admin/src/components/ContentTypeRadioGroup.tsx","../../admin/src/components/DraftAndPublishToggle.tsx","../../admin/src/components/FormModalEndActions.tsx","../../admin/src/components/FormModalHeader.tsx","../../admin/src/components/FormModalSubHeader.tsx","../../admin/src/components/IconPicker/constants.ts","../../admin/src/components/IconPicker/IconPicker.tsx","../../admin/src/components/PluralName.tsx","../../admin/src/components/Relation/RelationField/RelationTargetPicker/RelationTargetPicker.tsx","../../admin/src/components/Relation/RelationField/RelationField.tsx","../../admin/src/components/Relation/RelationNaturePicker/Components.tsx","../../admin/src/components/Relation/RelationNaturePicker/RelationNaturePicker.tsx","../../admin/src/components/Relation/Relation.tsx","../../admin/src/components/SelectCategory.tsx","../../admin/src/components/SelectComponent.tsx","../../admin/src/components/SelectComponents.tsx","../../admin/src/components/SelectDateType.tsx","../../admin/src/components/SelectNumber.tsx","../../admin/src/components/SingularName.tsx","../../admin/src/components/TabForm.tsx","../../admin/src/components/TextareaEnum.tsx","../../admin/src/components/FormModal/attributes/nameField.ts","../../admin/src/components/FormModal/attributes/commonBaseForm.ts","../../admin/src/components/FormModal/component/componentForm.ts","../../admin/src/components/FormModal/attributes/attributeOptions.ts","../../admin/src/components/FormModal/attributes/advancedForm.ts","../../admin/src/components/FormModal/component/componentField.ts","../../admin/src/components/FormModal/attributes/baseForm.ts","../../admin/src/components/FormModal/attributes/form.ts","../../admin/src/utils/toRegressedEnumValue.ts","../../admin/src/components/FormModal/attributes/validation/common.ts","../../admin/src/components/FormModal/attributes/types.ts","../../admin/src/components/FormModal/category/regex.ts","../../admin/src/components/FormModal/category/createCategorySchema.ts","../../admin/src/components/FormModal/category/form.ts","../../admin/src/components/FormModal/component/createComponentSchema.ts","../../admin/src/components/FormModal/contentType/contentTypeForm.ts","../../admin/src/components/FormModal/contentType/createContentTypeSchema.ts","../../admin/src/components/FormModal/dynamiczoneForm.ts","../../admin/src/components/FormModal/forms/utils/addItemsToFormSection.ts","../../admin/src/components/FormModal/forms/utils/createCollectionName.ts","../../admin/src/components/FormModal/forms/utils/getUsedAttributeNames.ts","../../admin/src/components/FormModal/forms/forms.ts","../../admin/src/components/FormModal/selectors.ts","../../admin/src/components/FormModal/utils/canEditContentType.ts","../../admin/src/components/FormModal/utils/getAttributesToDisplay.ts","../../admin/src/components/FormModal/utils/getFormInputNames.ts","../../admin/src/components/FormModal/FormModal.tsx","../../admin/src/components/DataManagerProvider/selectors.ts","../../admin/src/components/DataManagerProvider/utils/cleanData.ts","../../admin/src/components/DataManagerProvider/utils/createDataObject.ts","../../admin/src/components/DataManagerProvider/utils/createModifiedDataSchema.ts","../../admin/src/components/DataManagerProvider/utils/formatSchemas.ts","../../admin/src/components/DataManagerProvider/utils/retrieveComponentsThatHaveComponents.ts","../../admin/src/components/DataManagerProvider/utils/retrieveNestedComponents.ts","../../admin/src/components/DataManagerProvider/utils/retrieveSpecificInfoFromComponents.ts","../../admin/src/components/DataManagerProvider/utils/serverRestartWatcher.ts","../../admin/src/components/DataManagerProvider/utils/validateSchema.ts","../../admin/src/components/DataManagerProvider/DataManagerProvider.tsx","../../admin/src/components/FormModalNavigationProvider/constants.ts","../../admin/src/components/FormModalNavigationProvider/FormModalNavigationProvider.tsx","../../admin/src/pages/RecursivePath/RecursivePath.tsx","../../admin/src/pages/App/index.tsx"],"sourcesContent":["import { pluginId } from '../pluginId';\n\nexport const getTrad = (id: string) => `${pluginId}.${id}`;\n","/* eslint-disable check-file/filename-naming-convention */\nimport { createContext } from 'react';\n\nimport type { SchemaType, Component } from '../types';\nimport type { UID } from '@strapi/types';\n// TODO V5 Convert this any types to real types\nexport interface CustomFieldAttributeParams {\n  attributeToSet: Record<string, any>;\n  forTarget: SchemaType;\n  targetUid: UID.Any;\n  initialAttribute: Record<string, any>;\n}\nexport interface DataManagerContextValue {\n  addAttribute: (\n    attributeToSet: Record<string, any>,\n    forTarget: SchemaType,\n    targetUid: UID.Any,\n    isEditing?: boolean,\n    initialAttribute?: Record<string, any>,\n    shouldAddComponentToData?: boolean\n  ) => void;\n  addCustomFieldAttribute: (params: CustomFieldAttributeParams) => void;\n  editCustomFieldAttribute: (params: CustomFieldAttributeParams) => void;\n  addCreatedComponentToDynamicZone: (dynamicZoneTarget: string, componentsToAdd: string[]) => void;\n  createSchema: (\n    data: Record<string, any>,\n    schemaType: SchemaType,\n    uid: UID.Any,\n    componentCategory?: string,\n    shouldAddComponentToData?: boolean\n  ) => void;\n  changeDynamicZoneComponents: (dynamicZoneTarget: string, newComponents: string[]) => void;\n  removeAttribute: (\n    mainDataKey: string,\n    attributeToRemoveName: string,\n    componentUid?: string\n  ) => void;\n  deleteCategory: (categoryUid: string) => void;\n  deleteData: () => void;\n  editCategory: (categoryUid: string, body: any) => void;\n  removeComponentFromDynamicZone: (dzName: string, componentToRemoveIndex: number) => void;\n  setModifiedData: () => void;\n  sortedContentTypesList: any[]; // Define the actual type\n  submitData: (additionalContentTypeData?: Record<string, any>) => Promise<void>;\n  updateSchema: (data: Record<string, any>, schemaType: SchemaType, componentUID: UID.Any) => void;\n  components: Record<UID.Component, Component>;\n  componentsGroupedByCategory: Record<string, Component[]>;\n  componentsThatHaveOtherComponentInTheirAttributes: any[]; // Define the actual type\n  contentTypes: Record<string, any>;\n  initialData: Record<string, any>;\n  isInContentTypeView: boolean;\n  isInDevelopmentMode?: boolean;\n  modifiedData: Record<string, any>;\n  nestedComponents: any[]; // Define the actual type\n  reservedNames: {\n    models: string[];\n    attributes: string[];\n  };\n  allComponentsCategories: any[];\n}\n\n// @ts-expect-error need to pass initial value to params\nexport const DataManagerContext = createContext<DataManagerContextValue>();\n","import { useContext } from 'react';\n\nimport { DataManagerContext } from '../contexts/DataManagerContext';\n\nexport const useDataManager = () => useContext(DataManagerContext);\n","/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { INITIAL_STATE_DATA } from '../components/FormModalNavigationProvider/constants';\n\nimport type {\n  ModalEventProps,\n  State,\n} from '../components/FormModalNavigationProvider/FormModalNavigationProvider';\nimport type { SchemaType } from '../types';\nimport type { CustomFieldUID } from '@strapi/helper-plugin';\nimport type { UID } from '@strapi/types';\n\nexport interface FormModalNavigationContextValue {\n  onCloseModal: () => void;\n  onOpenModalAddField: (options: { forTarget: SchemaType; targetUid?: UID.Any }) => void;\n  onClickSelectField: (option: ModalEventProps) => void;\n  onClickSelectCustomField: (option: ModalEventProps) => void;\n  onNavigateToChooseAttributeModal: (options: ModalEventProps) => void;\n  onNavigateToAddCompoToDZModal: (options: ModalEventProps) => void;\n  onOpenModalAddComponentsToDZ: (options: ModalEventProps) => void;\n  onNavigateToCreateComponentStep2: () => void;\n  onOpenModalCreateSchema: (options: State) => void;\n  onOpenModalEditCategory: (categoryName: string) => void;\n  onOpenModalEditField: (options: ModalEventProps) => void;\n  onOpenModalEditCustomField: (options: ModalEventProps) => void;\n  onOpenModalEditSchema: (options: ModalEventProps) => void;\n  setFormModalNavigationState: (value: React.SetStateAction<typeof INITIAL_STATE_DATA>) => void;\n  actionType: string;\n  attributeName: string;\n  attributeType: string;\n  customFieldUid: CustomFieldUID;\n  categoryName: string;\n  dynamicZoneTarget: string;\n  forTarget: SchemaType;\n  modalType: string;\n  isOpen: boolean;\n  showBackLink: boolean;\n  kind: string;\n  step: string;\n  targetUid: UID.Any;\n}\n\n// @ts-expect-error need to pass initial value to params\nexport const FormModalNavigationContext = React.createContext<FormModalNavigationContextValue>();\n","import { useContext } from 'react';\n\nimport { FormModalNavigationContext } from '../contexts/FormModalNavigationContext';\n\nexport const useFormModalNavigation = () => useContext(FormModalNavigationContext);\n","import { useState, MouseEvent } from 'react';\n\nimport { useCollator, useFilter, useNotification, useTracking } from '@strapi/helper-plugin';\nimport isEqual from 'lodash/isEqual';\nimport { useIntl } from 'react-intl';\n\nimport { useDataManager } from '../../hooks/useDataManager';\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\nimport { pluginId } from '../../pluginId';\nimport { getTrad } from '../../utils/getTrad';\n\nimport type { UID } from '@strapi/types';\n\nexport const useContentTypeBuilderMenu = () => {\n  const {\n    components,\n    componentsGroupedByCategory,\n    contentTypes,\n    isInDevelopmentMode,\n    sortedContentTypesList,\n    modifiedData,\n    initialData,\n  } = useDataManager();\n  const toggleNotification = useNotification();\n  const { trackUsage } = useTracking();\n  const [search, setSearch] = useState('');\n  const { onOpenModalCreateSchema, onOpenModalEditCategory } = useFormModalNavigation();\n  const { locale } = useIntl();\n\n  const { startsWith } = useFilter(locale, {\n    sensitivity: 'base',\n  });\n\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const canOpenModalCreateCTorComponent =\n    !Object.keys(contentTypes).some((ct) => contentTypes[ct].isTemporary === true) &&\n    !Object.keys(components).some(\n      (component) => components[component as UID.Component].isTemporary === true\n    ) &&\n    isEqual(modifiedData, initialData);\n\n  const handleClickOpenModalCreateCollectionType = () => {\n    if (canOpenModalCreateCTorComponent) {\n      trackUsage(`willCreateContentType`);\n\n      const nextState = {\n        modalType: 'contentType',\n        kind: 'collectionType',\n        actionType: 'create',\n        forTarget: 'contentType',\n      };\n\n      onOpenModalCreateSchema(nextState);\n    } else {\n      toggleNotificationCannotCreateSchema();\n    }\n  };\n\n  const handleClickOpenModalCreateSingleType = () => {\n    if (canOpenModalCreateCTorComponent) {\n      trackUsage(`willCreateSingleType`);\n\n      const nextState = {\n        modalType: 'contentType',\n        kind: 'singleType',\n        actionType: 'create',\n        forTarget: 'contentType',\n      };\n\n      onOpenModalCreateSchema(nextState);\n    } else {\n      toggleNotificationCannotCreateSchema();\n    }\n  };\n\n  const handleClickOpenModalCreateComponent = () => {\n    if (canOpenModalCreateCTorComponent) {\n      trackUsage('willCreateComponent');\n\n      const nextState = {\n        modalType: 'component',\n        kind: null,\n        actionType: 'create',\n        forTarget: 'component',\n      };\n\n      onOpenModalCreateSchema(nextState);\n    } else {\n      toggleNotificationCannotCreateSchema();\n    }\n  };\n\n  const toggleNotificationCannotCreateSchema = () => {\n    toggleNotification({\n      type: 'info',\n      message: {\n        id: getTrad('notification.info.creating.notSaved'),\n        defaultMessage: 'Please save your work before creating a new collection type or component',\n      },\n    });\n  };\n\n  const componentsData = Object.entries(componentsGroupedByCategory)\n    .map(([category, components]) => ({\n      name: category,\n      title: category,\n      isEditable: isInDevelopmentMode,\n      onClickEdit(e: MouseEvent, data: any) {\n        e.stopPropagation();\n\n        if (canOpenModalCreateCTorComponent) {\n          onOpenModalEditCategory(data.name);\n        } else {\n          toggleNotificationCannotCreateSchema();\n        }\n      },\n      links: components\n        .map((component) => ({\n          name: component.uid,\n          to: `/plugins/${pluginId}/component-categories/${category}/${component.uid}`,\n          title: component.schema.displayName,\n        }))\n        .sort((a, b) => formatter.compare(a.title, b.title)),\n    }))\n    .sort((a, b) => formatter.compare(a.title, b.title));\n\n  const displayedContentTypes = sortedContentTypesList.filter((obj) => obj.visible);\n\n  const data = [\n    {\n      name: 'models',\n      title: {\n        id: `${getTrad('menu.section.models.name')}`,\n        defaultMessage: 'Collection Types',\n      },\n      customLink: isInDevelopmentMode && {\n        id: `${getTrad('button.model.create')}`,\n        defaultMessage: 'Create new collection type',\n        onClick: handleClickOpenModalCreateCollectionType,\n      },\n      links: displayedContentTypes.filter((contentType) => contentType.kind === 'collectionType'),\n    },\n    {\n      name: 'singleTypes',\n      title: {\n        id: `${getTrad('menu.section.single-types.name')}`,\n        defaultMessage: 'Single Types',\n      },\n      customLink: isInDevelopmentMode && {\n        id: `${getTrad('button.single-types.create')}`,\n        defaultMessage: 'Create new single type',\n        onClick: handleClickOpenModalCreateSingleType,\n      },\n      links: displayedContentTypes.filter((singleType) => singleType.kind === 'singleType'),\n    },\n    {\n      name: 'components',\n      title: {\n        id: `${getTrad('menu.section.components.name')}`,\n        defaultMessage: 'Components',\n      },\n      customLink: isInDevelopmentMode && {\n        id: `${getTrad('button.component.create')}`,\n        defaultMessage: 'Create a new component',\n        onClick: handleClickOpenModalCreateComponent,\n      },\n      links: componentsData,\n    },\n  ].map((section) => {\n    const hasChild = section.links.some((l) => Array.isArray(l.links));\n\n    if (hasChild) {\n      return {\n        ...section,\n        links: section.links\n          .map((link) => {\n            const filteredLinks = link.links.filter((link: any) => startsWith(link.title, search));\n\n            if (filteredLinks.length === 0) {\n              return null;\n            }\n\n            return {\n              ...link,\n              links: filteredLinks.sort((a: any, b: any) => formatter.compare(a.title, b.title)),\n            };\n          })\n          .filter(Boolean),\n      };\n    }\n\n    return {\n      ...section,\n      links: section.links\n        .filter((link) => startsWith(link.title, search))\n        .sort((a, b) => formatter.compare(a.title, b.title)),\n    };\n  });\n\n  return {\n    menu: data,\n    searchValue: search,\n    onSearchChange: setSearch,\n  };\n};\n","import { Fragment } from 'react';\n\nimport { Box, Icon, TextButton } from '@strapi/design-system';\nimport {\n  SubNav,\n  SubNavHeader,\n  SubNavLink,\n  SubNavLinkSection,\n  SubNavSection,\n  SubNavSections,\n} from '@strapi/design-system/v2';\nimport { pxToRem } from '@strapi/helper-plugin';\nimport { Plus } from '@strapi/icons';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\n\nimport { getTrad } from '../../utils/getTrad';\n\nimport { useContentTypeBuilderMenu } from './useContentTypeBuilderMenu';\n\nexport const ContentTypeBuilderNav = () => {\n  const { menu, searchValue, onSearchChange } = useContentTypeBuilderMenu();\n  const { formatMessage } = useIntl();\n\n  return (\n    <SubNav\n      ariaLabel={formatMessage({\n        id: `${getTrad('plugin.name')}`,\n        defaultMessage: 'Content-Types Builder',\n      })}\n    >\n      <SubNavHeader\n        searchable\n        value={searchValue}\n        onClear={() => onSearchChange('')}\n        onChange={(e) => onSearchChange(e.target.value)}\n        label={formatMessage({\n          id: `${getTrad('plugin.name')}`,\n          defaultMessage: 'Content-Types Builder',\n        })}\n        searchLabel={formatMessage({\n          id: 'global.search',\n          defaultMessage: 'Search',\n        })}\n      />\n      <SubNavSections>\n        {menu.map((section) => (\n          <Fragment key={section.name}>\n            <SubNavSection\n              label={formatMessage({\n                id: section.title.id,\n                defaultMessage: section.title.defaultMessage,\n              })}\n              collapsable\n              badgeLabel={section.links.length.toString()}\n            >\n              {section.links.map((link) => {\n                if (link.links) {\n                  return (\n                    <SubNavLinkSection key={link.name} label={upperFirst(link.title)}>\n                      {link.links.map((subLink: any) => (\n                        <SubNavLink\n                          as={NavLink}\n                          // @ts-expect-error verify if \"to\" is needed\n                          to={subLink.to}\n                          active={subLink.active}\n                          key={subLink.name}\n                          isSubSectionChild\n                        >\n                          {upperFirst(\n                            formatMessage({ id: subLink.name, defaultMessage: subLink.title })\n                          )}\n                        </SubNavLink>\n                      ))}\n                    </SubNavLinkSection>\n                  );\n                }\n\n                return (\n                  // @ts-expect-error verify if \"to\" is needed\n                  <SubNavLink as={NavLink} to={link.to} active={link.active} key={link.name}>\n                    {upperFirst(formatMessage({ id: link.name, defaultMessage: link.title }))}\n                  </SubNavLink>\n                );\n              })}\n            </SubNavSection>\n            {section.customLink && (\n              <Box paddingLeft={7}>\n                <TextButton\n                  onClick={section.customLink.onClick}\n                  startIcon={<Icon as={Plus} width={pxToRem(8)} height={pxToRem(8)} />}\n                  marginTop={2}\n                >\n                  {formatMessage({\n                    id: section.customLink.id,\n                    defaultMessage: section.customLink.defaultMessage,\n                  })}\n                </TextButton>\n              </Box>\n            )}\n          </Fragment>\n        ))}\n      </SubNavSections>\n    </SubNav>\n  );\n};\n","import type { ContentType } from '../types';\n\nexport const isAllowedContentTypesForRelations = (contentType: ContentType) => {\n  return (\n    contentType.kind === 'collectionType' &&\n    (contentType.restrictRelationsTo === null ||\n      (Array.isArray(contentType.restrictRelationsTo) &&\n        contentType.restrictRelationsTo.length > 0))\n  );\n};\n","import { AttributeType } from '../types';\n\nexport const findAttribute = (attributes: AttributeType[], attributeToFind: string) => {\n  return attributes.find(({ name }) => name === attributeToFind);\n};\n","import { MultiSelectNested } from '@strapi/design-system';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\n\nimport { IntlLabel } from '../types';\n\ninterface AllowedTypesSelectProps {\n  intlLabel: IntlLabel;\n  name: string;\n  onChange: (value: any) => void;\n  value?: any;\n}\n\nconst options = [\n  {\n    label: 'All',\n    children: [\n      { label: 'images (JPEG, PNG, GIF, SVG, TIFF, ICO, DVU)', value: 'images' },\n      { label: 'videos (MPEG, MP4, Quicktime, WMV, AVI, FLV)', value: 'videos' },\n      { label: 'audios (MP3, WAV, OGG)', value: 'audios' },\n      { label: 'files (CSV, ZIP, PDF, Excel, JSON, ...)', value: 'files' },\n    ],\n  },\n];\n\nexport const AllowedTypesSelect = ({\n  intlLabel,\n  name,\n  onChange,\n  value = null,\n}: AllowedTypesSelectProps) => {\n  const { formatMessage } = useIntl();\n\n  /* eslint-disable indent */\n  const displayedValue =\n    value === null || value?.length === 0\n      ? formatMessage({ id: 'global.none', defaultMessage: 'None' })\n      : [...value]\n          .sort()\n          .map((v) => upperFirst(v))\n          .join(', ');\n\n  /* eslint-enable indent */\n\n  const label = intlLabel.id\n    ? formatMessage({ id: intlLabel.id, defaultMessage: intlLabel.defaultMessage })\n    : name;\n\n  return (\n    <MultiSelectNested\n      id=\"select1\"\n      label={label}\n      customizeContent={() => displayedValue}\n      onChange={(values: any[]) => {\n        if (values.length > 0) {\n          onChange({ target: { name, value: values, type: 'allowed-types-select' } });\n        } else {\n          onChange({ target: { name, value: null, type: 'allowed-types-select' } });\n        }\n      }}\n      options={options}\n      value={value || []}\n    />\n  );\n};\n","import { Box } from '@strapi/design-system';\nimport { pxToRem, useCustomFields, CustomFieldUID } from '@strapi/helper-plugin';\nimport {\n  Boolean,\n  CollectionType,\n  Component,\n  Date,\n  DynamicZone,\n  Email,\n  Enumeration,\n  Json,\n  Media,\n  Number,\n  Password,\n  Relation,\n  RichText,\n  SingleType,\n  Text,\n  Uid,\n  Blocks,\n} from '@strapi/icons';\nimport styled from 'styled-components';\n\nconst iconByTypes = {\n  biginteger: Number,\n  blocks: Blocks,\n  boolean: Boolean,\n  collectionType: CollectionType,\n  component: Component,\n  contentType: CollectionType,\n  date: Date,\n  datetime: Date,\n  decimal: Number,\n  dynamiczone: DynamicZone,\n  email: Email,\n  enum: Enumeration,\n  enumeration: Enumeration,\n  file: Media,\n  files: Media,\n  float: Number,\n  integer: Number,\n  json: Json,\n  JSON: Json,\n  media: Media,\n  number: Number,\n  password: Password,\n  relation: Relation,\n  richtext: RichText,\n  singleType: SingleType,\n  string: Text,\n  text: Text,\n  time: Date,\n  timestamp: Date,\n  uid: Uid,\n};\n\nconst IconBox = styled(Box)`\n  svg {\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nexport type IconByType = keyof typeof iconByTypes;\n\ntype AttributeIconProps = {\n  type: IconByType;\n  customField?: CustomFieldUID | null;\n};\n\nexport const AttributeIcon = ({ type, customField = null, ...rest }: AttributeIconProps) => {\n  const customFieldsRegistry = useCustomFields();\n\n  let Compo: any = iconByTypes[type];\n\n  if (customField) {\n    const customFieldObject = customFieldsRegistry.get(customField);\n    const icon = customFieldObject?.icon;\n    if (icon) {\n      Compo = icon;\n    }\n  }\n\n  if (!iconByTypes[type]) {\n    return null;\n  }\n\n  return (\n    <IconBox height={pxToRem(24)} width={pxToRem(32)} shrink={0} {...rest} aria-hidden>\n      <Box as={Compo} />\n    </IconBox>\n  );\n};\n","import { Box } from '@strapi/design-system';\nimport styled from 'styled-components';\n\nexport const OptionBoxWrapper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\n  text-align: left;\n  &:hover {\n    background: ${({ theme }) => theme.colors.primary100};\n    border: 1px solid ${({ theme }) => theme.colors.primary200};\n  }\n`;\n","/**\n *\n * AttributeOption\n *\n */\n\nimport { Box, Flex, Typography, Icon } from '@strapi/design-system';\nimport { Spark } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\nimport { getTrad } from '../../utils/getTrad';\nimport { AttributeIcon, IconByType } from '../AttributeIcon';\n\nimport { OptionBoxWrapper } from './OptionBoxWrapper';\n\nconst newAttributes: string[] = [];\n\nconst NewBadge = () => (\n  <Flex grow={1} justifyContent=\"flex-end\">\n    <Flex gap={1} hasRadius background=\"alternative100\" padding={`${2 / 16}rem ${4 / 16}rem`}>\n      <Icon width={`${10 / 16}rem`} height={`${10 / 16}rem`} as={Spark} color=\"alternative600\" />\n      <Typography textColor=\"alternative600\" variant=\"sigma\">\n        New\n      </Typography>\n    </Flex>\n  </Flex>\n);\n\ntype AttributeOptionProps = {\n  type: IconByType;\n};\n\nexport const AttributeOption = ({ type = 'text' }: AttributeOptionProps) => {\n  const { formatMessage } = useIntl();\n\n  const { onClickSelectField } = useFormModalNavigation();\n\n  const handleClick = () => {\n    const step = type === 'component' ? '1' : null;\n\n    onClickSelectField({\n      attributeType: type,\n      step,\n    });\n  };\n\n  return (\n    <OptionBoxWrapper padding={4} as=\"button\" hasRadius type=\"button\" onClick={handleClick}>\n      <Flex>\n        <AttributeIcon type={type} />\n        <Box paddingLeft={4} width=\"100%\">\n          <Flex justifyContent=\"space-between\">\n            <Typography fontWeight=\"bold\">\n              {formatMessage({ id: getTrad(`attribute.${type}`), defaultMessage: type })}\n            </Typography>\n            {newAttributes.includes(type) && <NewBadge />}\n          </Flex>\n          <Flex>\n            <Typography variant=\"pi\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTrad(`attribute.${type}.description`),\n                defaultMessage: 'A type for modeling data',\n              })}\n            </Typography>\n          </Flex>\n        </Box>\n      </Flex>\n    </OptionBoxWrapper>\n  );\n};\n","import { Flex, Grid, GridItem, KeyboardNavigable } from '@strapi/design-system';\n\nimport { IconByType } from '../AttributeIcon';\n\nimport { AttributeOption } from './AttributeOption';\n\ntype AttributeListProps = {\n  attributes: IconByType[][];\n};\n\nexport const AttributeList = ({ attributes }: AttributeListProps) => (\n  <KeyboardNavigable tagName=\"button\">\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={8}>\n      {attributes.map((attributeRow, index) => {\n        return (\n          // eslint-disable-next-line react/no-array-index-key\n          <Grid key={index} gap={3}>\n            {attributeRow.map((attribute) => (\n              <GridItem key={attribute} col={6}>\n                <AttributeOption type={attribute} />\n              </GridItem>\n            ))}\n          </Grid>\n        );\n      })}\n    </Flex>\n  </KeyboardNavigable>\n);\n","import * as React from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\nimport { AttributeIcon, IconByType } from '../AttributeIcon';\n\nimport { OptionBoxWrapper } from './OptionBoxWrapper';\n\nimport type { CustomFieldUID } from '@strapi/helper-plugin';\n\nexport type CustomFieldOption = {\n  name: string;\n  type: IconByType;\n  icon: React.ComponentType;\n  intlLabel: {\n    id: string;\n    defaultMessage: string;\n  };\n  intlDescription: {\n    id: string;\n    defaultMessage: string;\n  };\n};\n\ntype CustomFieldOptionProps = {\n  customFieldUid: CustomFieldUID;\n  customField: CustomFieldOption;\n};\n\nexport const CustomFieldOption = ({ customFieldUid, customField }: CustomFieldOptionProps) => {\n  const { type, intlLabel, intlDescription } = customField;\n  const { formatMessage } = useIntl();\n\n  const { onClickSelectCustomField } = useFormModalNavigation();\n\n  const handleClick = () => {\n    onClickSelectCustomField({\n      attributeType: type,\n      customFieldUid,\n    });\n  };\n\n  return (\n    <OptionBoxWrapper padding={4} as=\"button\" hasRadius type=\"button\" onClick={handleClick}>\n      <Flex>\n        <AttributeIcon type={type} customField={customFieldUid} />\n        <Box paddingLeft={4}>\n          <Flex>\n            <Typography fontWeight=\"bold\">{formatMessage(intlLabel)}</Typography>\n          </Flex>\n          <Flex>\n            <Typography variant=\"pi\" textColor=\"neutral600\">\n              {formatMessage(intlDescription)}\n            </Typography>\n          </Flex>\n        </Box>\n      </Flex>\n    </OptionBoxWrapper>\n  );\n};\n","import { Box, Flex, Icon, LinkButton, Typography } from '@strapi/design-system';\nimport { EmptyDocuments, Plus } from '@strapi/icons';\nimport * as qs from 'qs';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { getTrad } from '../../utils';\n\nconst EmptyCard = styled(Box)`\n  background: ${({ theme }) =>\n    `linear-gradient(180deg, rgba(234, 234, 239, 0) 0%, ${theme.colors.neutral150} 100%)`};\n  opacity: 0.33;\n`;\n\nexport const EmptyCardGrid = () => {\n  return (\n    <Flex wrap=\"wrap\" gap={4}>\n      {[...Array(4)].map((_, idx) => {\n        return (\n          <EmptyCard\n            // eslint-disable-next-line react/no-array-index-key\n            key={`empty-card-${idx}`}\n            height=\"138px\"\n            width=\"375px\"\n            hasRadius\n          />\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport const EmptyAttributes = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box position=\"relative\">\n      <EmptyCardGrid />\n      <Box position=\"absolute\" top={6} width=\"100%\">\n        <Flex alignItems=\"center\" justifyContent=\"center\" direction=\"column\">\n          <Icon as={EmptyDocuments} color=\"\" width=\"160px\" height=\"88px\" />\n          <Box paddingTop={6} paddingBottom={4}>\n            <Box textAlign=\"center\">\n              <Typography variant=\"delta\" as=\"p\" textColor=\"neutral600\">\n                {formatMessage({\n                  id: getTrad('modalForm.empty.heading'),\n                  defaultMessage: 'Nothing in here yet.',\n                })}\n              </Typography>\n              <Box paddingTop={4}>\n                <Typography variant=\"delta\" as=\"p\" textColor=\"neutral600\">\n                  {formatMessage({\n                    id: getTrad('modalForm.empty.sub-heading'),\n                    defaultMessage:\n                      'Find what you are looking for through a wide range of extensions.',\n                  })}\n                </Typography>\n              </Box>\n            </Box>\n          </Box>\n          <LinkButton\n            to={`/marketplace?${qs.stringify({ categories: ['Custom fields'] })}`}\n            variant=\"secondary\"\n            startIcon={<Plus />}\n          >\n            {formatMessage({\n              id: getTrad('modalForm.empty.button'),\n              defaultMessage: 'Add custom fields',\n            })}\n          </LinkButton>\n        </Flex>\n      </Box>\n    </Box>\n  );\n};\n","import { Flex, Grid, GridItem, KeyboardNavigable } from '@strapi/design-system';\nimport { Link } from '@strapi/design-system/v2';\nimport { useCustomFields, CustomFieldUID } from '@strapi/helper-plugin';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../utils';\n\nimport { CustomFieldOption } from './CustomFieldOption';\nimport { EmptyAttributes } from './EmptyAttributes';\n\nexport const CustomFieldsList = () => {\n  const { formatMessage } = useIntl();\n  const customFields = useCustomFields();\n  // TODO change this once useCustomFields is typed (helper-plugin types are solved)\n  const registeredCustomFields = Object.entries(customFields.getAll()) as [\n    CustomFieldUID,\n    CustomFieldOption\n  ][];\n\n  if (!registeredCustomFields.length) {\n    return <EmptyAttributes />;\n  }\n\n  // Sort the array alphabetically by customField name\n  const sortedCustomFields = registeredCustomFields.sort((a, b) =>\n    a[1].name > b[1].name ? 1 : -1\n  );\n\n  return (\n    <KeyboardNavigable tagName=\"button\">\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={3}>\n        <Grid gap={3}>\n          {sortedCustomFields.map(([uid, customField]) => (\n            <GridItem key={uid} col={6}>\n              <CustomFieldOption key={uid} customFieldUid={uid} customField={customField} />\n            </GridItem>\n          ))}\n        </Grid>\n        <Link\n          href=\"https://docs.strapi.io/developer-docs/latest/development/custom-fields.html\"\n          isExternal\n        >\n          {formatMessage({\n            id: getTrad('modalForm.tabs.custom.howToLink'),\n            defaultMessage: 'How to add custom fields',\n          })}\n        </Link>\n      </Flex>\n    </KeyboardNavigable>\n  );\n};\n","/**\n *\n * AttributeOptions\n *\n */\n\nimport {\n  Box,\n  Divider,\n  Flex,\n  ModalBody,\n  Tab,\n  TabGroup,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Typography,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../utils';\nimport { IconByType } from '../AttributeIcon';\n\nimport { AttributeList } from './AttributeList';\nimport { CustomFieldsList } from './CustomFieldsList';\n\ntype AttributeOptionsProps = {\n  attributes: IconByType[][];\n  forTarget: string;\n  kind: string;\n};\n\nexport const AttributeOptions = ({ attributes, forTarget, kind }: AttributeOptionsProps) => {\n  const { formatMessage } = useIntl();\n\n  const defaultTabId = getTrad('modalForm.tabs.default');\n  const customTabId = getTrad('modalForm.tabs.custom');\n\n  const titleIdSuffix = forTarget.includes('component') ? 'component' : kind;\n  const titleId = getTrad(`modalForm.sub-header.chooseAttribute.${titleIdSuffix}`);\n\n  return (\n    <ModalBody padding={7}>\n      <TabGroup\n        label={formatMessage({\n          id: getTrad('modalForm.tabs.label'),\n          defaultMessage: 'Default and Custom types tabs',\n        })}\n        id=\"attribute-type-tabs\"\n        variant=\"simple\"\n      >\n        <Flex justifyContent=\"space-between\">\n          <Typography variant=\"beta\" as=\"h2\">\n            {formatMessage({ id: titleId, defaultMessage: 'Select a field' })}\n          </Typography>\n          <Tabs>\n            <Tab>{formatMessage({ id: defaultTabId, defaultMessage: 'Default' })}</Tab>\n            <Tab>{formatMessage({ id: customTabId, defaultMessage: 'Custom' })}</Tab>\n          </Tabs>\n        </Flex>\n        <Box paddingBottom={6}>\n          <Divider />\n        </Box>\n        <TabPanels>\n          <TabPanel>\n            <AttributeList attributes={attributes} />\n          </TabPanel>\n          <TabPanel>\n            <CustomFieldsList />\n          </TabPanel>\n        </TabPanels>\n      </TabGroup>\n    </ModalBody>\n  );\n};\n","import { Option, Select } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { IntlLabel } from '../types';\n\ninterface Metadata {\n  intlLabel: IntlLabel;\n  disabled?: boolean;\n  hidden?: boolean;\n}\n\ninterface Option {\n  metadatas: Metadata;\n  key: string | number;\n  value: string | number;\n}\n\ninterface BooleanDefaultValueSelectProps {\n  intlLabel: IntlLabel;\n  name: string;\n  onChange: (value: any) => void;\n  options: Option[];\n  value?: any;\n}\n\nexport const BooleanDefaultValueSelect = ({\n  intlLabel,\n  name,\n  options,\n  onChange,\n  value = null,\n}: BooleanDefaultValueSelectProps) => {\n  const { formatMessage } = useIntl();\n  const label = intlLabel.id\n    ? formatMessage(\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n        { ...intlLabel.values }\n      )\n    : name;\n\n  const handleChange = (value: any) => {\n    let nextValue: boolean | string = '';\n\n    if (value === 'true') {\n      nextValue = true;\n    }\n\n    if (value === 'false') {\n      nextValue = false;\n    }\n\n    onChange({ target: { name, value: nextValue, type: 'select-default-boolean' } });\n  };\n\n  return (\n    <Select\n      label={label}\n      id={name}\n      name={name}\n      onChange={handleChange}\n      value={(value === null ? '' : value).toString()}\n    >\n      {options.map(({ metadatas: { intlLabel, disabled, hidden }, key, value }) => {\n        return (\n          <Option key={key} value={value} disabled={disabled} hidden={hidden}>\n            {/* No need to translate the options */}\n            {intlLabel.defaultMessage}\n          </Option>\n        );\n      })}\n    </Select>\n  );\n};\n","import { Flex, inputFocusStyle, Typography } from '@strapi/design-system';\nimport styled from 'styled-components';\n\nconst Wrapper = styled(Flex)`\n  position: relative;\n  align-items: stretch;\n\n  label {\n    border-radius: 4px;\n    max-width: 50%;\n    cursor: pointer;\n    user-select: none;\n    flex: 1;\n    ${inputFocusStyle()}\n  }\n\n  input {\n    position: absolute;\n    opacity: 0;\n  }\n\n  .option {\n    height: 100%;\n    border-radius: 4px;\n    border: 1px solid ${({ theme }) => theme.colors.neutral200};\n    will-change: transform, opacity;\n    background: ${({ theme }) => theme.colors.neutral0};\n\n    .checkmark {\n      position: relative;\n      display: block;\n      will-change: transform;\n      background: ${({ theme }) => theme.colors.neutral0};\n      width: ${({ theme }) => theme.spaces[5]};\n      height: ${({ theme }) => theme.spaces[5]};\n      border: solid 1px ${({ theme }) => theme.colors.neutral300};\n      border-radius: 50%;\n\n      &:before,\n      &:after {\n        content: '';\n        display: block;\n        border-radius: 50%;\n        width: ${({ theme }) => theme.spaces[3]};\n        height: ${({ theme }) => theme.spaces[3]};\n        position: absolute;\n        top: 3px;\n        left: 3px;\n      }\n\n      &:after {\n        transform: scale(0);\n        transition: inherit;\n        will-change: transform;\n      }\n    }\n  }\n\n  .container input:checked ~ div {\n    background: ${({ theme }) => theme.colors.primary100};\n    ${Typography} {\n      color: ${({ theme }) => theme.colors.primary600};\n    }\n    border: 1px solid ${({ theme }) => theme.colors.primary200};\n    .checkmark {\n      border: solid 1px ${({ theme }) => theme.colors.primary600};\n      &::after {\n        background: ${({ theme }) => theme.colors.primary600};\n        transform: scale(1);\n      }\n    }\n  }\n`;\n\nexport { Wrapper };\n","import { Box, Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { Wrapper } from './Styles';\n\nimport type { IntlLabel } from '../../types';\n\ninterface Radio {\n  title: IntlLabel;\n  description: IntlLabel;\n  value: any;\n}\n\ninterface CustomRadioGroupProps {\n  intlLabel: IntlLabel;\n  name: string;\n  onChange: (value: any) => void;\n  radios?: Radio[];\n  value?: string | boolean;\n}\n\nexport const CustomRadioGroup = ({\n  intlLabel,\n  name,\n  onChange,\n  radios = [],\n  value,\n}: CustomRadioGroupProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n      <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral800\" htmlFor={name} as=\"label\">\n        {formatMessage(intlLabel)}\n      </Typography>\n      <Wrapper gap={4} alignItems=\"stretch\">\n        {radios.map((radio) => {\n          return (\n            <label htmlFor={radio.value.toString()} key={radio.value} className=\"container\">\n              <input\n                id={radio.value.toString()}\n                name={name}\n                className=\"option-input\"\n                checked={radio.value === value}\n                value={radio.value}\n                key={radio.value}\n                onChange={onChange}\n                type=\"radio\"\n              />\n              <Box className=\"option\" padding={4}>\n                <Flex>\n                  <Box paddingRight={4}>\n                    <span className=\"checkmark\" />\n                  </Box>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n                    <Typography fontWeight=\"bold\">{formatMessage(radio.title)}</Typography>\n                    <Typography variant=\"pi\" textColor=\"neutral600\">\n                      {formatMessage(radio.description)}\n                    </Typography>\n                  </Flex>\n                </Flex>\n              </Box>\n            </label>\n          );\n        })}\n      </Wrapper>\n    </Flex>\n  );\n};\n","import * as React from 'react';\n\nimport { IntlLabel } from '../types';\n\nimport { CustomRadioGroup } from './CustomRadioGroup';\n\ninterface BooleanRadioGroupProps {\n  intlLabel: IntlLabel;\n  name: string;\n  onChange: (value: any) => void;\n}\n\nexport const BooleanRadioGroup = ({\n  onChange,\n  name,\n  intlLabel,\n  ...rest\n}: BooleanRadioGroupProps) => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const checked = e.target.value !== 'false';\n\n    onChange({ target: { name, value: checked, type: 'boolean-radio-group' } });\n  };\n\n  return <CustomRadioGroup {...rest} name={name} onChange={handleChange} intlLabel={intlLabel} />;\n};\n","import { useState } from 'react';\n\nimport { Box, Checkbox, Flex, NumberInput, TextInput } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { IntlLabel } from '../types';\n\ninterface CheckboxWithNumberFieldProps {\n  error?: string;\n  intlLabel: IntlLabel;\n  modifiedData: Record<string, any>;\n  name: string;\n  onChange: (value: any) => void;\n  value?: any;\n}\n\nexport const CheckboxWithNumberField = ({\n  error,\n  intlLabel,\n  modifiedData,\n  name,\n  onChange,\n  value = null,\n}: CheckboxWithNumberFieldProps) => {\n  const { formatMessage } = useIntl();\n  const [showInput, setShowInput] = useState(!!value || value === 0);\n  const label = intlLabel.id\n    ? formatMessage(\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n        { ...intlLabel.values }\n      )\n    : name;\n\n  const type = modifiedData.type === 'biginteger' ? 'text' : 'number';\n\n  const disabled = !modifiedData.type;\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n      <Checkbox\n        id={name}\n        name={name}\n        onValueChange={(value: any) => {\n          const initValue = type === 'text' ? '0' : 0;\n          const nextValue = value ? initValue : null;\n\n          onChange({ target: { name, value: nextValue } });\n          setShowInput((prev) => !prev);\n        }}\n        value={showInput}\n      >\n        {label}\n      </Checkbox>\n      {showInput && (\n        <Box paddingLeft={6} style={{ maxWidth: '200px' }}>\n          {type === 'text' ? (\n            <TextInput\n              label=\"\"\n              aria-label={label}\n              disabled={disabled}\n              error={errorMessage}\n              id={name}\n              name={name}\n              onChange={onChange}\n              value={value === null ? '' : value}\n            />\n          ) : (\n            <NumberInput\n              aria-label={label}\n              disabled={disabled}\n              error={errorMessage}\n              id={name}\n              name={name}\n              onValueChange={(value: any) => {\n                onChange({ target: { name, value, type } });\n              }}\n              value={value || 0}\n            />\n          )}\n        </Box>\n      )}\n    </Flex>\n  );\n};\n","import { useNotification } from '@strapi/helper-plugin';\n\nimport { getTrad } from '../utils';\n\nimport { CustomRadioGroup } from './CustomRadioGroup';\n\nimport type { IntlLabel } from '../types';\n\ninterface Radio {\n  title: IntlLabel;\n  description: IntlLabel;\n  value: any;\n}\n\ninterface ContentTypeRadioGroupProps {\n  intlLabel: IntlLabel;\n  name: string;\n  onChange: (value: any) => void;\n  radios?: Radio[];\n  value?: string | boolean;\n}\n\nexport const ContentTypeRadioGroup = ({ onChange, ...rest }: ContentTypeRadioGroupProps) => {\n  const toggleNotification = useNotification();\n\n  const handleChange = (e: any) => {\n    toggleNotification({\n      type: 'info',\n      message: {\n        id: getTrad('contentType.kind.change.warning'),\n        defaultMessage:\n          'You just changed the kind of a content type: API will be reset (routes, controllers, and services will be overwritten).',\n      },\n    });\n\n    onChange(e);\n  };\n\n  return <CustomRadioGroup {...rest} onChange={handleChange} />;\n};\n","/**\n *\n * DraftAndPublishToggle\n *\n */\n\nimport { useState } from 'react';\n\nimport { Checkbox } from '@strapi/design-system';\nimport { ConfirmDialog } from '@strapi/helper-plugin';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../utils';\n\nimport type { IntlLabel } from '../types';\n\ninterface Description {\n  id: string;\n  defaultMessage: string;\n  values?: Record<string, any>;\n}\n\ninterface DraftAndPublishToggleProps {\n  description?: Description;\n  disabled?: boolean;\n  intlLabel: IntlLabel;\n  isCreating: boolean;\n  name: string;\n  onChange: (value: { target: { name: string; value: boolean } }) => void;\n  value?: boolean;\n}\n\nexport const DraftAndPublishToggle = ({\n  description,\n  disabled = false,\n  intlLabel,\n  isCreating,\n  name,\n  onChange,\n  value = false,\n}: DraftAndPublishToggleProps) => {\n  const { formatMessage } = useIntl();\n  const [showWarning, setShowWarning] = useState(false);\n  const label = intlLabel.id\n    ? formatMessage(\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n        { ...intlLabel.values }\n      )\n    : name;\n\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n\n  const handleToggle = () => setShowWarning((prev) => !prev);\n\n  const handleConfirm = () => {\n    onChange({ target: { name, value: false } });\n\n    handleToggle();\n  };\n\n  const handleChange = ({ target: { checked } }: { target: { checked: boolean } }) => {\n    if (!checked && !isCreating) {\n      handleToggle();\n\n      return;\n    }\n\n    onChange({ target: { name, value: checked } });\n  };\n\n  return (\n    <>\n      <Checkbox checked={value} disabled={disabled} hint={hint} name={name} onChange={handleChange}>\n        {label}\n      </Checkbox>\n\n      <ConfirmDialog\n        isOpen={showWarning}\n        onToggleDialog={handleToggle}\n        onConfirm={handleConfirm}\n        bodyText={{\n          id: getTrad('popUpWarning.draft-publish.message'),\n          defaultMessage: 'If you disable the draft & publish, your drafts will be deleted.',\n        }}\n        leftButtonText={{\n          id: 'components.popUpWarning.button.cancel',\n          defaultMessage: 'No, cancel',\n        }}\n        rightButtonText={{\n          id: getTrad('popUpWarning.draft-publish.button.confirm'),\n          defaultMessage: 'Yes, disable',\n        }}\n      />\n    </>\n  );\n};\n","/**\n *\n * FormModalEndActions\n *\n */\n\nimport { SyntheticEvent } from 'react';\n\nimport { Button } from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../utils';\n\ntype FormModalEndActionsProps = {\n  categoryName?: string;\n  deleteCategory: (categoryName: string) => void;\n  deleteComponent: () => void;\n  deleteContentType: () => void;\n  isAttributeModal: boolean;\n  isCustomFieldModal: boolean;\n  isComponentAttribute: boolean;\n  isComponentModal: boolean;\n  isComponentToDzModal: boolean;\n  isContentTypeModal: boolean;\n  isCreatingComponent: boolean;\n  isCreatingComponentAttribute: boolean;\n  isCreatingComponentInDz: boolean;\n  isCreatingComponentWhileAddingAField: boolean;\n  isCreatingContentType: boolean;\n  isCreatingDz: boolean;\n  isDzAttribute: boolean;\n  isEditingAttribute: boolean;\n  isEditingCategory: boolean;\n  isInFirstComponentStep: boolean;\n  onSubmitAddComponentAttribute: (e: SyntheticEvent, shouldContinue: boolean) => void;\n  onSubmitAddComponentToDz: (e: SyntheticEvent, shouldContinue: boolean) => void;\n  onSubmitCreateContentType: (e: SyntheticEvent, shouldContinue: boolean) => void;\n  onSubmitCreateComponent: (e: SyntheticEvent, shouldContinue: boolean) => void;\n  onSubmitCreateDz: (e: SyntheticEvent, shouldContinue: boolean) => void;\n  onSubmitEditAttribute: (e: SyntheticEvent, shouldContinue: boolean) => void;\n  onSubmitEditCategory: (e: SyntheticEvent) => void;\n  onSubmitEditComponent: (e: SyntheticEvent, shouldContinue: boolean) => void;\n  onSubmitEditContentType: (e: SyntheticEvent, shouldContinue: boolean) => void;\n  onSubmitEditCustomFieldAttribute: (e: SyntheticEvent, shouldContinue: boolean) => void;\n  onSubmitEditDz: (e: SyntheticEvent, shouldContinue: boolean) => void;\n  onClickFinish: () => void;\n};\n\nexport const FormModalEndActions = ({\n  categoryName,\n  deleteCategory,\n  deleteComponent,\n  deleteContentType,\n  isAttributeModal,\n  isCustomFieldModal,\n  isComponentAttribute,\n  isComponentToDzModal,\n  isContentTypeModal,\n  isCreatingComponent,\n  isCreatingComponentAttribute,\n  isCreatingComponentInDz,\n  isCreatingComponentWhileAddingAField,\n  isCreatingContentType,\n  isCreatingDz,\n  isComponentModal,\n  isDzAttribute,\n  isEditingAttribute,\n  isEditingCategory,\n  isInFirstComponentStep,\n  onSubmitAddComponentAttribute,\n  onSubmitAddComponentToDz,\n  onSubmitCreateContentType,\n  onSubmitCreateComponent,\n  onSubmitCreateDz,\n  onSubmitEditAttribute,\n  onSubmitEditCategory,\n  onSubmitEditComponent,\n  onSubmitEditContentType,\n  onSubmitEditCustomFieldAttribute,\n  onSubmitEditDz,\n  onClickFinish,\n}: FormModalEndActionsProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isComponentToDzModal) {\n    if (isCreatingComponentInDz) {\n      return (\n        <Button\n          variant=\"secondary\"\n          type=\"submit\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n\n            onSubmitAddComponentToDz(e, true);\n          }}\n          startIcon={<Plus />}\n        >\n          {formatMessage({\n            id: getTrad('form.button.add-first-field-to-created-component'),\n            defaultMessage: 'Add first field to the component',\n          })}\n        </Button>\n      );\n    }\n\n    return (\n      <Button\n        variant=\"default\"\n        type=\"submit\"\n        onClick={(e: SyntheticEvent) => {\n          e.preventDefault();\n\n          onSubmitAddComponentToDz(e, false);\n        }}\n      >\n        {formatMessage({\n          id: 'global.finish',\n          defaultMessage: 'Finish',\n        })}\n      </Button>\n    );\n  }\n\n  if (isAttributeModal && isDzAttribute && !isCreatingDz) {\n    return (\n      <Button\n        variant=\"default\"\n        type=\"submit\"\n        onClick={(e: SyntheticEvent) => {\n          e.preventDefault();\n\n          onClickFinish();\n          onSubmitEditDz(e, false);\n        }}\n      >\n        {formatMessage({\n          id: 'global.finish',\n          defaultMessage: 'Finish',\n        })}\n      </Button>\n    );\n  }\n\n  if (isAttributeModal && isDzAttribute && isCreatingDz) {\n    return (\n      <>\n        <Button\n          variant=\"secondary\"\n          type=\"submit\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n\n            onSubmitCreateDz(e, true);\n          }}\n          startIcon={<Plus />}\n        >\n          {formatMessage({\n            id: getTrad('form.button.add-components-to-dynamiczone'),\n            defaultMessage: 'Add components to the zone',\n          })}\n        </Button>\n        {/* // TO FIX fix doesnt close the modal */}\n        {/* <Button\n          variant=\"default\"\n          type=\"button\"\n          onClick={e => {\n            e.preventDefault();\n\n            onSubmitCreateDz(e, false);\n          }}\n        >\n          {formatMessage({\n            id: 'global.finish',\n            defaultMessage: 'Finish',\n          })}\n        </Button> */}\n      </>\n    );\n  }\n\n  if (isAttributeModal && isComponentAttribute) {\n    if (isInFirstComponentStep) {\n      return (\n        <Button\n          variant=\"secondary\"\n          type=\"submit\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n\n            onSubmitAddComponentAttribute(e, true);\n          }}\n        >\n          {isCreatingComponentAttribute\n            ? formatMessage({\n                id: getTrad('form.button.configure-component'),\n                defaultMessage: 'Configure the component',\n              })\n            : formatMessage({\n                id: getTrad('form.button.select-component'),\n                defaultMessage: 'Configure the component',\n              })}\n        </Button>\n      );\n    }\n\n    return (\n      <>\n        <Button\n          variant=\"secondary\"\n          type=\"submit\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n\n            onSubmitAddComponentAttribute(e, true);\n          }}\n          startIcon={<Plus />}\n        >\n          {isCreatingComponentWhileAddingAField\n            ? formatMessage({\n                id: getTrad('form.button.add-first-field-to-created-component'),\n                defaultMessage: 'Add first field to the component',\n              })\n            : formatMessage({\n                id: getTrad('form.button.add-field'),\n                defaultMessage: 'Add another field',\n              })}\n        </Button>\n        <Button\n          variant=\"default\"\n          type=\"button\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n\n            onClickFinish();\n            onSubmitAddComponentAttribute(e, false);\n          }}\n        >\n          {formatMessage({\n            id: 'global.finish',\n            defaultMessage: 'Finish',\n          })}\n        </Button>\n      </>\n    );\n  }\n\n  if (isAttributeModal && !isComponentAttribute && !isDzAttribute) {\n    return (\n      <>\n        <Button\n          type={isEditingAttribute ? 'button' : 'submit'}\n          variant=\"secondary\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n\n            onSubmitEditAttribute(e, true);\n          }}\n          startIcon={<Plus />}\n        >\n          {formatMessage({\n            id: getTrad('form.button.add-field'),\n            defaultMessage: 'Add another field',\n          })}\n        </Button>\n        <Button\n          type={isEditingAttribute ? 'submit' : 'button'}\n          variant=\"default\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n\n            onClickFinish();\n            onSubmitEditAttribute(e, false);\n          }}\n        >\n          {formatMessage({\n            id: 'global.finish',\n            defaultMessage: 'Finish',\n          })}\n        </Button>\n      </>\n    );\n  }\n\n  if (isContentTypeModal) {\n    return (\n      <>\n        {!isCreatingContentType && (\n          <>\n            <Button\n              type=\"button\"\n              variant=\"danger\"\n              onClick={(e: SyntheticEvent) => {\n                e.preventDefault();\n                deleteContentType();\n              }}\n            >\n              {formatMessage({\n                id: 'global.delete',\n                defaultMessage: 'Delete',\n              })}\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"default\"\n              onClick={(e: SyntheticEvent) => {\n                e.preventDefault();\n\n                onSubmitEditContentType(e, false);\n              }}\n            >\n              {formatMessage({\n                id: 'global.finish',\n                defaultMessage: 'Finish',\n              })}\n            </Button>\n          </>\n        )}\n        {isCreatingContentType && (\n          <Button\n            type=\"submit\"\n            variant=\"secondary\"\n            onClick={(e: SyntheticEvent) => {\n              e.preventDefault();\n\n              onSubmitCreateContentType(e, true);\n            }}\n          >\n            {formatMessage({\n              id: 'global.continue',\n              defaultMessage: 'Continue',\n            })}\n          </Button>\n        )}\n      </>\n    );\n  }\n\n  if (isComponentModal) {\n    return (\n      <>\n        {!isCreatingComponent && (\n          <>\n            <Button\n              type=\"button\"\n              variant=\"danger\"\n              onClick={(e: SyntheticEvent) => {\n                e.preventDefault();\n                deleteComponent();\n              }}\n            >\n              {formatMessage({\n                id: 'global.delete',\n                defaultMessage: 'Delete',\n              })}\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"default\"\n              onClick={(e: SyntheticEvent) => {\n                e.preventDefault();\n\n                onSubmitEditComponent(e, false);\n              }}\n            >\n              {formatMessage({\n                id: 'global.finish',\n                defaultMessage: 'Finish',\n              })}\n            </Button>\n          </>\n        )}\n        {isCreatingComponent && (\n          <Button\n            type=\"submit\"\n            variant=\"secondary\"\n            onClick={(e: SyntheticEvent) => {\n              e.preventDefault();\n\n              onSubmitCreateComponent(e, true);\n            }}\n          >\n            {formatMessage({\n              id: 'global.continue',\n              defaultMessage: 'Continue',\n            })}\n          </Button>\n        )}\n      </>\n    );\n  }\n\n  if (isEditingCategory) {\n    return (\n      <>\n        <Button\n          type=\"button\"\n          variant=\"danger\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n            if (categoryName) {\n              deleteCategory(categoryName);\n            }\n          }}\n        >\n          {formatMessage({\n            id: 'global.delete',\n            defaultMessage: 'Delete',\n          })}\n        </Button>\n        <Button\n          type=\"submit\"\n          variant=\"default\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n\n            onSubmitEditCategory(e);\n          }}\n        >\n          {formatMessage({\n            id: 'global.finish',\n            defaultMessage: 'finish',\n          })}\n        </Button>\n      </>\n    );\n  }\n\n  if (isCustomFieldModal) {\n    return (\n      <>\n        <Button\n          type={isEditingAttribute ? 'button' : 'submit'}\n          variant=\"secondary\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n\n            onSubmitEditCustomFieldAttribute(e, true);\n          }}\n          startIcon={<Plus />}\n        >\n          {formatMessage({\n            id: getTrad('form.button.add-field'),\n            defaultMessage: 'Add another field',\n          })}\n        </Button>\n        <Button\n          type={isEditingAttribute ? 'submit' : 'button'}\n          variant=\"default\"\n          onClick={(e: SyntheticEvent) => {\n            e.preventDefault();\n\n            onClickFinish();\n            onSubmitEditCustomFieldAttribute(e, false);\n          }}\n        >\n          {formatMessage({\n            id: 'global.finish',\n            defaultMessage: 'Finish',\n          })}\n        </Button>\n      </>\n    );\n  }\n\n  return null;\n};\n","/**\n *\n * FormModalHeader\n *\n */\nimport { Box, Flex, ModalHeader, Typography } from '@strapi/design-system';\nimport { Breadcrumbs, Crumb, Link } from '@strapi/design-system/v2';\nimport { CustomFieldUID } from '@strapi/helper-plugin';\nimport { ArrowLeft } from '@strapi/icons';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\n\nimport { useDataManager } from '../hooks/useDataManager';\nimport { useFormModalNavigation } from '../hooks/useFormModalNavigation';\nimport { getTrad } from '../utils';\n\nimport { AttributeIcon, IconByType } from './AttributeIcon';\n\nimport type { SchemaType } from '../types';\nimport type { UID } from '@strapi/types';\n\ninterface Header {\n  label: string;\n  info?: { category: string; name: string };\n}\n\ninterface FormModalHeaderProps {\n  actionType?: string | null;\n  attributeName: string;\n  attributeType: IconByType;\n  categoryName: string;\n  contentTypeKind: IconByType;\n  dynamicZoneTarget: string;\n  forTarget: SchemaType;\n  modalType: string | null;\n  targetUid: UID.Any;\n  customFieldUid?: CustomFieldUID | null;\n  showBackLink?: boolean;\n}\n\nexport const FormModalHeader = ({\n  actionType = null,\n  attributeName,\n  attributeType,\n  categoryName,\n  contentTypeKind,\n  dynamicZoneTarget,\n  forTarget,\n  modalType = null,\n  targetUid,\n  customFieldUid = null,\n  showBackLink = false,\n}: FormModalHeaderProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData } = useDataManager();\n  const { onOpenModalAddField } = useFormModalNavigation();\n\n  let icon: IconByType = 'component';\n  let headers: Header[] = [];\n\n  const schema = modifiedData?.[forTarget]?.[targetUid] || modifiedData?.[forTarget] || null;\n  const displayName = schema?.schema.displayName;\n\n  if (modalType === 'contentType') {\n    icon = contentTypeKind;\n  }\n\n  if (['component', 'editCategory'].includes(modalType || '')) {\n    icon = 'component';\n  }\n\n  const isCreatingMainSchema = ['component', 'contentType'].includes(modalType || '');\n\n  if (isCreatingMainSchema) {\n    let headerId = getTrad(`modalForm.component.header-${actionType}`);\n\n    if (modalType === 'contentType') {\n      headerId = getTrad(`modalForm.${contentTypeKind}.header-create`);\n    }\n\n    if (actionType === 'edit') {\n      headerId = getTrad(`modalForm.header-edit`);\n    }\n\n    return (\n      <ModalHeader>\n        <Flex>\n          <Box>\n            <AttributeIcon type={icon} />\n          </Box>\n          <Box paddingLeft={3}>\n            <Typography fontWeight=\"bold\" textColor=\"neutral800\" as=\"h2\" id=\"title\">\n              {formatMessage({ id: headerId }, { name: displayName })}\n            </Typography>\n          </Box>\n        </Flex>\n      </ModalHeader>\n    );\n  }\n\n  headers = [\n    {\n      label: displayName,\n      info: { category: schema?.category || null, name: schema?.schema.displayName },\n    },\n  ];\n\n  if (modalType === 'chooseAttribute') {\n    icon = ['component', 'components'].includes(forTarget) ? 'component' : schema.schema.kind;\n  }\n\n  if (modalType === 'addComponentToDynamicZone') {\n    icon = 'dynamiczone';\n    headers.push({ label: dynamicZoneTarget });\n  }\n\n  if (modalType === 'attribute' || modalType === 'customField') {\n    icon = attributeType;\n    headers.push({ label: attributeName });\n  }\n\n  if (modalType === 'editCategory') {\n    const label = formatMessage({\n      id: getTrad('modalForm.header.categories'),\n      defaultMessage: 'Categories',\n    });\n\n    headers = [{ label }, { label: categoryName }];\n  }\n\n  return (\n    <ModalHeader>\n      <Flex gap={3}>\n        {showBackLink && (\n          // This is a workaround and should use the LinkButton with a variant that currently doesn't exist\n          <Link\n            aria-label={formatMessage({\n              id: getTrad('modalForm.header.back'),\n              defaultMessage: 'Back',\n            })}\n            startIcon={<ArrowLeft />}\n            onClick={() => onOpenModalAddField({ forTarget, targetUid })}\n            href=\"#back\"\n            isExternal={false}\n          />\n        )}\n        <AttributeIcon type={icon} customField={customFieldUid} />\n\n        <Breadcrumbs label={headers.map(({ label }) => label).join(',')}>\n          {headers.map(({ label, info }, index, arr) => {\n            label = upperFirst(label);\n\n            if (!label) {\n              return null;\n            }\n\n            const key = `${label}.${index}`;\n\n            if (info?.category) {\n              label = `${label} (${upperFirst(info.category)} - ${upperFirst(info.name)})`;\n            }\n\n            return (\n              <Crumb isCurrent={index === arr.length - 1} key={key}>\n                {label}\n              </Crumb>\n            );\n          })}\n        </Breadcrumbs>\n      </Flex>\n    </ModalHeader>\n  );\n};\n","import { Flex, Typography } from '@strapi/design-system';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../utils';\n\nimport type { SchemaType } from '../types';\nimport type { CustomField } from '@strapi/helper-plugin';\n\ntype ModalTitleProps = {\n  forTarget?: SchemaType;\n  step?: string;\n  kind?: string;\n  modalType?: string;\n  actionType?: string;\n};\n\nexport const getModalTitleSubHeader = ({\n  modalType,\n  forTarget,\n  kind,\n  actionType,\n  step,\n}: ModalTitleProps) => {\n  switch (modalType) {\n    case 'chooseAttribute':\n      return getTrad(\n        `modalForm.sub-header.chooseAttribute.${\n          forTarget?.includes('component') ? 'component' : kind || 'collectionType'\n        }`\n      );\n    case 'attribute': {\n      return getTrad(\n        `modalForm.sub-header.attribute.${actionType}${\n          step !== 'null' && step !== null && actionType !== 'edit' ? '.step' : ''\n        }`\n      );\n    }\n    case 'customField': {\n      return getTrad(`modalForm.sub-header.attribute.${actionType}`);\n    }\n    case 'addComponentToDynamicZone':\n      return getTrad('modalForm.sub-header.addComponentToDynamicZone');\n    default:\n      return getTrad('configurations');\n  }\n};\n\ntype FormModalSubHeaderProps = {\n  actionType: string;\n  modalType: string;\n  forTarget: SchemaType;\n  kind?: string;\n  step?: string;\n  attributeType: string;\n  attributeName: string;\n  customField?: CustomField;\n};\n\nexport const FormModalSubHeader = ({\n  actionType,\n  modalType,\n  forTarget,\n  kind,\n  step,\n  attributeType,\n  attributeName,\n  customField,\n}: FormModalSubHeaderProps) => {\n  const { formatMessage } = useIntl();\n  const intlLabel =\n    modalType === 'customField'\n      ? customField?.intlLabel\n      : { id: getTrad(`attribute.${attributeType}`) };\n\n  return (\n    <Flex direction=\"column\" alignItems=\"flex-start\" paddingBottom={2} gap={1}>\n      <Typography as=\"h2\" variant=\"beta\">\n        {formatMessage(\n          {\n            id: getModalTitleSubHeader({\n              actionType,\n              forTarget,\n              kind,\n              step,\n              modalType,\n            }),\n            defaultMessage: 'Add new field',\n          },\n          {\n            type: intlLabel ? upperFirst(formatMessage(intlLabel)) : '',\n            name: upperFirst(attributeName),\n            step,\n          }\n        )}\n      </Typography>\n      <Typography variant=\"pi\" textColor=\"neutral600\">\n        {formatMessage({\n          id: getTrad(`attribute.${attributeType}.description`),\n          defaultMessage: 'A type for modeling data',\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n","import * as Icons from '@strapi/icons';\n\nconst COMPONENT_ICONS = {\n  alien: Icons.Alien,\n  apps: Icons.Apps,\n  archive: Icons.Archive,\n  arrowDown: Icons.ArrowDown,\n  arrowLeft: Icons.ArrowLeft,\n  arrowRight: Icons.ArrowRight,\n  arrowUp: Icons.ArrowUp,\n  attachment: Icons.Attachment,\n  bell: Icons.Bell,\n  bold: Icons.Bold,\n  book: Icons.Book,\n  briefcase: Icons.Briefcase,\n  brush: Icons.Brush,\n  bulletList: Icons.BulletList,\n  calendar: Icons.Calendar,\n  car: Icons.Car,\n  cast: Icons.Cast,\n  chartBubble: Icons.ChartBubble,\n  chartCircle: Icons.ChartCircle,\n  chartPie: Icons.ChartPie,\n  check: Icons.Check,\n  clock: Icons.Clock,\n  cloud: Icons.Cloud,\n  code: Icons.Code,\n  cog: Icons.Cog,\n  collapse: Icons.Collapse,\n  command: Icons.Command,\n  connector: Icons.Connector,\n  crop: Icons.Crop,\n  crown: Icons.Crown,\n  cube: Icons.Cube,\n  cup: Icons.Cup,\n  cursor: Icons.Cursor,\n  dashboard: Icons.Dashboard,\n  database: Icons.Database,\n  discuss: Icons.Discuss,\n  doctor: Icons.Doctor,\n  earth: Icons.Earth,\n  emotionHappy: Icons.EmotionHappy,\n  emotionUnhappy: Icons.EmotionUnhappy,\n  envelop: Icons.Envelop,\n  exit: Icons.Exit,\n  expand: Icons.Expand,\n  eye: Icons.Eye,\n  feather: Icons.Feather,\n  file: Icons.File,\n  fileError: Icons.FileError,\n  filePdf: Icons.FilePdf,\n  filter: Icons.Filter,\n  folder: Icons.Folder,\n  gate: Icons.Gate,\n  gift: Icons.Gift,\n  globe: Icons.Globe,\n  grid: Icons.Grid,\n  handHeart: Icons.HandHeart,\n  hashtag: Icons.Hashtag,\n  headphone: Icons.Headphone,\n  heart: Icons.Heart,\n  house: Icons.House,\n  information: Icons.Information,\n  italic: Icons.Italic,\n  key: Icons.Key,\n  landscape: Icons.Landscape,\n  layer: Icons.Layer,\n  layout: Icons.Layout,\n  lightbulb: Icons.Lightbulb,\n  link: Icons.Link,\n  lock: Icons.Lock,\n  magic: Icons.Magic,\n  manyToMany: Icons.ManyToMany,\n  manyToOne: Icons.ManyToOne,\n  manyWays: Icons.ManyWays,\n  medium: Icons.Medium,\n  message: Icons.Message,\n  microphone: Icons.Microphone,\n  monitor: Icons.Monitor,\n  moon: Icons.Moon,\n  music: Icons.Music,\n  oneToMany: Icons.OneToMany,\n  oneToOne: Icons.OneToOne,\n  oneWay: Icons.OneWay,\n  paint: Icons.Paint,\n  paintBrush: Icons.PaintBrush,\n  paperPlane: Icons.PaperPlane,\n  pencil: Icons.Pencil,\n  phone: Icons.Phone,\n  picture: Icons.Picture,\n  pin: Icons.Pin,\n  pinMap: Icons.PinMap,\n  plane: Icons.Plane,\n  play: Icons.Play,\n  plus: Icons.Plus,\n  priceTag: Icons.PriceTag,\n  puzzle: Icons.Puzzle,\n  question: Icons.Question,\n  quote: Icons.Quote,\n  repeat: Icons.Repeat,\n  restaurant: Icons.Restaurant,\n  rocket: Icons.Rocket,\n  rotate: Icons.Rotate,\n  scissors: Icons.Scissors,\n  search: Icons.Search,\n  seed: Icons.Seed,\n  server: Icons.Server,\n  shield: Icons.Shield,\n  shirt: Icons.Shirt,\n  shoppingCart: Icons.ShoppingCart,\n  slideshow: Icons.Slideshow,\n  stack: Icons.Stack,\n  star: Icons.Star,\n  store: Icons.Store,\n  strikeThrough: Icons.StrikeThrough,\n  sun: Icons.Sun,\n  television: Icons.Television,\n  thumbDown: Icons.ThumbDown,\n  thumbUp: Icons.ThumbUp,\n  train: Icons.Train,\n  twitter: Icons.Twitter,\n  typhoon: Icons.Typhoon,\n  underline: Icons.Underline,\n  user: Icons.User,\n  volumeMute: Icons.VolumeMute,\n  volumeUp: Icons.VolumeUp,\n  walk: Icons.Walk,\n  wheelchair: Icons.Wheelchair,\n  write: Icons.Write,\n};\n\nexport { COMPONENT_ICONS };\n","import { useEffect, useRef, useState } from 'react';\n\nimport {\n  Box,\n  Field,\n  FieldInput,\n  FieldLabel,\n  Flex,\n  Icon,\n  IconButton,\n  inputFocusStyle,\n  Searchbar,\n  Tooltip,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { Search, Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { getTrad } from '../../utils';\n\nimport { COMPONENT_ICONS } from './constants';\n\nimport type { IntlLabel } from '../../types';\n\nconst IconPickerWrapper = styled(Flex)`\n  label {\n    ${inputFocusStyle()}\n    border-radius: ${({ theme }) => theme.borderRadius};\n    border: 1px solid ${({ theme }) => theme.colors.neutral100};\n  }\n`;\n\ntype Icons = keyof typeof COMPONENT_ICONS;\n\ninterface IconPickProps {\n  iconKey: Icons;\n  name: string;\n  onChange: (value: any) => void;\n  isSelected: boolean;\n  ariaLabel: string;\n}\n\nconst IconPick = ({ iconKey, name, onChange, isSelected, ariaLabel }: IconPickProps) => {\n  return (\n    <Field name={name} required={false}>\n      <FieldLabel htmlFor={iconKey} id={`${iconKey}-label`}>\n        <VisuallyHidden>\n          <FieldInput\n            type=\"radio\"\n            id={iconKey}\n            name={name}\n            checked={isSelected}\n            onChange={onChange}\n            value={iconKey}\n            aria-checked={isSelected}\n            aria-labelledby={`${iconKey}-label`}\n          />\n          {ariaLabel}\n        </VisuallyHidden>\n        <Flex\n          padding={2}\n          cursor=\"pointer\"\n          hasRadius\n          background={isSelected ? 'primary200' : undefined}\n        >\n          <Icon as={COMPONENT_ICONS[iconKey]} color={isSelected ? 'primary600' : 'neutral300'} />\n        </Flex>\n      </FieldLabel>\n    </Field>\n  );\n};\n\nexport interface IconPickerProps {\n  intlLabel: IntlLabel;\n  name: string;\n  onChange: (value: { target: { name: string; value: string } }) => void;\n  value?: string;\n}\n\nexport const IconPicker = ({ intlLabel, name, onChange, value = '' }: IconPickerProps) => {\n  const { formatMessage } = useIntl();\n  const [showSearch, setShowSearch] = useState(false);\n  const [search, setSearch] = useState('');\n  const allIcons = Object.keys(COMPONENT_ICONS) as Icons[];\n  const [icons, setIcons] = useState(allIcons);\n  const searchIconRef = useRef(null);\n  const searchBarRef = useRef(null);\n\n  const toggleSearch = () => {\n    setShowSearch(!showSearch);\n  };\n\n  const onChangeSearch = ({ target: { value } }: { target: { value: string } }) => {\n    setSearch(value);\n    setIcons(() => allIcons.filter((icon) => icon.toLowerCase().includes(value.toLowerCase())));\n  };\n\n  const onClearSearch = () => {\n    toggleSearch();\n    setSearch('');\n    setIcons(allIcons);\n  };\n\n  const removeIconSelected = () => {\n    onChange({ target: { name, value: '' } });\n  };\n\n  useEffect(() => {\n    if (showSearch) {\n      (searchBarRef.current as unknown as HTMLInputElement)?.focus();\n    }\n  }, [showSearch]);\n\n  return (\n    <>\n      <Flex justifyContent=\"space-between\" paddingBottom={2}>\n        <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral800\" as=\"label\">\n          {formatMessage(intlLabel)}\n        </Typography>\n        <Flex gap={1}>\n          {showSearch ? (\n            <Searchbar\n              ref={searchBarRef}\n              name=\"searchbar\"\n              size=\"S\"\n              placeholder={formatMessage({\n                id: getTrad('ComponentIconPicker.search.placeholder'),\n                defaultMessage: 'Search for an icon',\n              })}\n              onBlur={() => {\n                if (!search) {\n                  toggleSearch();\n                }\n              }}\n              onChange={onChangeSearch}\n              value={search}\n              onClear={onClearSearch}\n              clearLabel={formatMessage({\n                id: getTrad('IconPicker.search.clear.label'),\n                defaultMessage: 'Clear the icon search',\n              })}\n            >\n              {formatMessage({\n                id: getTrad('IconPicker.search.placeholder.label'),\n                defaultMessage: 'Search for an icon',\n              })}\n            </Searchbar>\n          ) : (\n            <IconButton\n              ref={searchIconRef}\n              onClick={toggleSearch}\n              aria-label={formatMessage({\n                id: getTrad('IconPicker.search.button.label'),\n                defaultMessage: 'Search icon button',\n              })}\n              icon={<Search />}\n              noBorder\n            />\n          )}\n          {value && (\n            <Tooltip\n              description={formatMessage({\n                id: getTrad('IconPicker.remove.tooltip'),\n                defaultMessage: 'Remove the selected icon',\n              })}\n            >\n              <IconButton\n                onClick={removeIconSelected}\n                aria-label={formatMessage({\n                  id: getTrad('IconPicker.remove.button'),\n                  defaultMessage: 'Remove the selected icon button',\n                })}\n                icon={<Trash />}\n                noBorder\n              />\n            </Tooltip>\n          )}\n        </Flex>\n      </Flex>\n      <IconPickerWrapper\n        position=\"relative\"\n        padding={1}\n        background=\"neutral100\"\n        hasRadius\n        wrap=\"wrap\"\n        gap={2}\n        maxHeight=\"126px\"\n        overflow=\"auto\"\n        textAlign=\"center\"\n      >\n        {icons.length > 0 ? (\n          icons.map((iconKey) => (\n            <IconPick\n              key={iconKey}\n              iconKey={iconKey}\n              name={name}\n              onChange={onChange}\n              isSelected={iconKey === value}\n              ariaLabel={formatMessage(\n                {\n                  id: getTrad('IconPicker.icon.label'),\n                  defaultMessage: 'Select {icon} icon',\n                },\n                { icon: iconKey }\n              )}\n            />\n          ))\n        ) : (\n          <Box padding={4} grow={2}>\n            <Typography variant=\"delta\" textColor=\"neutral600\" textAlign=\"center\">\n              {formatMessage({\n                id: getTrad('IconPicker.emptyState.label'),\n                defaultMessage: 'No icon found',\n              })}\n            </Typography>\n          </Box>\n        )}\n      </IconPickerWrapper>\n    </>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nimport { TextInput } from '@strapi/design-system';\nimport pluralize from 'pluralize';\nimport { useIntl } from 'react-intl';\n\nimport { nameToSlug } from '../utils/nameToSlug';\n\nimport type { IntlLabel } from '../types';\n\ninterface Description {\n  id: string;\n  defaultMessage: string;\n  values?: Record<string, any>;\n}\n\ninterface PluralNameProps {\n  description?: Description;\n  error?: string;\n  intlLabel: IntlLabel;\n  modifiedData: Record<string, any>;\n  name: string;\n  onChange: (value: { target: { name: string; value: string } }) => void;\n  value?: string;\n}\n\nexport const PluralName = ({\n  description,\n  error,\n  intlLabel,\n  modifiedData,\n  name,\n  onChange,\n  value,\n}: PluralNameProps) => {\n  const { formatMessage } = useIntl();\n  const onChangeRef = useRef(onChange);\n  const displayName = modifiedData?.displayName || '';\n\n  useEffect(() => {\n    if (displayName) {\n      const value = nameToSlug(displayName);\n\n      try {\n        const plural = pluralize(value, 2);\n        onChangeRef.current({ target: { name, value: plural } });\n      } catch (err) {\n        onChangeRef.current({ target: { name, value } });\n      }\n    } else {\n      onChangeRef.current({ target: { name, value: '' } });\n    }\n  }, [displayName, name]);\n\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n  const label = formatMessage(intlLabel);\n\n  return (\n    <TextInput\n      error={errorMessage}\n      label={label}\n      id={name}\n      hint={hint}\n      name={name}\n      onChange={onChange}\n      value={value || ''}\n    />\n  );\n};\n","import { Menu } from '@strapi/design-system/v2';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { useDataManager } from '../../../../hooks/useDataManager';\nimport { isAllowedContentTypesForRelations } from '../../../../utils';\nimport { ON_CHANGE_RELATION_TARGET } from '../../../FormModal/constants';\n\ninterface RelationTargetPickerProps {\n  oneThatIsCreatingARelationWithAnother: string;\n  target: string;\n}\n\nexport const RelationTargetPicker = ({\n  oneThatIsCreatingARelationWithAnother,\n  target,\n}: RelationTargetPickerProps) => {\n  const { contentTypes, sortedContentTypesList } = useDataManager();\n  const dispatch = useDispatch();\n  // TODO: replace with an obj { relation: 'x', bidirctional: true|false }\n  const allowedContentTypesForRelation = sortedContentTypesList.filter(\n    isAllowedContentTypesForRelations\n  );\n\n  const { plugin = null, schema: { displayName } = { displayName: 'error' } } =\n    contentTypes?.[target] ?? {};\n\n  const handleSelect =\n    ({\n      uid,\n      plugin,\n      title,\n      restrictRelationsTo,\n    }: {\n      uid: string;\n      plugin: boolean;\n      title: string;\n      restrictRelationsTo: any;\n    }) =>\n    () => {\n      const selectedContentTypeFriendlyName = plugin ? `${plugin}_${title}` : title;\n\n      dispatch({\n        type: ON_CHANGE_RELATION_TARGET,\n        target: {\n          value: uid,\n          oneThatIsCreatingARelationWithAnother,\n          selectedContentTypeFriendlyName,\n          targetContentTypeAllowedRelations: restrictRelationsTo,\n        },\n      });\n    };\n\n  /**\n   * TODO: This should be a Select but the design doesn't match the\n   * styles of the select component and there isn't the ability to\n   * change it correctly.\n   */\n  return (\n    <Menu.Root>\n      <MenuTrigger>{`${displayName} ${plugin ? `(from: ${plugin})` : ''}`}</MenuTrigger>\n      <Menu.Content zIndex={5}>\n        {allowedContentTypesForRelation.map(({ uid, title, restrictRelationsTo, plugin }) => (\n          <Menu.Item key={uid} onSelect={handleSelect({ uid, plugin, title, restrictRelationsTo })}>\n            {title}&nbsp;\n            {plugin && <>(from: {plugin})</>}\n          </Menu.Item>\n        ))}\n      </Menu.Content>\n    </Menu.Root>\n  );\n};\n\n/**\n * TODO: this needs to be solved in the Design-System\n */\nconst MenuTrigger = styled(Menu.Trigger)`\n  svg {\n    width: ${6 / 16}rem;\n    height: ${4 / 16}rem;\n  }\n`;\n","import { Box, Divider, Flex, Typography } from '@strapi/design-system';\nimport { GenericInput } from '@strapi/helper-plugin';\n\nimport { getTrad } from '../../../utils/getTrad';\n\nimport { RelationTargetPicker } from './RelationTargetPicker/RelationTargetPicker';\n\ninterface RelationFormBoxProps {\n  disabled?: boolean;\n  error?: Record<string, any>;\n  header?: string;\n  isMain?: boolean;\n  name: string;\n  onChange: (value: any) => void;\n  oneThatIsCreatingARelationWithAnother?: string;\n  target?: string;\n  value?: string;\n}\n\nexport const RelationFormBox = ({\n  disabled = false,\n  error,\n  header,\n  isMain = false,\n  name,\n  onChange,\n  oneThatIsCreatingARelationWithAnother = '',\n  target = '',\n  value = '',\n}: RelationFormBoxProps) => {\n  return (\n    <Box background=\"neutral100\" hasRadius borderColor=\"neutral200\">\n      <Flex paddingTop={isMain ? 4 : 1} paddingBottom={isMain ? 3 : 1} justifyContent=\"center\">\n        {isMain ? (\n          <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral800\">\n            {header}\n          </Typography>\n        ) : (\n          <RelationTargetPicker\n            target={target}\n            oneThatIsCreatingARelationWithAnother={oneThatIsCreatingARelationWithAnother}\n          />\n        )}\n      </Flex>\n      {/* @ts-expect-error check if background is a valid prop */}\n      <Divider background=\"neutral200\" />\n      <Box padding={4}>\n        <GenericInput\n          disabled={disabled}\n          error={error?.id || null}\n          intlLabel={{\n            id: getTrad('form.attribute.item.defineRelation.fieldName'),\n            defaultMessage: 'Field name',\n          }}\n          name={name}\n          onChange={onChange}\n          type=\"text\"\n          value={value}\n        />\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Flex } from '@strapi/design-system';\nimport styled from 'styled-components';\n\nconst Wrapper = styled(Box)`\n  position: relative;\n  width: 100%;\n  &::before {\n    content: '';\n    position: absolute;\n    top: calc(50% - 0px);\n    height: 2px;\n    width: 100%;\n    background-color: ${({ theme }) => theme.colors.primary600};\n    z-index: 0;\n  }\n`;\n\nconst IconWrapper = styled(Box)<{ isSelected: boolean }>`\n  background: ${({ theme, isSelected }) => theme.colors[isSelected ? 'primary100' : 'neutral0']};\n  border: 1px solid\n    ${({ theme, isSelected }) => theme.colors[isSelected ? 'primary700' : 'neutral200']};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  z-index: 1;\n  svg {\n    width: 1.5rem;\n    height: 100%;\n    path {\n      fill: ${({ theme, isSelected }) => theme.colors[isSelected ? 'primary700' : 'neutral500']};\n    }\n  }\n  &:disabled {\n    cursor: not-allowed;\n  }\n`;\n\nconst InfosWrapper = styled(Flex)`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nexport { IconWrapper, InfosWrapper, Wrapper };\n","import { Flex, KeyboardNavigable, Typography } from '@strapi/design-system';\nimport {\n  ManyToMany,\n  ManyToOne,\n  ManyWays as ManyWay,\n  OneToMany,\n  OneToOne,\n  OneWay,\n} from '@strapi/icons';\nimport get from 'lodash/get';\nimport truncate from 'lodash/truncate';\nimport pluralize from 'pluralize';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { useDataManager } from '../../../hooks/useDataManager';\nimport { getTrad } from '../../../utils/getTrad';\nimport { ON_CHANGE_RELATION_TYPE } from '../../FormModal/constants';\n\nimport { IconWrapper, InfosWrapper, Wrapper } from './Components';\n\nconst relations = {\n  oneWay: OneWay,\n  oneToOne: OneToOne,\n  oneToMany: OneToMany,\n  manyToOne: ManyToOne,\n  manyToMany: ManyToMany,\n  manyWay: ManyWay,\n};\n\ntype RelationType = keyof typeof relations;\n\ninterface RelationNaturePickerProps {\n  naturePickerType: string;\n  oneThatIsCreatingARelationWithAnother: string;\n  relationType: string;\n  target: string;\n}\n\nexport const RelationNaturePicker = ({\n  naturePickerType,\n  oneThatIsCreatingARelationWithAnother,\n  relationType,\n  target,\n}: RelationNaturePickerProps) => {\n  const dispatch = useDispatch();\n  const { formatMessage } = useIntl();\n\n  const { contentTypes, modifiedData } = useDataManager();\n  const ctRelations = ['oneWay', 'oneToOne', 'oneToMany', 'manyToOne', 'manyToMany', 'manyWay'];\n  const componentRelations = ['oneWay', 'manyWay'];\n  const dataType =\n    naturePickerType === 'contentType'\n      ? get(modifiedData, [naturePickerType, 'schema', 'kind'], '')\n      : naturePickerType;\n  const relationsType = (\n    dataType === 'collectionType' ? ctRelations : componentRelations\n  ) as RelationType[];\n\n  const areDisplayedNamesInverted = relationType === 'manyToOne';\n  const targetLabel = get(contentTypes, [target, 'schema', 'displayName'], 'unknown');\n  const leftTarget = areDisplayedNamesInverted\n    ? targetLabel\n    : oneThatIsCreatingARelationWithAnother;\n  const rightTarget = areDisplayedNamesInverted\n    ? oneThatIsCreatingARelationWithAnother\n    : targetLabel;\n  const leftDisplayedValue = pluralize(leftTarget, relationType === 'manyToMany' ? 2 : 1);\n  const restrictedRelations = get(contentTypes, [target, 'schema', 'restrictRelationsTo'], null);\n\n  const rightDisplayedValue = pluralize(\n    rightTarget,\n    ['manyToMany', 'oneToMany', 'manyToOne', 'manyWay'].includes(relationType) ? 2 : 1\n  );\n\n  if (!relationType) {\n    return null;\n  }\n\n  return (\n    <Flex style={{ flex: 1 }}>\n      <Wrapper>\n        <Flex paddingLeft={9} paddingRight={9} paddingTop={1} justifyContent=\"center\">\n          <KeyboardNavigable tagName=\"button\">\n            <Flex gap={3}>\n              {relationsType.map((relation) => {\n                const Asset = relations[relation];\n                const isEnabled =\n                  restrictedRelations === null || restrictedRelations.includes(relation);\n\n                return (\n                  <IconWrapper\n                    as=\"button\"\n                    isSelected={relationType === relation}\n                    disabled={!isEnabled}\n                    key={relation}\n                    onClick={() => {\n                      if (isEnabled) {\n                        dispatch({\n                          type: ON_CHANGE_RELATION_TYPE,\n                          target: {\n                            oneThatIsCreatingARelationWithAnother,\n                            targetContentType: target,\n                            value: relation,\n                          },\n                        });\n                      }\n                    }}\n                    padding={2}\n                    type=\"button\"\n                  >\n                    <Asset key={relation} />\n                  </IconWrapper>\n                );\n              })}\n            </Flex>\n          </KeyboardNavigable>\n        </Flex>\n      </Wrapper>\n      <InfosWrapper justifyContent=\"center\">\n        <Typography>{truncate(leftDisplayedValue, { length: 24 })}&nbsp;</Typography>\n        <Typography textColor=\"primary600\">\n          {formatMessage({ id: getTrad(`relation.${relationType}`) })}&nbsp;\n        </Typography>\n        <Typography>{truncate(rightDisplayedValue, { length: 24 })}</Typography>\n      </InfosWrapper>\n    </Flex>\n  );\n};\n","import { Flex } from '@strapi/design-system';\n\nimport { getRelationType } from '../../utils/getRelationType';\n\nimport { RelationFormBox } from './RelationField/RelationField';\nimport { RelationNaturePicker } from './RelationNaturePicker/RelationNaturePicker';\n\ninterface RelationProps {\n  formErrors: Record<string, any>;\n  mainBoxHeader: string;\n  modifiedData: Record<string, any>;\n  onChange: (value: any) => void;\n  naturePickerType: string;\n}\n\nexport const Relation = ({\n  formErrors,\n  mainBoxHeader,\n  modifiedData,\n  naturePickerType,\n  onChange,\n}: RelationProps) => {\n  const relationType = getRelationType(modifiedData.relation, modifiedData.targetAttribute);\n\n  return (\n    <Flex style={{ position: 'relative' }}>\n      <RelationFormBox\n        isMain\n        header={mainBoxHeader}\n        error={formErrors?.name || null}\n        name=\"name\"\n        onChange={onChange}\n        value={modifiedData?.name || ''}\n      />\n      <RelationNaturePicker\n        naturePickerType={naturePickerType}\n        oneThatIsCreatingARelationWithAnother={mainBoxHeader}\n        relationType={relationType!}\n        target={modifiedData.target}\n      />\n      <RelationFormBox\n        disabled={['oneWay', 'manyWay'].includes(relationType!)}\n        error={formErrors?.targetAttribute || null}\n        name=\"targetAttribute\"\n        onChange={onChange}\n        oneThatIsCreatingARelationWithAnother={mainBoxHeader}\n        target={modifiedData.target}\n        value={modifiedData?.targetAttribute || ''}\n      />\n    </Flex>\n  );\n};\n","import { useState } from 'react';\n\nimport { ComboboxOption, CreatableCombobox } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useDataManager } from '../hooks/useDataManager';\n\ninterface SelectCategoryProps {\n  error?: string | null;\n  intlLabel: {\n    id: string;\n    defaultMessage: string;\n    values?: Record<string, any>;\n  };\n  name: string;\n  onChange: (value: { target: { name: string; value: any; type: string } }) => void;\n  value?: string;\n}\n\nexport const SelectCategory = ({\n  error = null,\n  intlLabel,\n  name,\n  onChange,\n  value = undefined,\n}: SelectCategoryProps) => {\n  const { formatMessage } = useIntl();\n  const { allComponentsCategories } = useDataManager();\n  const [categories, setCategories] = useState(allComponentsCategories);\n\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n  const label = formatMessage(intlLabel);\n\n  const handleChange = (value: any) => {\n    onChange({ target: { name, value, type: 'select-category' } });\n  };\n\n  const handleCreateOption = (value: any) => {\n    setCategories((prev) => [...prev, value]);\n    handleChange(value);\n  };\n\n  return (\n    <CreatableCombobox\n      error={errorMessage}\n      id={name}\n      label={label}\n      name={name}\n      onChange={handleChange}\n      onCreateOption={handleCreateOption}\n      value={value}\n    >\n      {categories.map((category) => (\n        <ComboboxOption key={category} value={category}>\n          {category}\n        </ComboboxOption>\n      ))}\n    </CreatableCombobox>\n  );\n};\n","import { Option, Select } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useDataManager } from '../hooks/useDataManager';\n\ninterface Option {\n  uid: string;\n  label: string;\n  categoryName: string;\n}\n\ninterface SelectComponentProps {\n  componentToCreate?: Record<string, any> | null;\n  error?: string | null;\n  intlLabel: {\n    id: string;\n    defaultMessage: string;\n    values?: Record<string, any>;\n  };\n  isAddingAComponentToAnotherComponent: boolean;\n  isCreating: boolean;\n  isCreatingComponentWhileAddingAField: boolean;\n  name: string;\n  onChange: (value: any) => void;\n  targetUid: string;\n  value: string;\n  forTarget: string;\n}\n\nexport const SelectComponent = ({\n  error = null,\n  intlLabel,\n  isAddingAComponentToAnotherComponent,\n  isCreating,\n  isCreatingComponentWhileAddingAField,\n  componentToCreate,\n  name,\n  onChange,\n  targetUid,\n  forTarget,\n  value,\n}: SelectComponentProps) => {\n  const { formatMessage } = useIntl();\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n  const label = formatMessage(intlLabel);\n\n  const { componentsGroupedByCategory, componentsThatHaveOtherComponentInTheirAttributes } =\n    useDataManager();\n\n  const isTargetAComponent = ['component', 'components'].includes(forTarget);\n\n  let options: Option[] = Object.entries(componentsGroupedByCategory).reduce(\n    (acc: Option[], current) => {\n      const [categoryName, components] = current;\n      const compos = components.map((component) => {\n        return {\n          uid: component.uid,\n          label: component.schema.displayName,\n          categoryName,\n        };\n      });\n\n      return [...acc, ...compos];\n    },\n    []\n  );\n\n  if (isAddingAComponentToAnotherComponent) {\n    options = options.filter((option) => {\n      return !componentsThatHaveOtherComponentInTheirAttributes.includes(option.uid);\n    });\n  }\n\n  if (isTargetAComponent) {\n    options = options.filter((option) => {\n      return option.uid !== targetUid;\n    });\n  }\n\n  if (isCreatingComponentWhileAddingAField) {\n    options = [\n      {\n        uid: value,\n        label: componentToCreate?.displayName,\n        categoryName: componentToCreate?.category,\n      },\n    ];\n  }\n\n  return (\n    <Select\n      disabled={isCreatingComponentWhileAddingAField || !isCreating}\n      error={errorMessage}\n      label={label}\n      id={name}\n      name={name}\n      onChange={(value: any) => {\n        onChange({ target: { name, value, type: 'select-category' } });\n      }}\n      value={value || ''}\n    >\n      {options.map((option) => {\n        return (\n          <Option key={option.uid} value={option.uid}>\n            {`${option.categoryName} - ${option.label}`}\n          </Option>\n        );\n      })}\n    </Select>\n  );\n};\n","import { MultiSelectNested } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useDataManager } from '../hooks/useDataManager';\nimport { getTrad } from '../utils';\nimport { findAttribute } from '../utils/findAttribute';\n\nimport type { Component } from '../types';\n\ntype SelectComponentsProps = {\n  dynamicZoneTarget: string;\n  intlLabel: {\n    id: string;\n    defaultMessage: string;\n    values?: object;\n  };\n  name: string;\n  onChange: (value: {\n    target: {\n      name: string;\n      value: string[];\n      type?: string;\n    };\n  }) => void;\n  value: string[];\n};\n\nexport const SelectComponents = ({\n  dynamicZoneTarget,\n  intlLabel,\n  name,\n  onChange,\n  value,\n}: SelectComponentsProps) => {\n  const { formatMessage } = useIntl();\n  const { componentsGroupedByCategory, modifiedData } = useDataManager();\n  const dzSchema = findAttribute(modifiedData.contentType.schema.attributes, dynamicZoneTarget);\n  const alreadyUsedComponents = dzSchema?.components || [];\n  const filteredComponentsGroupedByCategory = Object.keys(componentsGroupedByCategory).reduce(\n    (acc, current) => {\n      const filteredComponents = componentsGroupedByCategory[current].filter(({ uid }) => {\n        return !alreadyUsedComponents.includes(uid);\n      });\n\n      if (filteredComponents.length > 0) {\n        acc[current] = filteredComponents;\n      }\n\n      return acc;\n    },\n    {} as Record<string, Component[]>\n  );\n  const options = Object.entries(filteredComponentsGroupedByCategory).reduce((acc, current) => {\n    const [categoryName, components] = current;\n    const section = {\n      label: categoryName,\n      children: components.map(({ uid, schema: { displayName } }) => {\n        return { label: displayName, value: uid };\n      }),\n    };\n\n    acc.push(section);\n\n    return acc;\n  }, [] as Array<{ label: string; children: Array<{ label: string; value: string }> }>);\n\n  const displayedValue = formatMessage(\n    {\n      id: getTrad('components.SelectComponents.displayed-value'),\n      defaultMessage:\n        '{number, plural, =0 {# components} one {# component} other {# components}} selected',\n    },\n    { number: value?.length ?? 0 }\n  );\n\n  return (\n    <MultiSelectNested\n      id=\"select1\"\n      label={formatMessage(intlLabel)}\n      customizeContent={() => displayedValue}\n      name={name}\n      onChange={(values) => {\n        onChange({ target: { name, value: values, type: 'select-components' } });\n      }}\n      options={options}\n      value={value || []}\n    />\n  );\n};\n","// TODO: change option and select with non deprecated alternative\nimport { Option, Select } from '@strapi/design-system';\nimport { PrimitiveType, useIntl } from 'react-intl';\n\ntype SelectDateTypeProps = {\n  intlLabel: {\n    id: string;\n    defaultMessage: string;\n    values?: object;\n  };\n  error?: string;\n  modifiedData: {\n    default: number;\n    max: number;\n    min: number;\n  };\n  name: string;\n  onChange: (value: {\n    target: {\n      name: string;\n      value: string | number | null;\n      type?: string;\n    };\n  }) => void;\n  options: Array<{\n    metadatas: {\n      intlLabel: {\n        id: string;\n        defaultMessage: string;\n        values: Record<string, PrimitiveType> | undefined;\n      };\n      disabled?: boolean;\n      hidden?: boolean;\n    };\n    key: string | number;\n    value: string | number;\n  }>;\n  value?: string;\n};\n\nexport const SelectDateType = ({\n  intlLabel,\n  error = undefined,\n  modifiedData,\n  name,\n  onChange,\n  options,\n  value = '',\n}: SelectDateTypeProps) => {\n  const { formatMessage } = useIntl();\n  const label = formatMessage(intlLabel);\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n\n  const handleChange = (nextValue: string | number) => {\n    onChange({ target: { name, value: nextValue, type: 'select' } });\n\n    if (!value) {\n      return;\n    }\n\n    if (modifiedData.default !== undefined && modifiedData.default !== null) {\n      onChange({ target: { name: 'default', value: null } });\n    }\n  };\n\n  return (\n    <Select\n      error={errorMessage}\n      label={label}\n      id={name}\n      name={name}\n      onChange={handleChange}\n      value={value || ''}\n    >\n      {options.map(({ metadatas: { intlLabel, disabled, hidden }, key, value }) => {\n        return (\n          <Option key={key} value={value} disabled={disabled} hidden={hidden}>\n            {formatMessage(\n              { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n              intlLabel.values\n            )}\n          </Option>\n        );\n      })}\n    </Select>\n  );\n};\n","// TODO: change option and select with non deprecated alternative\nimport { Option, Select } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\ntype SelectNumberProps = {\n  intlLabel: {\n    id: string;\n    defaultMessage: string;\n    values?: object;\n  };\n  error?: string;\n  modifiedData: {\n    default: number;\n    max: number;\n    min: number;\n  };\n  name: string;\n  onChange: (value: {\n    target: {\n      name: string;\n      value: string | number | null;\n      type?: string;\n    };\n  }) => void;\n  options: Array<{\n    metadatas: {\n      intlLabel: {\n        id: string;\n        defaultMessage: string;\n      };\n      disabled?: boolean;\n      hidden?: boolean;\n    };\n    key: string | number;\n    value: string | number;\n  }>;\n  value?: string;\n};\n\nexport const SelectNumber = ({\n  intlLabel,\n  error = undefined,\n  modifiedData,\n  name,\n  onChange,\n  options,\n  value = '',\n}: SelectNumberProps) => {\n  const { formatMessage } = useIntl();\n  const label = formatMessage(intlLabel);\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n\n  const handleChange = (nextValue: string | number) => {\n    onChange({ target: { name, value: nextValue, type: 'select' } });\n\n    if (!value) {\n      return;\n    }\n\n    if (nextValue === 'biginteger' && value !== 'biginteger') {\n      if (modifiedData.default !== undefined && modifiedData.default !== null) {\n        onChange({ target: { name: 'default', value: null } });\n      }\n\n      if (modifiedData.max !== undefined && modifiedData.max !== null) {\n        onChange({ target: { name: 'max', value: null } });\n      }\n\n      if (modifiedData.min !== undefined && modifiedData.min !== null) {\n        onChange({ target: { name: 'min', value: null } });\n      }\n    }\n\n    if (\n      typeof nextValue === 'string' &&\n      ['decimal', 'float', 'integer'].includes(nextValue) &&\n      value === 'biginteger'\n    ) {\n      if (modifiedData.default !== undefined && modifiedData.default !== null) {\n        onChange({ target: { name: 'default', value: null } });\n      }\n\n      if (modifiedData.max !== undefined && modifiedData.max !== null) {\n        onChange({ target: { name: 'max', value: null } });\n      }\n\n      if (modifiedData.min !== undefined && modifiedData.min !== null) {\n        onChange({ target: { name: 'min', value: null } });\n      }\n    }\n  };\n\n  return (\n    <Select\n      error={errorMessage}\n      label={label}\n      id={name}\n      name={name}\n      onChange={handleChange}\n      value={value || ''}\n    >\n      {options.map(({ metadatas: { intlLabel, disabled, hidden }, key, value }) => {\n        return (\n          <Option key={key} value={value} disabled={disabled} hidden={hidden}>\n            {formatMessage(intlLabel)}\n          </Option>\n        );\n      })}\n    </Select>\n  );\n};\n\nSelectNumber.defaultProps = {\n  error: undefined,\n  value: '',\n};\n","import { useEffect, useRef } from 'react';\n\nimport { TextInput } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { nameToSlug } from '../utils/nameToSlug';\n\nimport type { IntlLabel } from '../types';\n\ninterface SingularNameProps {\n  description?: IntlLabel | null;\n  error?: string | null;\n  intlLabel: IntlLabel;\n  modifiedData: Record<string, any>;\n  name: string;\n  onChange: (value: { target: { name: string; value: string } }) => void;\n  value?: string | null;\n}\n\nexport const SingularName = ({\n  description = null,\n  error = null,\n  intlLabel,\n  modifiedData,\n  name,\n  onChange,\n  value = null,\n}: SingularNameProps) => {\n  const { formatMessage } = useIntl();\n  const onChangeRef = useRef(onChange);\n  const displayName = modifiedData?.displayName || '';\n\n  useEffect(() => {\n    if (displayName) {\n      onChangeRef.current({ target: { name, value: nameToSlug(displayName) } });\n    } else {\n      onChangeRef.current({ target: { name, value: '' } });\n    }\n  }, [displayName, name]);\n\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n  const label = formatMessage(intlLabel);\n\n  return (\n    <TextInput\n      error={errorMessage}\n      label={label}\n      id={name}\n      hint={hint}\n      name={name}\n      onChange={onChange}\n      value={value || ''}\n    />\n  );\n};\n","import { Box, Grid, GridItem, Typography } from '@strapi/design-system';\nimport { GenericInput } from '@strapi/helper-plugin';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\ninterface TabFormProps {\n  form: Array<Record<string, any>>;\n  formErrors: Record<string, any>;\n  genericInputProps: Record<string, any>;\n  modifiedData: Record<string, any>;\n  onChange: (value: any) => void;\n}\n\n/* eslint-disable react/no-array-index-key */\nexport const TabForm = ({\n  form,\n  formErrors,\n  genericInputProps,\n  modifiedData,\n  onChange,\n}: TabFormProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      {form.map((section, sectionIndex) => {\n        // Don't display an empty section\n        if (section.items.length === 0) {\n          return null;\n        }\n\n        return (\n          <Box key={sectionIndex}>\n            {section.sectionTitle && (\n              <Box paddingBottom={4}>\n                <Typography variant=\"delta\" as=\"h3\">\n                  {formatMessage(section.sectionTitle)}\n                </Typography>\n              </Box>\n            )}\n            <Grid gap={4}>\n              {section.items.map((input: any, i: number) => {\n                const key = `${sectionIndex}.${i}`;\n                /**\n                 * Use undefined as the default value because not every input wants a string e.g. Date pickers\n                 */\n                const value = get(modifiedData, input.name, undefined);\n\n                // When extending the yup schema of an existing field (like in https://github.com/strapi/strapi/blob/293ff3b8f9559236609d123a2774e3be05ce8274/packages/strapi-plugin-i18n/admin/src/index.js#L52)\n                // and triggering a yup validation error in the UI (missing a required field for example)\n                // We got an object that looks like: formErrors = { \"pluginOptions.i18n.localized\": {...} }\n                // In order to deal with this error, we can't rely on lodash.get to resolve this key\n                // - lodash will try to access {pluginOptions: {i18n: {localized: true}}})\n                // - and we just want to access { \"pluginOptions.i18n.localized\": {...} }\n                // NOTE: this is a hack\n                const pluginOptionError = Object.keys(formErrors).find((key) => key === input.name);\n\n                // Retrieve the error for a specific input\n                const errorId = pluginOptionError\n                  ? formErrors[pluginOptionError].id\n                  : get(\n                      formErrors,\n                      [\n                        ...input.name\n                          .split('.')\n                          // The filter here is used when creating a component\n                          // in the component step 1 modal\n                          // Since the component info is stored in the\n                          // componentToCreate object we can access the error\n                          // By removing the key\n                          .filter((key: string) => key !== 'componentToCreate'),\n                        'id',\n                      ],\n                      null\n                    );\n\n                if (input.type === 'pushRight') {\n                  return (\n                    <GridItem col={input.size || 6} key={input.name || key}>\n                      <div />\n                    </GridItem>\n                  );\n                }\n\n                return (\n                  <GridItem col={input.size || 6} key={input.name || key}>\n                    <GenericInput\n                      {...input}\n                      {...genericInputProps}\n                      error={errorId}\n                      onChange={onChange}\n                      value={value}\n                    />\n                  </GridItem>\n                );\n              })}\n            </Grid>\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { ReactNode, ChangeEvent } from 'react';\n\nimport { Textarea } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport type { IntlLabel } from '../types';\n\ninterface TextareaEnumProps {\n  description?: IntlLabel | null;\n  disabled?: boolean;\n  error?: string;\n  intlLabel: IntlLabel;\n  labelAction?: ReactNode;\n  name: string;\n  onChange: (value: { target: { name: string; value: string | string[] } }) => void;\n  placeholder?: IntlLabel | null;\n  value: string | string[] | undefined;\n}\n\nexport const TextareaEnum = ({\n  description = null,\n  disabled = false,\n  error = '',\n  intlLabel,\n  labelAction,\n  name,\n  onChange,\n  placeholder = null,\n  value = '',\n}: TextareaEnumProps) => {\n  const { formatMessage } = useIntl();\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n  const label = formatMessage(intlLabel);\n  const formattedPlaceholder = placeholder\n    ? formatMessage(\n        { id: placeholder.id, defaultMessage: placeholder.defaultMessage },\n        { ...placeholder.values }\n      )\n    : '';\n\n  const inputValue = Array.isArray(value) ? value.join('\\n') : '';\n\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    const arrayValue = e.target.value.split('\\n');\n\n    onChange({ target: { name, value: arrayValue } });\n  };\n\n  return (\n    <Textarea\n      disabled={disabled}\n      error={errorMessage}\n      label={label}\n      labelAction={labelAction}\n      id={name}\n      hint={hint}\n      name={name}\n      onChange={handleChange}\n      placeholder={formattedPlaceholder}\n      value={inputValue}\n    >\n      {inputValue}\n    </Textarea>\n  );\n};\n","import { getTrad } from '../../../utils/getTrad';\n\nexport const nameField = {\n  name: 'name',\n  type: 'text',\n  intlLabel: {\n    id: 'global.name',\n    defaultMessage: 'Name',\n  },\n  description: {\n    id: getTrad('modalForm.attribute.form.base.name.description'),\n    defaultMessage: 'No space is allowed for the name of the attribute',\n  },\n  // validations: {\n  //   required: true,\n  // },\n};\n","import { nameField } from './nameField';\n\nexport const commonBaseForm = {\n  sections: [{ sectionTitle: null, items: [nameField] }],\n};\n","import { getTrad } from '../../../utils/getTrad';\n\nexport const componentForm = {\n  base(prefix = '') {\n    const sections = [\n      {\n        sectionTitle: null,\n        items: [\n          {\n            name: `${prefix}displayName`,\n            type: 'text',\n            intlLabel: {\n              id: getTrad('contentType.displayName.label'),\n              defaultMessage: 'Display Name',\n            },\n          },\n          {\n            name: `${prefix}category`,\n            type: 'select-category',\n            intlLabel: {\n              id: getTrad('modalForm.components.create-component.category.label'),\n              defaultMessage: 'Select a category or enter a name to create a new one',\n            },\n          },\n        ],\n      },\n      {\n        sectionTitle: null,\n        items: [\n          {\n            name: `${prefix}icon`,\n            type: 'icon-picker',\n            size: 12,\n            intlLabel: {\n              id: getTrad('modalForm.components.icon.label'),\n              defaultMessage: 'Icon',\n            },\n          },\n        ],\n      },\n    ];\n\n    return sections;\n  },\n  advanced() {\n    const sections: Array<unknown> = [];\n\n    return sections;\n  },\n};\n","import { getTrad } from '../../../utils/getTrad';\n\nexport const attributeOptions = {\n  default: {\n    name: 'default',\n    type: 'text',\n    intlLabel: {\n      id: getTrad('form.attribute.settings.default'),\n      defaultMessage: 'Default value',\n    },\n  },\n  max: {\n    name: 'max',\n    type: 'checkbox-with-number-field',\n    intlLabel: {\n      id: getTrad('form.attribute.item.maximum'),\n      defaultMessage: 'Maximum value',\n    },\n  },\n  maxLength: {\n    name: 'maxLength',\n    type: 'checkbox-with-number-field',\n    intlLabel: {\n      id: getTrad('form.attribute.item.maximumLength'),\n      defaultMessage: 'Maximum length',\n    },\n  },\n  min: {\n    name: 'min',\n    type: 'checkbox-with-number-field',\n    intlLabel: {\n      id: getTrad('form.attribute.item.minimum'),\n      defaultMessage: 'Minimum value',\n    },\n  },\n  minLength: {\n    name: 'minLength',\n    type: 'checkbox-with-number-field',\n    intlLabel: {\n      id: getTrad('form.attribute.item.minimumLength'),\n      defaultMessage: 'Minimum length',\n    },\n  },\n  private: {\n    name: 'private',\n    type: 'checkbox',\n    intlLabel: {\n      id: getTrad('form.attribute.item.privateField'),\n      defaultMessage: 'Private field',\n    },\n    description: {\n      id: getTrad('form.attribute.item.privateField.description'),\n      defaultMessage: 'This field will not show up in the API response',\n    },\n  },\n  regex: {\n    intlLabel: {\n      id: getTrad('form.attribute.item.text.regex'),\n      defaultMessage: 'RegExp pattern',\n    },\n    name: 'regex',\n    type: 'text',\n    description: {\n      id: getTrad('form.attribute.item.text.regex.description'),\n      defaultMessage: 'The text of the regular expression',\n    },\n  },\n  required: {\n    name: 'required',\n    type: 'checkbox',\n    intlLabel: {\n      id: getTrad('form.attribute.item.requiredField'),\n      defaultMessage: 'Required field',\n    },\n    description: {\n      id: getTrad('form.attribute.item.requiredField.description'),\n      defaultMessage: \"You won't be able to create an entry if this field is empty\",\n    },\n  },\n  unique: {\n    name: 'unique',\n    type: 'checkbox',\n    intlLabel: {\n      id: getTrad('form.attribute.item.uniqueField'),\n      defaultMessage: 'Unique field',\n    },\n    description: {\n      id: getTrad('form.attribute.item.uniqueField.description'),\n      defaultMessage:\n        \"You won't be able to create an entry if there is an existing entry with identical content\",\n    },\n  },\n};\n","import { getTrad } from '../../../utils/getTrad';\nimport { componentForm } from '../component/componentForm';\n\nimport { attributeOptions } from './attributeOptions';\n\ntype DataType = 'biginteger' | 'string' | 'integer' | 'float' | 'decimal';\n\nexport const advancedForm = {\n  blocks() {\n    return {\n      sections: [\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [attributeOptions.required, attributeOptions.private],\n        },\n      ],\n    };\n  },\n  boolean() {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            {\n              autoFocus: true,\n              type: 'select-default-boolean',\n              intlLabel: {\n                id: getTrad('form.attribute.settings.default'),\n                defaultMessage: 'Default value',\n              },\n              name: 'default',\n              options: [\n                {\n                  value: 'true',\n                  key: 'true',\n                  metadatas: { intlLabel: { id: 'true', defaultMessage: 'true' } },\n                },\n                {\n                  value: '',\n                  key: 'null',\n                  metadatas: { intlLabel: { id: 'null', defaultMessage: 'null' } },\n                },\n                {\n                  value: 'false',\n                  key: 'false',\n                  metadatas: { intlLabel: { id: 'false', defaultMessage: 'false' } },\n                },\n              ],\n            },\n          ],\n        },\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [attributeOptions.required, attributeOptions.private],\n        },\n      ],\n    };\n  },\n  component({ repeatable }: { repeatable: boolean }, step: string) {\n    if (step === '1') {\n      return { sections: componentForm.advanced() };\n    }\n\n    if (repeatable) {\n      return {\n        sections: [\n          {\n            sectionTitle: {\n              id: 'global.settings',\n              defaultMessage: 'Settings',\n            },\n            items: [\n              attributeOptions.required,\n              attributeOptions.private,\n              attributeOptions.max,\n              attributeOptions.min,\n            ],\n          },\n        ],\n      };\n    }\n\n    return {\n      sections: [\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [attributeOptions.required, attributeOptions.private],\n        },\n      ],\n    };\n  },\n  date({ type }: { type: string }) {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            {\n              ...attributeOptions.default,\n              type: type || 'date',\n              value: null,\n              withDefaultValue: false,\n              disabled: !type,\n              autoFocus: false,\n            },\n          ],\n        },\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [attributeOptions.required, attributeOptions.unique, attributeOptions.private],\n        },\n      ],\n    };\n  },\n  dynamiczone() {\n    return {\n      sections: [\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [attributeOptions.required, attributeOptions.max, attributeOptions.min],\n        },\n      ],\n    };\n  },\n  email() {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            {\n              ...attributeOptions.default,\n              type: 'email',\n            },\n          ],\n        },\n\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [\n            attributeOptions.required,\n            attributeOptions.unique,\n            attributeOptions.maxLength,\n            attributeOptions.minLength,\n            attributeOptions.private,\n          ],\n        },\n      ],\n    };\n  },\n  enumeration(data: { enum: Array<string> }) {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            {\n              name: 'default',\n              type: 'select',\n              intlLabel: {\n                id: getTrad('form.attribute.settings.default'),\n                defaultMessage: 'Default value',\n              },\n              validations: {},\n              options: [\n                {\n                  key: '__null_reset_value__',\n                  value: '',\n                  metadatas: {\n                    intlLabel: {\n                      id: 'components.InputSelect.option.placeholder',\n                      defaultMessage: 'Choose here',\n                    },\n                  },\n                },\n                ...(data.enum || [])\n                  .filter((value, index) => data.enum.indexOf(value) === index && value)\n                  .map((value) => {\n                    return {\n                      key: value,\n                      value,\n                      metadatas: {\n                        intlLabel: { id: `${value}.no-override`, defaultMessage: value },\n                      },\n                    };\n                  }),\n              ],\n            },\n            {\n              intlLabel: {\n                id: getTrad('form.attribute.item.enumeration.graphql'),\n                defaultMessage: 'Name override for GraphQL',\n              },\n              name: 'enumName',\n              type: 'text',\n              validations: {},\n              description: {\n                id: getTrad('form.attribute.item.enumeration.graphql.description'),\n                defaultMessage: 'Allows you to override the default generated name for GraphQL',\n              },\n            },\n          ],\n        },\n\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [attributeOptions.required, attributeOptions.private],\n        },\n      ],\n    };\n  },\n  json() {\n    return {\n      sections: [\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [attributeOptions.required, attributeOptions.private],\n        },\n      ],\n    };\n  },\n  media() {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: {\n                id: getTrad('form.attribute.media.allowed-types'),\n                defaultMessage: 'Select allowed types of media',\n              },\n              name: 'allowedTypes',\n              type: 'allowed-types-select',\n              size: 7,\n              value: '',\n              validations: {},\n            },\n          ],\n        },\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [attributeOptions.required, attributeOptions.private],\n        },\n      ],\n    };\n  },\n  number(data: { type: DataType }) {\n    const inputStep = data.type === 'decimal' || data.type === 'float' ? 'any' : 1;\n\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            {\n              autoFocus: true,\n              name: 'default',\n              type: data.type === 'biginteger' ? 'text' : 'number',\n              step: inputStep,\n              intlLabel: {\n                id: getTrad('form.attribute.settings.default'),\n                defaultMessage: 'Default value',\n              },\n              validations: {},\n            },\n          ],\n        },\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [\n            attributeOptions.required,\n            attributeOptions.unique,\n            attributeOptions.max,\n            attributeOptions.min,\n            attributeOptions.private,\n          ],\n        },\n      ],\n    };\n  },\n  password() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [attributeOptions.default] },\n\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [\n            attributeOptions.required,\n            attributeOptions.maxLength,\n            attributeOptions.minLength,\n            attributeOptions.private,\n          ],\n        },\n      ],\n    };\n  },\n  relation() {\n    return {\n      sections: [\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [attributeOptions.private],\n        },\n      ],\n    };\n  },\n  richtext() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [attributeOptions.default] },\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [\n            attributeOptions.required,\n            attributeOptions.maxLength,\n            attributeOptions.minLength,\n            attributeOptions.private,\n          ],\n        },\n      ],\n    };\n  },\n  text() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [attributeOptions.default, attributeOptions.regex] },\n\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [\n            attributeOptions.required,\n            attributeOptions.unique,\n            attributeOptions.maxLength,\n            attributeOptions.minLength,\n            attributeOptions.private,\n          ],\n        },\n      ],\n    };\n  },\n  uid(data: { targetField: string }) {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            { ...attributeOptions.default, disabled: Boolean(data.targetField), type: 'text' },\n          ],\n        },\n\n        {\n          sectionTitle: {\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          },\n          items: [\n            attributeOptions.required,\n            attributeOptions.maxLength,\n            attributeOptions.minLength,\n            attributeOptions.private,\n          ],\n        },\n      ],\n    };\n  },\n};\n","import { getTrad } from '../../../utils/getTrad';\n\nexport const componentField = {\n  intlLabel: {\n    id: 'global.type',\n    defaultMessage: 'Type',\n  },\n  name: 'createComponent',\n  type: 'boolean-radio-group',\n  size: 12,\n  radios: [\n    {\n      title: {\n        id: getTrad('form.attribute.component.option.create'),\n        defaultMessage: 'Create a new component',\n      },\n      description: {\n        id: getTrad('form.attribute.component.option.create.description'),\n        defaultMessage:\n          'A component is shared across types and components, it will be available and accessible everywhere.',\n      },\n      value: true,\n    },\n    {\n      title: {\n        id: getTrad('form.attribute.component.option.reuse-existing'),\n        defaultMessage: 'Use an existing component',\n      },\n      description: {\n        id: getTrad('form.attribute.component.option.reuse-existing.description'),\n        defaultMessage:\n          'Reuse a component already created to keep your data consistent across content-types.',\n      },\n      value: false,\n    },\n  ],\n};\n","import { getTrad } from '../../../utils/getTrad';\nimport { componentField } from '../component/componentField';\nimport { componentForm } from '../component/componentForm';\n\nimport { nameField } from './nameField';\n\nexport const baseForm = {\n  component(data: { createComponent: boolean }, step: string) {\n    if (step === '1') {\n      const itemsToConcat =\n        data.createComponent === true ? componentForm.base('componentToCreate.') : [];\n\n      return {\n        sections: [{ sectionTitle: null, items: [componentField] }, ...itemsToConcat],\n      };\n    }\n\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            nameField,\n            {\n              name: 'component',\n              type: 'select-component',\n              intlLabel: {\n                id: getTrad('modalForm.attributes.select-component'),\n                defaultMessage: 'Select a component',\n              },\n              isMultiple: false,\n            },\n          ],\n        },\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: {\n                id: 'global.type',\n                defaultMessage: 'Type',\n              },\n              name: 'repeatable',\n              type: 'boolean-radio-group',\n              size: 12,\n              radios: [\n                {\n                  title: {\n                    id: getTrad('form.attribute.component.option.repeatable'),\n                    defaultMessage: 'Repeatable component',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.component.option.repeatable.description'),\n                    defaultMessage:\n                      'Best for multiple instances (array) of ingredients, meta tags, etc..',\n                  },\n                  value: true,\n                },\n                {\n                  title: {\n                    id: getTrad('form.attribute.component.option.single'),\n                    defaultMessage: 'Single component',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.component.option.single.description'),\n                    defaultMessage:\n                      'Best for grouping fields like full address, main information, etc...',\n                  },\n                  value: false,\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  date() {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            nameField,\n            {\n              intlLabel: {\n                id: 'global.type',\n                defaultMessage: 'Type',\n              },\n              name: 'type',\n              type: 'select-date',\n              options: [\n                {\n                  key: '__null_reset_value__',\n                  value: '',\n                  metadatas: {\n                    intlLabel: {\n                      id: 'components.InputSelect.option.placeholder',\n                      defaultMessage: 'Choose here',\n                    },\n                    hidden: true,\n                  },\n                },\n                {\n                  key: 'date',\n                  value: 'date',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.date.type.date'),\n                      defaultMessage: 'date (ex: 01/01/{currentYear})',\n                      values: { currentYear: new Date().getFullYear() },\n                    },\n                  },\n                },\n                {\n                  key: 'datetime',\n                  value: 'datetime',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.date.type.datetime'),\n                      defaultMessage: 'datetime (ex: 01/01/{currentYear} 00:00 AM)',\n                      values: { currentYear: new Date().getFullYear() },\n                    },\n                  },\n                },\n                {\n                  key: 'time',\n                  value: 'time',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.date.type.time'),\n                      defaultMessage: 'time (ex: 00:00 AM)',\n                    },\n                  },\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  enumeration() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [nameField] },\n        {\n          sectionTitle: null,\n          items: [\n            {\n              name: 'enum',\n              type: 'textarea-enum',\n              size: 6,\n              intlLabel: {\n                id: getTrad('form.attribute.item.enumeration.rules'),\n                defaultMessage: 'Values (one line per value)',\n              },\n              placeholder: {\n                id: getTrad('form.attribute.item.enumeration.placeholder'),\n                defaultMessage: 'Ex:\\nmorning\\nnoon\\nevening',\n              },\n              validations: {\n                required: true,\n              },\n            },\n          ],\n        },\n      ],\n    };\n  },\n  media() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [nameField] },\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: {\n                id: 'global.type',\n                defaultMessage: 'Type',\n              },\n              name: 'multiple',\n              size: 12,\n              type: 'boolean-radio-group',\n              radios: [\n                {\n                  title: {\n                    id: getTrad('form.attribute.media.option.multiple'),\n                    defaultMessage: 'Multiple media',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.media.option.multiple.description'),\n                    defaultMessage: 'Best for sliders, carousels or multiple files download',\n                  },\n                  value: true,\n                },\n                {\n                  title: {\n                    id: getTrad('form.attribute.media.option.single'),\n                    defaultMessage: 'Single media',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.media.option.single.description'),\n                    defaultMessage: 'Best for avatar, profile picture or cover',\n                  },\n                  value: false,\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  number() {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            nameField,\n            {\n              intlLabel: {\n                id: getTrad('form.attribute.item.number.type'),\n                defaultMessage: 'Number format',\n              },\n              name: 'type',\n              type: 'select-number',\n              options: [\n                {\n                  key: '__null_reset_value__',\n                  value: '',\n                  metadatas: {\n                    intlLabel: {\n                      id: 'components.InputSelect.option.placeholder',\n                      defaultMessage: 'Choose here',\n                    },\n                    hidden: true,\n                  },\n                },\n                {\n                  key: 'integer',\n                  value: 'integer',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.number.type.integer'),\n                      defaultMessage: 'integer (ex: 10)',\n                    },\n                  },\n                },\n                {\n                  key: 'biginteger',\n                  value: 'biginteger',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.number.type.biginteger'),\n                      defaultMessage: 'biginteger (ex: 123456789)',\n                    },\n                  },\n                },\n                {\n                  key: 'decimal',\n                  value: 'decimal',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.number.type.decimal'),\n                      defaultMessage: 'decimal (ex: 2.22)',\n                    },\n                  },\n                },\n                {\n                  key: 'float',\n                  value: 'float',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.number.type.float'),\n                      defaultMessage: 'decimal (ex: 3.3333333)',\n                    },\n                  },\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  relation() {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: { id: 'FIXME', defaultMessage: 'FIXME' },\n              name: 'relation',\n              size: 12,\n              type: 'relation',\n            },\n          ],\n        },\n      ],\n    };\n  },\n  string() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [nameField] },\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: {\n                id: 'global.type',\n                defaultMessage: 'Type',\n              },\n              name: 'type',\n              size: 12,\n              type: 'radio-group',\n              radios: [\n                {\n                  title: {\n                    id: getTrad('form.attribute.text.option.short-text'),\n                    defaultMessage: 'Sort text',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.text.option.short-text.description'),\n                    defaultMessage:\n                      'Best for titles, names, links (URL). It also enables exact search on the field.',\n                  },\n                  value: 'string',\n                },\n                {\n                  title: {\n                    id: getTrad('form.attribute.text.option.long-text'),\n                    defaultMessage: 'Long text',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.text.option.long-text.description'),\n                    defaultMessage: 'Best for descriptions, biography. Exact search is disabled.',\n                  },\n                  value: 'text',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  text() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [nameField] },\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: {\n                id: 'global.type',\n                defaultMessage: 'Type',\n              },\n              name: 'type',\n              size: 12,\n              type: 'radio-group',\n              radios: [\n                {\n                  title: {\n                    id: getTrad('form.attribute.text.option.short-text'),\n                    defaultMessage: 'Sort text',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.text.option.short-text.description'),\n                    defaultMessage:\n                      'Best for titles, names, links (URL). It also enables exact search on the field.',\n                  },\n                  value: 'string',\n                },\n                {\n                  title: {\n                    id: getTrad('form.attribute.text.option.long-text'),\n                    defaultMessage: 'Long text',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.text.option.long-text.description'),\n                    defaultMessage: 'Best for descriptions, biography. Exact search is disabled.',\n                  },\n                  value: 'text',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  uid(_data: unknown, step: string, attributes: Array<{ type: string; name: string }>) {\n    const options = attributes\n      .filter(({ type }) => ['string', 'text'].includes(type))\n      .map(({ name }) => ({\n        key: name,\n        value: name,\n        metadatas: {\n          intlLabel: { id: `${name}.no-override`, defaultMessage: name },\n        },\n      }));\n\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            {\n              ...nameField,\n              placeholder: {\n                id: getTrad('modalForm.attribute.form.base.name.placeholder'),\n                defaultMessage: 'e.g. slug, seoUrl, canonicalUrl',\n              },\n            },\n            {\n              intlLabel: {\n                id: getTrad('modalForm.attribute.target-field'),\n                defaultMessage: 'Attached field',\n              },\n              name: 'targetField',\n              type: 'select',\n              options: [\n                {\n                  key: '__null_reset_value__',\n                  value: '',\n                  metadatas: { intlLabel: { id: 'global.none', defaultMessage: 'None' } },\n                },\n                ...options,\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n};\n","import { advancedForm } from './advancedForm';\nimport { baseForm } from './baseForm';\n\nexport const attributesForm = {\n  advanced: advancedForm,\n  base: baseForm,\n};\n","import slugify from '@sindresorhus/slugify';\n\nexport const toRegressedEnumValue = (value: string | undefined) => {\n  if (!value) {\n    return '';\n  }\n  return slugify(value, {\n    decamelize: false,\n    lowercase: false,\n    separator: '_',\n  });\n};\n","import { translatedErrors as errorsTrads } from '@strapi/helper-plugin';\nimport { snakeCase } from 'lodash/fp';\nimport toNumber from 'lodash/toNumber';\nimport * as yup from 'yup';\n\nimport { getTrad } from '../../../../utils/getTrad';\n\nconst NAME_REGEX = /^[A-Za-z][_0-9A-Za-z]*$/;\n\nconst alreadyUsedAttributeNames = (\n  usedNames: Array<string>\n): yup.TestConfig<string | undefined, Record<string, unknown>> => {\n  return {\n    name: 'attributeNameAlreadyUsed',\n    message: errorsTrads.unique,\n    test(value: string | undefined) {\n      if (!value) {\n        return false;\n      }\n      const snakeCaseKey = snakeCase(value);\n\n      return !usedNames.some((existingKey) => {\n        if (existingKey === value) return false; // don't compare against itself\n        return snakeCase(existingKey) === snakeCaseKey;\n      });\n    },\n  };\n};\n\nconst getUsedContentTypeAttributeNames = (\n  ctShema: any,\n  isEdition: boolean,\n  attributeNameToEdit: string\n) => {\n  const attributes = ctShema?.schema?.attributes ?? {};\n\n  return Object.keys(attributes).filter((attr) => {\n    if (isEdition) {\n      return attr !== attributeNameToEdit;\n    }\n\n    return true;\n  });\n};\n\nconst isNameAllowed = (\n  reservedNames: Array<string>\n): yup.TestConfig<string | undefined, Record<string, unknown>> => {\n  return {\n    name: 'forbiddenAttributeName',\n    message: getTrad('error.attributeName.reserved-name'),\n    test(value: string | undefined) {\n      if (!value) {\n        return false;\n      }\n      const snakeCaseKey = snakeCase(value);\n\n      return !reservedNames.some((existingKey) => {\n        return snakeCase(existingKey) === snakeCaseKey;\n      });\n    },\n  };\n};\n\nconst validators = {\n  default: () => yup.string().nullable(),\n  max: () => yup.number().integer().nullable(),\n  min: () =>\n    yup\n      .number()\n      .integer()\n      .when('max', (max, schema) => {\n        if (max) {\n          return schema.max(max, getTrad('error.validation.minSupMax'));\n        }\n\n        return schema;\n      })\n      .nullable(),\n  maxLength: () => yup.number().integer().positive(getTrad('error.validation.positive')).nullable(),\n  minLength: () =>\n    yup\n      .number()\n      .integer()\n      .min(0)\n      .when('maxLength', (maxLength, schema) => {\n        if (maxLength) {\n          return schema.max(maxLength, getTrad('error.validation.minSupMax'));\n        }\n\n        return schema;\n      })\n      .nullable(),\n  name(usedNames: Array<string>, reservedNames: Array<string>) {\n    return yup\n      .string()\n      .test(alreadyUsedAttributeNames(usedNames))\n      .test(isNameAllowed(reservedNames))\n      .matches(NAME_REGEX, errorsTrads.regex)\n      .required(errorsTrads.required);\n  },\n  required: () => yup.boolean(),\n  type: () => yup.string().required(errorsTrads.required),\n  unique: () => yup.boolean().nullable(),\n};\n\nconst createTextShape = (usedAttributeNames: Array<string>, reservedNames: Array<string>) => {\n  const shape = {\n    name: validators.name(usedAttributeNames, reservedNames),\n    type: validators.type(),\n    default: validators.default(),\n    unique: validators.unique(),\n    required: validators.required(),\n    maxLength: validators.maxLength(),\n    minLength: validators.minLength(),\n    regex: yup\n      .string()\n      .test({\n        name: 'isValidRegExpPattern',\n        message: getTrad('error.validation.regex'),\n        test(value) {\n          return new RegExp(value || '') !== null;\n        },\n      })\n      .nullable(),\n  };\n\n  return shape;\n};\n\ntype GenericIsMinSuperiorThanMax<T extends (string | null) | number> = yup.TestConfig<\n  T | undefined,\n  Record<string, unknown>\n>;\n\nconst isMinSuperiorThanMax = <\n  T extends (string | null) | number\n>(): GenericIsMinSuperiorThanMax<T> => ({\n  name: 'isMinSuperiorThanMax',\n  message: getTrad('error.validation.minSupMax'),\n  test(min: T | undefined) {\n    if (!min) {\n      return true;\n    }\n\n    const { max } = (this as any).parent;\n\n    if (!max) {\n      return true;\n    }\n\n    if (Number.isNaN(toNumber(min))) {\n      return true;\n    }\n\n    return toNumber(max) >= toNumber(min);\n  },\n});\n\nexport {\n  alreadyUsedAttributeNames,\n  createTextShape,\n  getUsedContentTypeAttributeNames,\n  isMinSuperiorThanMax,\n  isNameAllowed,\n  NAME_REGEX,\n  validators,\n};\n","import { translatedErrors as errorsTrads } from '@strapi/helper-plugin';\nimport { RelationKind } from '@strapi/types/dist/types/core/attributes';\nimport uniq from 'lodash/uniq';\nimport * as yup from 'yup';\n\nimport { getRelationType } from '../../../utils/getRelationType';\nimport { getTrad } from '../../../utils/getTrad';\nimport { toRegressedEnumValue } from '../../../utils/toRegressedEnumValue';\n\nimport {\n  alreadyUsedAttributeNames,\n  createTextShape,\n  isMinSuperiorThanMax,\n  isNameAllowed,\n  NAME_REGEX,\n  validators,\n} from './validation/common';\n\nexport const attributeTypes = {\n  date(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  datetime(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  time(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  default(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  biginteger(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup\n        .string()\n        .nullable()\n        .matches(/^-?\\d*$/),\n      unique: validators.unique(),\n      required: validators.required(),\n      max: yup\n        .string()\n        .nullable()\n        .matches(/^-?\\d*$/, errorsTrads.regex),\n      min: yup\n        .string()\n        .nullable()\n        .test(isMinSuperiorThanMax<string | null>())\n        .matches(/^-?\\d*$/, errorsTrads.regex),\n    };\n\n    return yup.object(shape);\n  },\n  boolean(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      default: yup.boolean().nullable(),\n      required: validators.required(),\n      unique: validators.unique(),\n    };\n\n    return yup.object(shape);\n  },\n  component(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      max: validators.max(),\n      min: validators.min(),\n      component: yup.string().required(errorsTrads.required),\n    };\n\n    return yup.object(shape);\n  },\n  decimal(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup.number(),\n      required: validators.required(),\n      max: yup.number(),\n      min: yup.number().test(isMinSuperiorThanMax<number>()),\n    };\n\n    return yup.object(shape);\n  },\n  dynamiczone(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      max: validators.max(),\n      min: validators.min(),\n    };\n\n    return yup.object(shape);\n  },\n  email(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup.string().email().nullable(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  enumeration(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    /**\n     * For enumerations the least common denomiator is GraphQL, where\n     * values needs to match the secure name regex:\n     * GraphQL Spec https://spec.graphql.org/June2018/#sec-Names\n     *\n     * Therefore we need to make sure our users only use values, which\n     * can be returned by GraphQL, by checking the regressed values\n     * agains the GraphQL regex.\n     *\n     * TODO V5: check if we can avoid this coupling by moving this logic\n     * into the GraphQL plugin.\n     */\n    const GRAPHQL_ENUM_REGEX = /^[_A-Za-z][_0-9A-Za-z]*$/;\n\n    const shape = {\n      name: yup\n        .string()\n        .test(alreadyUsedAttributeNames(usedAttributeNames))\n        .test(isNameAllowed(reservedNames))\n        .matches(GRAPHQL_ENUM_REGEX, errorsTrads.regex)\n        .required(errorsTrads.required),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      enum: yup\n        .array()\n        .of(yup.string())\n        .min(1, errorsTrads.min)\n        .test({\n          name: 'areEnumValuesUnique',\n          message: getTrad('error.validation.enum-duplicate'),\n          test(values) {\n            if (!values) {\n              return false;\n            }\n            const duplicates = uniq(\n              values\n                .map(toRegressedEnumValue)\n                .filter((value, index, values) => values.indexOf(value) !== index)\n            );\n\n            return !duplicates.length;\n          },\n        })\n        .test({\n          name: 'doesNotHaveEmptyValues',\n          message: getTrad('error.validation.enum-empty-string'),\n          test: (values) => {\n            if (!values) {\n              return false;\n            }\n            return !values.map(toRegressedEnumValue).some((val) => val === '');\n          },\n        })\n        .test({\n          name: 'doesMatchRegex',\n          message: getTrad('error.validation.enum-regex'),\n          test: (values) => {\n            if (!values) {\n              return false;\n            }\n            return values\n              .map(toRegressedEnumValue)\n              .every((value) => GRAPHQL_ENUM_REGEX.test(value));\n          },\n        }),\n      enumName: yup.string().nullable(),\n    };\n\n    return yup.object(shape);\n  },\n  float(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      default: yup.number(),\n      max: yup.number(),\n      min: yup.number().test(isMinSuperiorThanMax<number>()),\n    };\n\n    return yup.object(shape);\n  },\n  integer(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup.number().integer(),\n      unique: validators.unique(),\n      required: validators.required(),\n      max: validators.max(),\n      min: validators.min(),\n    };\n\n    return yup.object(shape);\n  },\n  json(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      unique: validators.unique(),\n    };\n\n    return yup.object(shape);\n  },\n  media(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      multiple: yup.boolean(),\n      required: validators.required(),\n      allowedTypes: yup\n        .array()\n        .of(yup.string().oneOf(['images', 'videos', 'files', 'audios']))\n        .min(1)\n        .nullable(),\n    };\n\n    return yup.object(shape);\n  },\n  password(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  relation(\n    usedAttributeNames: Array<string>,\n    reservedNames: Array<string>,\n    alreadyTakenTargetAttributes: Array<{ name: string }>,\n    {\n      initialData,\n      modifiedData,\n    }: {\n      initialData: { targetAttribute?: string };\n      modifiedData: {\n        name?: string;\n        relation?: RelationKind.WithTarget;\n        targetAttribute?: string;\n      };\n    }\n  ) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      target: yup.string().required(errorsTrads.required),\n      relation: yup.string().required(),\n      type: yup.string().required(),\n      targetAttribute: yup.lazy(() => {\n        const relationType = getRelationType(modifiedData.relation, modifiedData.targetAttribute);\n\n        if (relationType === 'oneWay' || relationType === 'manyWay') {\n          return yup.string().nullable();\n        }\n\n        const schema = yup.string().test(isNameAllowed(reservedNames));\n        const initialForbiddenName = [\n          ...alreadyTakenTargetAttributes.map(({ name }) => name),\n          modifiedData.name,\n        ];\n\n        const forbiddenTargetAttributeName = initialForbiddenName.filter(\n          (val) => val !== initialData.targetAttribute\n        );\n\n        return schema\n          .matches(NAME_REGEX, errorsTrads.regex)\n          .test({\n            name: 'forbiddenTargetAttributeName',\n            message: getTrad('error.validation.relation.targetAttribute-taken'),\n            test(value) {\n              if (!value) {\n                return false;\n              }\n\n              return !forbiddenTargetAttributeName.includes(value);\n            },\n          })\n          .required(errorsTrads.required);\n      }),\n    };\n\n    return yup.object(shape);\n  },\n  richtext(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  blocks(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  string(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = createTextShape(usedAttributeNames, reservedNames);\n\n    return yup.object(shape);\n  },\n  text(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = createTextShape(usedAttributeNames, reservedNames);\n\n    return yup.object(shape);\n  },\n  uid(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = createTextShape(usedAttributeNames, reservedNames);\n\n    return yup.object(shape);\n  },\n};\n","export const CATEGORY_NAME_REGEX = /^[A-Za-z][-_0-9A-Za-z]*$/;\n","import { translatedErrors as errorsTrads } from '@strapi/helper-plugin';\nimport * as yup from 'yup';\n\nimport { CATEGORY_NAME_REGEX } from './regex';\n\nexport const createCategorySchema = (usedCategoryNames: Array<string>) => {\n  const shape = {\n    name: yup\n      .string()\n      .matches(CATEGORY_NAME_REGEX, errorsTrads.regex)\n      .test({\n        name: 'nameNotAllowed',\n        message: errorsTrads.unique,\n        test(value) {\n          if (!value) {\n            return false;\n          }\n          return !usedCategoryNames.includes(value?.toLowerCase());\n        },\n      })\n      .required(errorsTrads.required),\n  };\n\n  return yup.object(shape);\n};\n","import { getTrad } from '../../../utils/getTrad';\n\nexport const categoryForm = {\n  base: {\n    sections: [\n      {\n        sectionTitle: null,\n        items: [\n          {\n            autoFocus: true,\n            name: 'name',\n            type: 'text',\n            intlLabel: {\n              id: 'global.name',\n              defaultMessage: 'Name',\n            },\n\n            // validations: {\n            //   required: true,\n            // },\n            description: {\n              id: getTrad('modalForm.editCategory.base.name.description'),\n              defaultMessage: 'No space is allowed for the name of the category',\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n","import { translatedErrors as errorsTrads } from '@strapi/helper-plugin';\nimport { snakeCase } from 'lodash/fp';\nimport * as yup from 'yup';\n\nimport { getTrad } from '../../../utils/getTrad';\nimport { CATEGORY_NAME_REGEX } from '../category/regex';\nimport { createComponentUid } from '../utils/createUid';\n\nexport const createComponentSchema = (\n  usedComponentNames: Array<string>,\n  reservedNames: Array<string>,\n  category: string,\n  takenCollectionNames: Array<string>,\n  currentCollectionName: string\n) => {\n  const shape = {\n    displayName: yup\n      .string()\n      .test({\n        name: 'nameAlreadyUsed',\n        message: errorsTrads.unique,\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const name = createComponentUid(value, category);\n\n          const snakeCaseKey = snakeCase(name);\n          const snakeCaseCollectionName = snakeCase(currentCollectionName);\n\n          return (\n            usedComponentNames.every((reserved) => {\n              return snakeCase(reserved) !== snakeCaseKey;\n            }) &&\n            takenCollectionNames.every(\n              (collectionName) => snakeCase(collectionName) !== snakeCaseCollectionName\n            )\n          );\n        },\n      })\n      .test({\n        name: 'nameNotAllowed',\n        message: getTrad('error.contentTypeName.reserved-name'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n          return reservedNames.every((reserved) => {\n            return snakeCase(reserved) !== snakeCaseKey;\n          });\n        },\n      })\n      .required(errorsTrads.required),\n    category: yup\n      .string()\n      .matches(CATEGORY_NAME_REGEX, errorsTrads.regex)\n      .required(errorsTrads.required),\n\n    icon: yup.string(),\n  };\n\n  return yup.object(shape);\n};\n","import { getTrad } from '../../../utils/getTrad';\n\nconst nameField = {\n  name: 'displayName',\n  type: 'text',\n  intlLabel: {\n    id: getTrad('contentType.displayName.label'),\n    defaultMessage: 'Display name',\n  },\n};\n\nexport const contentTypeForm = {\n  advanced: {\n    default() {\n      return {\n        sections: [\n          {\n            items: [\n              {\n                intlLabel: {\n                  id: getTrad('contentType.draftAndPublish.label'),\n                  defaultMessage: 'Draft & publish',\n                },\n                description: {\n                  id: getTrad('contentType.draftAndPublish.description'),\n                  defaultMessage:\n                    'Allows writing a draft version of an entry, before it is published',\n                },\n                name: 'draftAndPublish',\n                type: 'toggle-draft-publish',\n                validations: {},\n              },\n            ],\n          },\n        ],\n      };\n    },\n  },\n  base: {\n    create() {\n      return {\n        sections: [\n          {\n            sectionTitle: null,\n            items: [\n              nameField,\n              {\n                description: {\n                  id: getTrad('contentType.apiId-singular.description'),\n                  defaultMessage:\n                    'Used to generate the API routes and databases tables/collections',\n                },\n                intlLabel: {\n                  id: getTrad('contentType.apiId-singular.label'),\n                  defaultMessage: 'API ID (Singular)',\n                },\n                name: 'singularName',\n                type: 'text-singular',\n              },\n              {\n                type: 'pushRight',\n                size: 6,\n                intlLabel: { id: '', defaultMessage: '' },\n                name: 'pushRight',\n              },\n              {\n                description: {\n                  id: getTrad('contentType.apiId-plural.description'),\n                  defaultMessage: 'Pluralized API ID',\n                },\n                intlLabel: {\n                  id: getTrad('contentType.apiId-plural.label'),\n                  defaultMessage: 'API ID (Plural)',\n                },\n                name: 'pluralName',\n                type: 'text-plural',\n              },\n            ],\n          },\n        ],\n      };\n    },\n    edit() {\n      return {\n        sections: [\n          {\n            sectionTitle: null,\n            items: [\n              nameField,\n              {\n                disabled: true,\n                description: {\n                  id: getTrad('contentType.apiId-singular.description'),\n                  defaultMessage:\n                    'Used to generate the API routes and databases tables/collections',\n                },\n                intlLabel: {\n                  id: getTrad('contentType.apiId-singular.label'),\n                  defaultMessage: 'API ID (Singular)',\n                },\n                name: 'singularName',\n                type: 'text',\n              },\n              {\n                type: 'pushRight',\n                size: 6,\n                intlLabel: { id: '', defaultMessage: '' },\n                name: 'pushRight',\n              },\n              {\n                disabled: true,\n                description: {\n                  id: getTrad('contentType.apiId-plural.description'),\n                  defaultMessage: 'Pluralized API ID',\n                },\n                intlLabel: {\n                  id: getTrad('contentType.apiId-plural.label'),\n                  defaultMessage: 'API ID (Plural)',\n                },\n                name: 'pluralName',\n                type: 'text',\n              },\n              {\n                intlLabel: {\n                  id: 'global.type',\n                  defaultMessage: 'Type',\n                },\n                name: 'kind',\n                type: 'content-type-radio-group',\n                size: 12,\n                radios: [\n                  {\n                    title: {\n                      id: getTrad('form.button.collection-type.name'),\n                      defaultMessage: 'Collection Type',\n                    },\n                    description: {\n                      id: getTrad('form.button.collection-type.description'),\n                      defaultMessage:\n                        'Best for multiple instances like articles, products, comments, etc.',\n                    },\n                    value: 'collectionType',\n                  },\n                  {\n                    title: {\n                      id: getTrad('form.button.single-type.name'),\n                      defaultMessage: 'Single Type',\n                    },\n                    description: {\n                      id: getTrad('form.button.single-type.description'),\n                      defaultMessage: 'Best for single instance like about us, homepage, etc.',\n                    },\n                    value: 'singleType',\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      };\n    },\n  },\n};\n","import { translatedErrors as errorsTrads } from '@strapi/helper-plugin';\nimport { snakeCase } from 'lodash/fp';\nimport * as yup from 'yup';\n\nimport { getTrad } from '../../../utils/getTrad';\nimport { createUid } from '../utils/createUid';\n\ntype CreateContentTypeSchemaParams = {\n  usedContentTypeNames: Array<string>;\n  reservedModels: Array<string>;\n  singularNames: Array<string>;\n  pluralNames: Array<string>;\n  collectionNames: Array<string>;\n};\n\nexport const createContentTypeSchema = ({\n  usedContentTypeNames = [],\n  reservedModels = [],\n  singularNames = [],\n  pluralNames = [],\n  collectionNames = [],\n}: CreateContentTypeSchemaParams) => {\n  const shape = {\n    displayName: yup\n      .string()\n      .test({\n        name: 'nameAlreadyUsed',\n        message: errorsTrads.unique,\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const name = createUid(value);\n\n          const snakeCaseKey = snakeCase(name);\n\n          return !usedContentTypeNames.some((value) => {\n            return snakeCase(value) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'nameNotAllowed',\n        message: getTrad('error.contentTypeName.reserved-name'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n          const snakeCaseKey = snakeCase(value);\n\n          return !reservedModels.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .required(errorsTrads.required),\n    pluralName: yup\n      .string()\n      .test({\n        name: 'pluralNameAlreadyUsed',\n        message: errorsTrads.unique,\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !pluralNames.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'pluralNameAlreadyUsedAsSingular',\n        message: getTrad('error.contentType.pluralName-equals-singularName'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !singularNames.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'pluralAndSingularAreUnique',\n        message: getTrad('error.contentType.pluralName-used'),\n        test(value, context) {\n          if (!value) {\n            return false;\n          }\n\n          return snakeCase(context.parent.singularName) !== snakeCase(value);\n        },\n      })\n      .test({\n        name: 'pluralNameNotAllowed',\n        message: getTrad('error.contentTypeName.reserved-name'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !reservedModels.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'pluralNameNotAlreadyUsedInCollectionName',\n        message: getTrad('error.contentType.pluralName-equals-collectionName'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !collectionNames.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .required(errorsTrads.required),\n    singularName: yup\n      .string()\n      .test({\n        name: 'singularNameAlreadyUsed',\n        message: errorsTrads.unique,\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !singularNames.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'singularNameAlreadyUsedAsPlural',\n        message: getTrad('error.contentType.singularName-equals-pluralName'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !pluralNames.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'pluralAndSingularAreUnique',\n        message: getTrad('error.contentType.singularName-used'),\n        test(value, context) {\n          if (!value) {\n            return false;\n          }\n\n          return snakeCase(context.parent.pluralName) !== snakeCase(value);\n        },\n      })\n      .test({\n        name: 'singularNameNotAllowed',\n        message: getTrad('error.contentTypeName.reserved-name'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !reservedModels.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .required(errorsTrads.required),\n    draftAndPublish: yup.boolean(),\n    kind: yup.string().oneOf(['singleType', 'collectionType']),\n    reviewWorkflows: yup.boolean(),\n  };\n\n  return yup.object(shape);\n};\n","import { getTrad } from '../../utils/getTrad';\n\nimport { componentField } from './component/componentField';\nimport { componentForm } from './component/componentForm';\n\nexport const dynamiczoneForm = {\n  advanced: {\n    default() {\n      return {\n        sections: componentForm.advanced(),\n      };\n    },\n  },\n  base: {\n    createComponent() {\n      return {\n        sections: [\n          { sectionTitle: null, items: [componentField] },\n          ...componentForm.base('componentToCreate.'),\n        ],\n      };\n    },\n    default() {\n      return {\n        sections: [\n          { sectionTitle: null, items: [componentField] },\n          {\n            sectionTitle: null,\n            items: [\n              {\n                type: 'pushRight',\n                size: 6,\n                intlLabel: { id: '', defaultMessage: '' },\n                name: 'pushRight',\n              },\n              {\n                name: 'components',\n                type: 'select-components',\n                intlLabel: {\n                  id: getTrad('modalForm.attributes.select-components'),\n                  defaultMessage: 'Select the components',\n                },\n                isMultiple: true,\n              },\n            ],\n          },\n        ],\n      };\n    },\n  },\n};\n","type SectionTitle = {\n  id: string;\n  defaultMessage: string;\n};\n\ntype Item = {\n  intlLabel: {\n    id: string;\n    defaultMessage: string;\n  };\n  description?: { id: string; defaultMessage: string };\n  name: string;\n  type: string;\n  value?: string;\n  options?: {\n    key: string;\n    value: string;\n    metadatas: {\n      intlLabel: {\n        id: string;\n        defaultMessage: string;\n      };\n    };\n  }[];\n};\n\ntype FormTypeOption = {\n  sectionTitle: SectionTitle | null;\n  items: Item[];\n};\n\nexport type FormTypeOptions = Array<FormTypeOption>;\n\n/**\n * @description\n * Adds form options to the default section or as a new section\n */\nexport const addItemsToFormSection = (\n  formTypeOptions: FormTypeOptions | Item[],\n  sections: FormTypeOptions\n) => {\n  formTypeOptions.forEach((item) => {\n    if (!('sectionTitle' in item)) {\n      // When there is no sectionTitle key,\n      // add the item to the default section\n      sections[0].items?.push(item);\n      return;\n    }\n\n    // Otherwise, when sectionTitle has a value (including null),\n    // add the item as a new section\n    sections.push(item);\n  });\n};\n","import { snakeCase } from 'lodash/fp';\nimport pluralize from 'pluralize';\n\n// TODO: create a utility for this\n// Duplicate in server/src/services/schema-builder/component-builder.ts\nconst createComponentCollectionName = (name: string, category: string) => {\n  return `components_${snakeCase(category)}_${pluralize(snakeCase(name))}`;\n};\n\nexport { createComponentCollectionName };\n","export type SchemaData = {\n  initialData: {\n    name: string;\n    targetAttribute: any;\n  };\n  modifiedData: object;\n};\n\nexport type Attribute = {\n  name: string;\n};\n\nexport const getUsedAttributeNames = (\n  attributes: Array<Attribute>,\n  schemaData: SchemaData\n): Array<string> => {\n  return attributes\n    .filter(({ name }) => {\n      return name !== schemaData.initialData.name;\n    })\n    .map(({ name }) => name);\n};\n","import { getTrad } from '../../../utils/getTrad';\nimport { commonBaseForm } from '../attributes/commonBaseForm';\nimport { attributesForm } from '../attributes/form';\nimport { nameField } from '../attributes/nameField';\nimport { attributeTypes } from '../attributes/types';\nimport { createCategorySchema } from '../category/createCategorySchema';\nimport { categoryForm } from '../category/form';\nimport { componentForm } from '../component/componentForm';\nimport { createComponentSchema } from '../component/createComponentSchema';\nimport { contentTypeForm } from '../contentType/contentTypeForm';\nimport { createContentTypeSchema } from '../contentType/createContentTypeSchema';\nimport { dynamiczoneForm } from '../dynamiczoneForm';\n\nimport { addItemsToFormSection, FormTypeOptions } from './utils/addItemsToFormSection';\nimport { createComponentCollectionName } from './utils/createCollectionName';\nimport { Attribute, getUsedAttributeNames, SchemaData } from './utils/getUsedAttributeNames';\n\nimport type { Common } from '@strapi/types';\n\ntype ContentType = {\n  schema: {\n    singularName: string;\n    pluralName: string;\n    collectionName: string;\n  };\n};\n\nexport type SchemaParams = {\n  schemaAttributes: any;\n  attributeType: keyof typeof attributeTypes;\n  customFieldValidator: any;\n  reservedNames: {\n    attributes: Array<string>;\n  };\n  schemaData: any;\n  ctbFormsAPI: any;\n};\n\ntype Base<TAttributesFormType extends 'base' | 'advanced'> = {\n  data: any;\n  type: keyof (typeof attributesForm)[TAttributesFormType];\n  step: string;\n  attributes: any;\n  extensions: any;\n};\n\nexport const forms = {\n  customField: {\n    schema({\n      schemaAttributes,\n      attributeType,\n      customFieldValidator,\n      reservedNames,\n      schemaData,\n      ctbFormsAPI,\n    }: SchemaParams) {\n      const usedAttributeNames = getUsedAttributeNames(schemaAttributes, schemaData);\n      const x = attributeTypes[attributeType];\n      let attributeShape;\n      if (attributeType === 'relation') {\n        attributeShape = attributeTypes[attributeType](\n          usedAttributeNames,\n          reservedNames.attributes,\n          [],\n          { initialData: {}, modifiedData: {} }\n        );\n      } else {\n        attributeShape = attributeTypes[attributeType](\n          usedAttributeNames,\n          reservedNames.attributes\n        );\n      }\n\n      return ctbFormsAPI.makeCustomFieldValidator(\n        attributeShape,\n        customFieldValidator,\n        usedAttributeNames,\n        reservedNames.attributes,\n        schemaData\n      );\n    },\n    form: {\n      base({ customField }: any) {\n        // Default section with required name field\n        const sections: FormTypeOptions = [{ sectionTitle: null, items: [nameField] }];\n\n        if (customField.options?.base) {\n          addItemsToFormSection(customField.options.base, sections);\n        }\n\n        return { sections };\n      },\n      advanced({ customField, data, step, extensions, ...rest }: any) {\n        // Default section with no fields\n        const sections: FormTypeOptions = [{ sectionTitle: null, items: [] }];\n        const injectedInputs = extensions.getAdvancedForm(['attribute', customField.type], {\n          data,\n          type: customField.type,\n          step,\n          ...rest,\n        });\n\n        if (customField.options?.advanced) {\n          addItemsToFormSection(customField.options.advanced, sections);\n        }\n\n        if (injectedInputs) {\n          const extendedSettings = {\n            sectionTitle: {\n              id: getTrad('modalForm.custom-fields.advanced.settings.extended'),\n              defaultMessage: 'Extended settings',\n            },\n            items: injectedInputs,\n          };\n\n          sections.push(extendedSettings);\n        }\n\n        return { sections };\n      },\n    },\n  },\n  attribute: {\n    schema(\n      currentSchema: any,\n      attributeType: keyof typeof attributeTypes,\n      reservedNames: {\n        attributes: Array<string>;\n      },\n      alreadyTakenTargetContentTypeAttributes: Array<Attribute>,\n      options: SchemaData,\n      extensions: {\n        makeValidator: any;\n      }\n    ) {\n      // Get the attributes object on the schema\n      const attributes: Array<Attribute> = currentSchema?.schema?.attributes ?? [];\n      const usedAttributeNames = getUsedAttributeNames(attributes, options);\n\n      try {\n        const attributeShape = attributeTypes[attributeType](\n          usedAttributeNames,\n          reservedNames.attributes,\n          alreadyTakenTargetContentTypeAttributes,\n          options\n        );\n\n        return extensions.makeValidator(\n          ['attribute', attributeType],\n          attributeShape,\n          usedAttributeNames,\n          reservedNames.attributes,\n          alreadyTakenTargetContentTypeAttributes,\n          options\n        );\n      } catch (err) {\n        console.error('Error yup build schema', err);\n\n        return attributeTypes.default(usedAttributeNames, reservedNames.attributes);\n      }\n    },\n    form: {\n      advanced({ data, type, step, extensions, ...rest }: Base<'advanced'>) {\n        try {\n          const baseForm = attributesForm.advanced[type](data, step).sections;\n          const itemsToAdd = extensions.getAdvancedForm(['attribute', type], {\n            data,\n            type,\n            step,\n            ...rest,\n          });\n\n          const sections = baseForm.reduce((acc: Array<any>, current: any) => {\n            if (current.sectionTitle === null) {\n              acc.push(current);\n            } else {\n              acc.push({ ...current, items: [...current.items, ...itemsToAdd] });\n            }\n\n            return acc;\n          }, []);\n          // IF we want a dedicated section for the plugins\n          // const sections = [\n          //   ...baseForm,\n          //   {\n          //     sectionTitle: { id: 'Zone pour plugins', defaultMessage: 'Zone pour plugins' },\n          //     items: itemsToAdd,\n          //   },\n          // ];\n\n          return { sections };\n        } catch (err) {\n          console.error(err);\n\n          return { sections: [] };\n        }\n      },\n      base({ data, type, step, attributes }: Base<'base'>) {\n        try {\n          return attributesForm.base[type](data, step, attributes);\n        } catch (err) {\n          return commonBaseForm;\n        }\n      },\n    },\n  },\n  contentType: {\n    schema(\n      alreadyTakenNames: Array<string>,\n      isEditing: boolean,\n      ctUid: Common.UID.ContentType,\n      reservedNames: {\n        models: any;\n      },\n      extensions: any,\n      contentTypes: Record<string, ContentType>\n    ) {\n      const singularNames = Object.values(contentTypes).map((contentType) => {\n        return contentType.schema.singularName;\n      });\n\n      const pluralNames = Object.values(contentTypes).map((contentType: any) => {\n        return contentType?.schema?.pluralName ?? '';\n      });\n\n      const takenNames = isEditing\n        ? alreadyTakenNames.filter((uid) => uid !== ctUid)\n        : alreadyTakenNames;\n\n      const takenSingularNames = isEditing\n        ? singularNames.filter((singName) => {\n            const { schema } = contentTypes[ctUid];\n\n            return schema.singularName !== singName;\n          })\n        : singularNames;\n\n      const takenPluralNames = isEditing\n        ? pluralNames.filter((pluralName) => {\n            const { schema } = contentTypes[ctUid];\n\n            return schema.pluralName !== pluralName;\n          })\n        : pluralNames;\n\n      // return the array of collection names not all normalized\n      const collectionNames = Object.values(contentTypes).map((contentType) => {\n        return contentType?.schema?.collectionName ?? '';\n      });\n\n      const takenCollectionNames = isEditing\n        ? collectionNames.filter((collectionName) => {\n            const { schema } = contentTypes[ctUid];\n            const currentPluralName = schema.pluralName;\n            const currentCollectionName = schema.collectionName;\n\n            return collectionName !== currentPluralName || collectionName !== currentCollectionName;\n          })\n        : collectionNames;\n\n      const contentTypeShape = createContentTypeSchema({\n        usedContentTypeNames: takenNames,\n        reservedModels: reservedNames.models,\n        singularNames: takenSingularNames,\n        pluralNames: takenPluralNames,\n        collectionNames: takenCollectionNames,\n      });\n\n      // FIXME\n      return extensions.makeValidator(\n        ['contentType'],\n        contentTypeShape,\n        takenNames,\n        reservedNames.models,\n        takenSingularNames,\n        takenPluralNames\n      );\n    },\n    form: {\n      base({ actionType }: any) {\n        if (actionType === 'create') {\n          return contentTypeForm.base.create();\n        }\n\n        return contentTypeForm.base.edit();\n      },\n      advanced({ extensions }: any) {\n        const baseForm = contentTypeForm.advanced\n          .default()\n          .sections.map((section) => section.items)\n          .flat();\n        const itemsToAdd = extensions.getAdvancedForm(['contentType']);\n\n        return {\n          sections: [\n            {\n              items: [...baseForm, ...itemsToAdd],\n            },\n          ],\n        };\n      },\n    },\n  },\n  component: {\n    schema(\n      alreadyTakenAttributes: Array<Common.UID.Component>,\n      componentCategory: string,\n      reservedNames: {\n        models: any;\n      },\n      isEditing = false,\n      components: Record<string, any>,\n      componentDisplayName: string,\n      compoUid: Common.UID.Component | null = null\n    ) {\n      const takenNames = isEditing\n        ? alreadyTakenAttributes.filter((uid: Common.UID.Component) => uid !== compoUid)\n        : alreadyTakenAttributes;\n      const collectionNames = Object.values(components).map((component: any) => {\n        return component?.schema?.collectionName;\n      });\n\n      const currentCollectionName = createComponentCollectionName(\n        componentDisplayName,\n        componentCategory\n      );\n\n      const takenCollectionNames = isEditing\n        ? collectionNames.filter((collectionName) => collectionName !== currentCollectionName)\n        : collectionNames;\n\n      return createComponentSchema(\n        takenNames,\n        reservedNames.models,\n        componentCategory,\n        takenCollectionNames,\n        currentCollectionName\n      );\n    },\n    form: {\n      advanced() {\n        return {\n          sections: componentForm.advanced(),\n        };\n      },\n      base() {\n        return {\n          sections: componentForm.base(),\n        };\n      },\n    },\n  },\n  addComponentToDynamicZone: {\n    form: {\n      advanced() {\n        return dynamiczoneForm.advanced.default();\n      },\n      base({ data }: any) {\n        const isCreatingComponent = data?.createComponent ?? false;\n\n        if (isCreatingComponent) {\n          return dynamiczoneForm.base.createComponent();\n        }\n\n        return dynamiczoneForm.base.default();\n      },\n    },\n  },\n  editCategory: {\n    schema(allCategories: Array<any>, initialData: any) {\n      const allowedCategories = allCategories\n        .filter((cat) => cat !== initialData.name)\n        .map((cat) => cat.toLowerCase());\n\n      return createCategorySchema(allowedCategories);\n    },\n    form: {\n      advanced: () => ({ sections: [] }),\n      base() {\n        return categoryForm.base;\n      },\n    },\n  },\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { pluginId } from '../../pluginId';\n\nimport { initialState } from './reducer';\n\n/**\n * Direct selector to the formModal state domain\n */\nconst formModalDomain = () => (state: any) => state[`${pluginId}_formModal`] || initialState;\n\n/**\n * Other specific selectors\n */\n\n/**\n * Default selector used by formModal\n */\n\nexport const makeSelectFormModal = () =>\n  createSelector(formModalDomain(), (substate) => {\n    return substate;\n  });\n\nexport { formModalDomain };\n","import get from 'lodash/get';\n\nimport { getRelationType } from '../../../utils/getRelationType';\n\nimport type { AttributeType } from '../../../types';\nimport type { Schema, UID } from '@strapi/types';\n\nexport type EditableContentTypeSchema = {\n  kind: Schema.ContentTypeKind;\n  name: string;\n  attributes: AttributeType[];\n};\n\nexport type EditableContentTypeData = {\n  contentType: {\n    uid: UID.Any;\n    schema: EditableContentTypeSchema;\n  };\n};\n\ntype ModifiedData = {\n  kind: Schema.ContentTypeKind;\n};\n\nexport const canEditContentType = (data: Record<string, any>, modifiedData: ModifiedData) => {\n  const kind = get(data, ['contentType', 'schema', 'kind'], '');\n\n  // if kind isn't modified or content type is a single type, there is no need to check attributes.\n  if (kind === 'singleType' || kind === modifiedData.kind) {\n    return true;\n  }\n\n  const contentTypeAttributes = get(\n    data,\n    ['contentType', 'schema', 'attributes'],\n    []\n  ) as AttributeType[];\n\n  const relationAttributes = contentTypeAttributes.filter(({ relation, type, targetAttribute }) => {\n    const relationType = getRelationType(relation, targetAttribute);\n\n    return type === 'relation' && !['oneWay', 'manyWay'].includes(relationType || '');\n  });\n\n  return relationAttributes.length === 0;\n};\n","import type { IconByType } from '../../AttributeIcon';\nimport type { UID } from '@strapi/types';\n\nexport const getAttributesToDisplay = (\n  dataTarget = '',\n  targetUid: UID.Any,\n  nestedComponents: Array<UID.Any>\n): IconByType[][] => {\n  const defaultAttributes: IconByType[] = [\n    'text',\n    'boolean',\n    'blocks',\n    'json',\n    'number',\n    'email',\n    'date',\n    'password',\n    'media',\n    'enumeration',\n    'relation',\n    'richtext',\n  ];\n\n  const isPickingAttributeForAContentType = dataTarget === 'contentType';\n  const isNestedInAnotherComponent = nestedComponents.includes(targetUid);\n  const canAddComponentInAnotherComponent =\n    !isPickingAttributeForAContentType && !isNestedInAnotherComponent;\n\n  if (isPickingAttributeForAContentType) {\n    return [\n      // Insert UID before the last item (richtext)\n      [...defaultAttributes.slice(0, -1), 'uid', ...defaultAttributes.slice(-1)],\n      ['component', 'dynamiczone'],\n    ];\n  }\n\n  if (canAddComponentInAnotherComponent) {\n    return [defaultAttributes, ['component']];\n  }\n\n  return [defaultAttributes];\n};\n","export const getFormInputNames = (form: any) =>\n  form.reduce((acc: any, current: any) => {\n    const names = current.items.reduce((acc: any, current: any) => {\n      if (current.name) {\n        acc.push(current.name);\n      }\n\n      return acc;\n    }, []);\n\n    return [...acc, ...names];\n  }, []);\n","import { SyntheticEvent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  ModalBody,\n  ModalFooter,\n  ModalLayout,\n  Tab,\n  TabGroup,\n  TabPanel,\n  TabPanels,\n  Tabs,\n} from '@strapi/design-system';\nimport {\n  getYupInnerErrors,\n  useCustomFields,\n  useNotification,\n  useStrapiApp,\n  useTracking,\n} from '@strapi/helper-plugin';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEqual from 'lodash/isEqual';\nimport set from 'lodash/set';\nimport toLower from 'lodash/toLower';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { useDataManager } from '../../hooks/useDataManager';\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\nimport { pluginId } from '../../pluginId';\nimport { getTrad, isAllowedContentTypesForRelations } from '../../utils';\nimport { findAttribute } from '../../utils/findAttribute';\n// New compos\nimport { AllowedTypesSelect } from '../AllowedTypesSelect';\nimport { IconByType } from '../AttributeIcon';\nimport { AttributeOptions } from '../AttributeOptions/AttributeOptions';\nimport { BooleanDefaultValueSelect } from '../BooleanDefaultValueSelect';\nimport { BooleanRadioGroup } from '../BooleanRadioGroup';\nimport { CheckboxWithNumberField } from '../CheckboxWithNumberField';\nimport { ContentTypeRadioGroup } from '../ContentTypeRadioGroup';\nimport { CustomRadioGroup } from '../CustomRadioGroup';\nimport { DraftAndPublishToggle } from '../DraftAndPublishToggle';\nimport { FormModalEndActions } from '../FormModalEndActions';\nimport { FormModalHeader } from '../FormModalHeader';\nimport { FormModalSubHeader } from '../FormModalSubHeader';\nimport { IconPicker } from '../IconPicker/IconPicker';\nimport { PluralName } from '../PluralName';\nimport { Relation } from '../Relation/Relation';\nimport { SelectCategory } from '../SelectCategory';\nimport { SelectComponent } from '../SelectComponent';\nimport { SelectComponents } from '../SelectComponents';\nimport { SelectDateType } from '../SelectDateType';\nimport { SelectNumber } from '../SelectNumber';\nimport { SingularName } from '../SingularName';\nimport { TabForm } from '../TabForm';\nimport { TextareaEnum } from '../TextareaEnum';\n\nimport {\n  ON_CHANGE,\n  RESET_PROPS,\n  RESET_PROPS_AND_SAVE_CURRENT_DATA,\n  RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO,\n  RESET_PROPS_AND_SET_THE_FORM_FOR_ADDING_A_COMPO_TO_A_DZ,\n  SET_ATTRIBUTE_DATA_SCHEMA,\n  SET_CUSTOM_FIELD_DATA_SCHEMA,\n  SET_DATA_TO_EDIT,\n  SET_DYNAMIC_ZONE_DATA_SCHEMA,\n  SET_ERRORS,\n} from './constants';\nimport { forms } from './forms/forms';\nimport { makeSelectFormModal } from './selectors';\nimport { canEditContentType } from './utils/canEditContentType';\nimport { createComponentUid, createUid } from './utils/createUid';\nimport { getAttributesToDisplay } from './utils/getAttributesToDisplay';\nimport { getFormInputNames } from './utils/getFormInputNames';\n\nimport type { CustomFieldAttributeParams } from '../../contexts/DataManagerContext';\nimport type { AttributeType } from '../../types';\nimport type { Common } from '@strapi/types';\n\n/* eslint-disable indent */\n/* eslint-disable react/no-array-index-key */\nexport const FormModal = () => {\n  const {\n    onCloseModal,\n    onNavigateToChooseAttributeModal,\n    onNavigateToAddCompoToDZModal,\n    onNavigateToCreateComponentStep2,\n    actionType,\n    attributeName,\n    attributeType,\n    customFieldUid,\n    categoryName,\n    dynamicZoneTarget,\n    forTarget,\n    modalType,\n    isOpen,\n    kind,\n    step,\n    targetUid,\n    showBackLink,\n  } = useFormModalNavigation();\n  const customField = useCustomFields().get(customFieldUid);\n\n  const tabGroupRef = useRef<any>();\n\n  const formModalSelector = useMemo(makeSelectFormModal, []);\n  const dispatch = useDispatch();\n  const toggleNotification = useNotification();\n  const reducerState = useSelector((state) => formModalSelector(state), shallowEqual);\n  const { push } = useHistory();\n  const { trackUsage } = useTracking();\n  const { formatMessage } = useIntl();\n  const { getPlugin } = useStrapiApp();\n  const ctbPlugin = getPlugin(pluginId);\n  const ctbFormsAPI: any = ctbPlugin?.apis.forms;\n  const inputsFromPlugins = ctbFormsAPI.components.inputs;\n\n  const {\n    addAttribute,\n    addCustomFieldAttribute,\n    addCreatedComponentToDynamicZone,\n    allComponentsCategories,\n    changeDynamicZoneComponents,\n    contentTypes,\n    components,\n    createSchema,\n    deleteCategory,\n    deleteData,\n    editCategory,\n    editCustomFieldAttribute,\n    submitData,\n    modifiedData: allDataSchema,\n    nestedComponents,\n    setModifiedData,\n    sortedContentTypesList,\n    updateSchema,\n    reservedNames,\n  } = useDataManager();\n\n  const {\n    componentToCreate,\n    formErrors,\n    initialData,\n    isCreatingComponentWhileAddingAField,\n    modifiedData,\n  } = reducerState;\n\n  const pathToSchema =\n    forTarget === 'contentType' || forTarget === 'component' ? [forTarget] : [forTarget, targetUid];\n\n  useEffect(() => {\n    if (isOpen) {\n      const collectionTypesForRelation = sortedContentTypesList.filter(\n        isAllowedContentTypesForRelations\n      );\n\n      // Reset all the modification when opening the edit category modal\n      if (modalType === 'editCategory') {\n        setModifiedData();\n      }\n\n      if (actionType === 'edit' && modalType === 'attribute' && forTarget === 'contentType') {\n        trackUsage('willEditFieldOfContentType');\n      }\n\n      const pathToAttributes = [...pathToSchema, 'schema', 'attributes'];\n\n      // Case:\n      // the user opens the modal chooseAttributes\n      // selects dynamic zone => set the field name\n      // then goes to step 1 (the modal is addComponentToDynamicZone) and finally reloads the app.\n      // In this particular if the user tries to add components to the zone it will pop an error since the dz is unknown\n      const foundDynamicZoneTarget =\n        findAttribute(get(allDataSchema, pathToAttributes, []), dynamicZoneTarget) || null;\n\n      // Edit category\n      if (modalType === 'editCategory' && actionType === 'edit') {\n        dispatch({\n          type: SET_DATA_TO_EDIT,\n          modalType,\n          actionType,\n          data: {\n            name: categoryName,\n          },\n        });\n      }\n\n      // Create content type we need to add the default option draftAndPublish\n      if (modalType === 'contentType' && actionType === 'create') {\n        dispatch({\n          type: SET_DATA_TO_EDIT,\n          modalType,\n          actionType,\n          data: {\n            draftAndPublish: true,\n          },\n          pluginOptions: {},\n        });\n      }\n\n      // Edit content type\n      if (modalType === 'contentType' && actionType === 'edit') {\n        const {\n          displayName,\n          draftAndPublish,\n          kind,\n          pluginOptions,\n          pluralName,\n          reviewWorkflows,\n          singularName,\n        } = get(allDataSchema, [...pathToSchema, 'schema'], {\n          displayName: null,\n          pluginOptions: {},\n          singularName: null,\n          pluralName: null,\n        });\n\n        dispatch({\n          type: SET_DATA_TO_EDIT,\n          actionType,\n          modalType,\n          data: {\n            displayName,\n            draftAndPublish,\n            kind,\n            pluginOptions,\n            pluralName,\n            // because review-workflows is an EE feature the attribute does\n            // not always exist, but the component prop-types expect a boolean,\n            // so we have to ensure undefined is casted to false\n            reviewWorkflows: reviewWorkflows ?? false,\n            singularName,\n          },\n        });\n      }\n\n      // Edit component\n      if (modalType === 'component' && actionType === 'edit') {\n        const data = get(allDataSchema, pathToSchema, {});\n\n        dispatch({\n          type: SET_DATA_TO_EDIT,\n          actionType,\n          modalType,\n          data: {\n            displayName: data.schema.displayName,\n            category: data.category,\n            icon: data.schema.icon,\n          },\n        });\n      }\n\n      // Special case for the dynamic zone\n      if (modalType === 'addComponentToDynamicZone' && actionType === 'edit') {\n        const attributeToEdit = {\n          ...foundDynamicZoneTarget,\n          // We filter the available components\n          // Because this modal is only used for adding components\n          components: [],\n          name: dynamicZoneTarget,\n          createComponent: false,\n          componentToCreate: { type: 'component' },\n        };\n\n        dispatch({\n          type: SET_DYNAMIC_ZONE_DATA_SCHEMA,\n          attributeToEdit,\n        });\n      }\n\n      // Set the predefined data structure to create an attribute\n      if (attributeType) {\n        const attributeToEditNotFormatted = findAttribute(\n          get(allDataSchema, pathToAttributes, []),\n          attributeName\n        ) as AttributeType;\n        const attributeToEdit = {\n          ...attributeToEditNotFormatted,\n          name: attributeName,\n        };\n\n        // We need to set the repeatable key to false when editing a component\n        // The API doesn't send this info\n        if (attributeType === 'component' && actionType === 'edit') {\n          if (!attributeToEdit.repeatable) {\n            set(attributeToEdit, 'repeatable', false);\n          }\n        }\n\n        if (modalType === 'customField') {\n          dispatch({\n            type: SET_CUSTOM_FIELD_DATA_SCHEMA,\n            customField,\n            isEditing: actionType === 'edit',\n            modifiedDataToSetForEditing: attributeToEdit,\n            // NOTE: forTarget is used in the i18n middleware\n            forTarget,\n          });\n        } else {\n          dispatch({\n            type: SET_ATTRIBUTE_DATA_SCHEMA,\n            attributeType,\n            nameToSetForRelation: get(collectionTypesForRelation, ['0', 'title'], 'error'),\n            targetUid: get(collectionTypesForRelation, ['0', 'uid'], 'error'),\n            isEditing: actionType === 'edit',\n            modifiedDataToSetForEditing: attributeToEdit,\n            step,\n            forTarget,\n          });\n        }\n      }\n    } else {\n      dispatch({ type: RESET_PROPS });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    actionType,\n    attributeName,\n    attributeType,\n    categoryName,\n    dynamicZoneTarget,\n    forTarget,\n    isOpen,\n    modalType,\n  ]);\n\n  const isCreatingContentType = modalType === 'contentType';\n  const isCreatingComponent = modalType === 'component';\n  const isCreatingAttribute = modalType === 'attribute';\n  const isCreatingCustomFieldAttribute = modalType === 'customField';\n  const isComponentAttribute = attributeType === 'component' && isCreatingAttribute;\n  const isCreating = actionType === 'create';\n  const isCreatingComponentFromAView =\n    get(modifiedData, 'createComponent', false) || isCreatingComponentWhileAddingAField;\n  const isInFirstComponentStep = step === '1';\n  const isEditingCategory = modalType === 'editCategory';\n  const isPickingAttribute = modalType === 'chooseAttribute';\n  const uid = createUid(modifiedData.displayName || '');\n  const attributes = get(allDataSchema, [...pathToSchema, 'schema', 'attributes'], null) as {\n    name: string;\n  }[];\n\n  const checkFormValidity = async () => {\n    let schema;\n    const dataToValidate =\n      isCreatingComponentFromAView && step === '1'\n        ? get(modifiedData, 'componentToCreate', {})\n        : modifiedData;\n    // Check form validity for content type\n    if (isCreatingContentType) {\n      schema = forms.contentType.schema(\n        Object.keys(contentTypes),\n        actionType === 'edit',\n        // currentUID\n        get(allDataSchema, [...pathToSchema, 'uid'], null),\n        reservedNames,\n        ctbFormsAPI,\n        contentTypes\n      );\n\n      // Check form validity for component\n      // This is happening when the user click on the link from the left menu\n    } else if (isCreatingComponent) {\n      schema = forms.component.schema(\n        Object.keys(components) as Common.UID.Component[],\n        modifiedData.category || '',\n        reservedNames,\n        actionType === 'edit',\n        components,\n        modifiedData.displayName || '',\n        get(allDataSchema, [...pathToSchema, 'uid'], null)\n        // ctbFormsAPI\n      );\n    } else if (isCreatingCustomFieldAttribute) {\n      schema = forms.customField.schema({\n        schemaAttributes: get(allDataSchema, [...pathToSchema, 'schema', 'attributes'], []),\n        attributeType: customField!.type,\n        reservedNames,\n        schemaData: { modifiedData, initialData },\n        ctbFormsAPI,\n        customFieldValidator: customField!.options?.validator,\n      });\n\n      // Check for validity for creating a component\n      // This is happening when the user creates a component \"on the fly\"\n      // Since we temporarily store the component info in another object\n      // The data is set in the componentToCreate key\n    } else if (isComponentAttribute && isCreatingComponentFromAView && isInFirstComponentStep) {\n      schema = forms.component.schema(\n        Object.keys(components) as Common.UID.Component[],\n        get(modifiedData, 'componentToCreate.category', ''),\n        reservedNames,\n        actionType === 'edit',\n        components,\n        modifiedData.componentToCreate.displayName || ''\n      );\n\n      // Check form validity for creating a 'common attribute'\n      // We need to make sure that it is independent from the step\n    } else if (isCreatingAttribute && !isInFirstComponentStep) {\n      const type = attributeType === 'relation' ? 'relation' : modifiedData.type;\n\n      let alreadyTakenTargetContentTypeAttributes = [];\n\n      if (type === 'relation') {\n        const targetContentTypeUID = get(modifiedData, ['target'], null);\n\n        const targetContentTypeAttributes = get(\n          contentTypes,\n          [targetContentTypeUID, 'schema', 'attributes'],\n          []\n        );\n\n        // Create an array with all the targetContentType attributes name\n        // in order to prevent the user from creating a relation with a targetAttribute\n        // that may exist in the other content type\n        alreadyTakenTargetContentTypeAttributes = targetContentTypeAttributes.filter(\n          ({ name: attrName }: { name: string }) => {\n            // Keep all the target content type attributes when creating a relation\n            if (actionType !== 'edit') {\n              return true;\n            }\n\n            // Remove the already created one when editing\n            return attrName !== initialData.targetAttribute;\n          }\n        );\n      }\n      schema = forms.attribute.schema(\n        get(allDataSchema, pathToSchema, {}),\n        type,\n        reservedNames,\n        alreadyTakenTargetContentTypeAttributes,\n        { modifiedData, initialData },\n        ctbFormsAPI\n      );\n    } else if (isEditingCategory) {\n      schema = forms.editCategory.schema(allComponentsCategories, initialData);\n    } else {\n      // The user is either in the addComponentToDynamicZone modal or\n      // in step 1 of the add component (modalType=attribute&attributeType=component) but not creating a component\n      // eslint-disable-next-line no-lonely-if\n      if (isInFirstComponentStep && isCreatingComponentFromAView) {\n        schema = forms.component.schema(\n          Object.keys(components) as Common.UID.Component[],\n          get(modifiedData, 'componentToCreate.category', ''),\n          reservedNames,\n          actionType === 'edit',\n          components,\n          modifiedData.componentToCreate.displayName || ''\n        );\n      } else {\n        // The form is valid\n        // The case here is being in the addComponentToDynamicZone modal and not creating a component\n        return;\n      }\n    }\n\n    await schema.validate(dataToValidate, { abortEarly: false });\n  };\n\n  const handleChange = useCallback(\n    ({\n      target: { name, value, type, ...rest },\n    }: {\n      target: { name: string; value: string; type: string };\n    }) => {\n      const namesThatCanResetToNullValue = [\n        'enumName',\n        'max',\n        'min',\n        'maxLength',\n        'minLength',\n        'regex',\n        'default',\n      ];\n\n      let val;\n\n      if (namesThatCanResetToNullValue.includes(name) && value === '') {\n        val = null;\n      } else {\n        val = value;\n      }\n\n      const clonedErrors = Object.assign({}, formErrors);\n\n      // Reset min error when modifying the max\n      if (name === 'max') {\n        delete clonedErrors.min;\n      }\n\n      // Same here\n      if (name === 'maxLength') {\n        delete clonedErrors.minLength;\n      }\n\n      // Since the onBlur is deactivated we remove the errors directly when changing an input\n      delete clonedErrors[name];\n\n      dispatch({\n        type: SET_ERRORS,\n        errors: clonedErrors,\n      });\n\n      dispatch({\n        type: ON_CHANGE,\n        keys: name.split('.'),\n        value: val,\n        ...rest,\n      });\n    },\n    [dispatch, formErrors]\n  );\n\n  const handleSubmit = async (e: SyntheticEvent, shouldContinue = isCreating) => {\n    e.preventDefault();\n\n    try {\n      await checkFormValidity();\n\n      sendButtonAddMoreFieldEvent(shouldContinue);\n      const ctTargetUid = forTarget === 'components' ? targetUid : uid;\n\n      if (isCreatingContentType) {\n        // Create the content type schema\n        if (isCreating) {\n          createSchema({ ...modifiedData, kind }, modalType, uid);\n          // Redirect the user to the created content type\n          push({ pathname: `/plugins/${pluginId}/content-types/${uid}` });\n\n          // Navigate to the choose attribute modal\n          onNavigateToChooseAttributeModal({\n            forTarget,\n            targetUid: ctTargetUid,\n          });\n        } else {\n          // We cannot switch from collection type to single when the modal is making relations other than oneWay or manyWay\n          if (canEditContentType(allDataSchema, modifiedData)) {\n            onCloseModal();\n\n            submitData(modifiedData);\n          } else {\n            toggleNotification({\n              type: 'warning',\n              message: { id: 'notification.contentType.relations.conflict' },\n            });\n          }\n\n          return;\n        }\n        // We are creating a component using the component modal from the left menu\n      } else if (modalType === 'component') {\n        if (isCreating) {\n          // Create the component schema\n          const componentUid = createComponentUid(modifiedData.displayName, modifiedData.category);\n          const { category, ...rest } = modifiedData;\n\n          createSchema(rest, 'component', componentUid, category);\n\n          // Redirect the user to the created component\n          push({\n            pathname: `/plugins/${pluginId}/component-categories/${category}/${componentUid}`,\n          });\n\n          // Navigate to the choose attribute modal\n          onNavigateToChooseAttributeModal({\n            forTarget,\n            targetUid: componentUid,\n          });\n        } else {\n          updateSchema(modifiedData, modalType, targetUid);\n\n          // Close the modal\n          onCloseModal();\n\n          return;\n        }\n      } else if (isEditingCategory) {\n        if (toLower(initialData.name) === toLower(modifiedData.name)) {\n          // Close the modal\n          onCloseModal();\n\n          return;\n        }\n\n        editCategory(initialData.name, modifiedData);\n\n        return;\n        // Add/edit a field to a content type\n        // Add/edit a field to a created component (the end modal is not step 2)\n      } else if (isCreatingCustomFieldAttribute) {\n        const customFieldAttributeUpdate: CustomFieldAttributeParams = {\n          attributeToSet: { ...modifiedData, customField: customFieldUid },\n          forTarget,\n          targetUid,\n          initialAttribute: initialData,\n        };\n\n        if (actionType === 'edit') {\n          editCustomFieldAttribute(customFieldAttributeUpdate);\n        } else {\n          addCustomFieldAttribute(customFieldAttributeUpdate);\n        }\n\n        if (shouldContinue) {\n          onNavigateToChooseAttributeModal({\n            forTarget,\n            targetUid: ctTargetUid,\n          });\n        } else {\n          onCloseModal();\n        }\n\n        return;\n      } else if (isCreatingAttribute && !isCreatingComponentFromAView) {\n        const isDynamicZoneAttribute = attributeType === 'dynamiczone';\n\n        // The user is creating a DZ (he had entered the name of the dz)\n        if (isDynamicZoneAttribute) {\n          addAttribute(modifiedData, forTarget, targetUid, actionType === 'edit', initialData);\n\n          // Adding a component to a dynamiczone is not the same logic as creating a simple field\n          // so the search is different\n          if (isCreating) {\n            // Step 1 of adding a component to a DZ, the user has the option to create a component\n            dispatch({\n              type: RESET_PROPS_AND_SET_THE_FORM_FOR_ADDING_A_COMPO_TO_A_DZ,\n            });\n\n            if (tabGroupRef.current !== undefined) {\n              tabGroupRef.current._handlers.setSelectedTabIndex(0);\n            }\n\n            onNavigateToAddCompoToDZModal({ dynamicZoneTarget: modifiedData.name });\n          } else {\n            onCloseModal();\n          }\n\n          return;\n        }\n\n        // Normal fields like boolean relations or dynamic zone\n        if (!isComponentAttribute) {\n          addAttribute(modifiedData, forTarget, targetUid, actionType === 'edit', initialData);\n\n          if (shouldContinue) {\n            onNavigateToChooseAttributeModal({\n              forTarget,\n              targetUid: ctTargetUid,\n            });\n          } else {\n            onCloseModal();\n          }\n\n          return;\n\n          // Adding an existing component\n        }\n        // eslint-disable-next-line no-lonely-if\n        if (isInFirstComponentStep) {\n          // Navigate the user to step 2\n          onNavigateToCreateComponentStep2();\n\n          // Clear the reducer and prepare the modified data\n          // This way we don't have to add some logic to re-run the useEffect\n          // The first step is either needed to create a component or just to navigate\n          // To the modal for adding a \"common field\"\n          dispatch({\n            type: RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO,\n            forTarget,\n          });\n\n          // We don't want all the props to be reset\n          return;\n\n          // Here we are in step 2\n          // The step 2 is also use to edit an attribute that is a component\n        }\n\n        addAttribute(\n          modifiedData,\n          forTarget,\n          targetUid,\n          // This change the dispatched type\n          // either 'EDIT_ATTRIBUTE' or 'ADD_ATTRIBUTE' in the DataManagerProvider\n          actionType === 'edit',\n          // This is for the edit part\n          initialData,\n          // Passing true will add the component to the components object\n          // This way we can add fields to the added component (if it wasn't there already)\n          true\n        );\n\n        if (shouldContinue) {\n          onNavigateToChooseAttributeModal({\n            forTarget,\n            targetUid,\n          });\n        } else {\n          onCloseModal();\n        }\n\n        // We don't need to end the loop here we want the reducer to be reinitialized\n\n        // Logic for creating a component without clicking on the link in\n        // the left menu\n        // We need to separate the logic otherwise the component would be created\n        // even though the user didn't set any field\n        // We need to prevent the component from being created if the user closes the modal at step 2 without any submission\n      } else if (isCreatingAttribute && isCreatingComponentFromAView) {\n        // Step 1\n        if (isInFirstComponentStep) {\n          // Here the search could be refactored since it is the same as the case from above\n          // Navigate the user to step 2\n\n          trackUsage('willCreateComponentFromAttributesModal');\n\n          // Here we clear the reducer state but we also keep the created component\n          // If we were to create the component before\n          dispatch({\n            type: RESET_PROPS_AND_SAVE_CURRENT_DATA,\n            forTarget,\n          });\n\n          onNavigateToCreateComponentStep2();\n\n          // Terminate because we don't want the reducer to be entirely reset\n          return;\n\n          // Step 2 of creating a component (which is setting the attribute name in the parent's schema)\n        }\n        // We are destructuring because the modifiedData object doesn't have the appropriate format to create a field\n        const { category, type, ...rest } = componentToCreate;\n        // Create a the component temp UID\n        // This could be refactored but I think it's more understandable to separate the logic\n        const componentUid = createComponentUid(componentToCreate.displayName, category);\n        // Create the component first and add it to the components data\n        createSchema(\n          // Component data\n          rest,\n          // Type will always be component\n          // It will dispatch the CREATE_COMPONENT_SCHEMA action\n          // So the component will be added in the main components object\n          // This might not be needed if we don't allow navigation between entries while editing\n          type,\n          componentUid,\n          category,\n          // This will add the created component in the datamanager modifiedData components key\n          // Like explained above we will be able to modify the created component structure\n          isCreatingComponentFromAView\n        );\n        // Add the field to the schema\n        addAttribute(modifiedData, forTarget, targetUid, false);\n\n        dispatch({ type: RESET_PROPS });\n\n        // Open modal attribute for adding attr to component\n        if (shouldContinue) {\n          onNavigateToChooseAttributeModal({ forTarget: 'components', targetUid: componentUid });\n        } else {\n          onCloseModal();\n        }\n\n        return;\n      } else {\n        // The modal is addComponentToDynamicZone\n        if (isInFirstComponentStep) {\n          if (isCreatingComponentFromAView) {\n            const { category, type, ...rest } = modifiedData.componentToCreate;\n            const componentUid = createComponentUid(\n              modifiedData.componentToCreate.displayName,\n              category\n            );\n            // Create the component first and add it to the components data\n            createSchema(\n              // Component data\n              rest,\n              // Type will always be component\n              // It will dispatch the CREATE_COMPONENT_SCHEMA action\n              // So the component will be added in the main components object\n              // This might not be needed if we don't allow navigation between entries while editing\n              type,\n              componentUid,\n              category,\n              // This will add the created component in the datamanager modifiedData components key\n              // Like explained above we will be able to modify the created component structure\n              isCreatingComponentFromAView\n            );\n            // Add the created component to the DZ\n            // We don't want to remove the old ones\n            addCreatedComponentToDynamicZone(dynamicZoneTarget, [componentUid]);\n\n            // The Dynamic Zone and the component is created\n            // Open the modal to add fields to the created component\n            onNavigateToChooseAttributeModal({ forTarget: 'components', targetUid: componentUid });\n          } else {\n            // Add the components to the DZ\n            changeDynamicZoneComponents(dynamicZoneTarget, modifiedData.components);\n\n            onCloseModal();\n          }\n        } else {\n          console.error('This case is not handled');\n        }\n\n        return;\n      }\n\n      dispatch({\n        type: RESET_PROPS,\n      });\n    } catch (err: any) {\n      const errors = getYupInnerErrors(err);\n\n      dispatch({\n        type: SET_ERRORS,\n        errors,\n      });\n    }\n  };\n\n  const handleConfirmClose = () => {\n    // eslint-disable-next-line no-alert\n    const confirm = window.confirm(\n      formatMessage({\n        id: 'window.confirm.close-modal.file',\n        defaultMessage: 'Are you sure? Your changes will be lost.',\n      })\n    );\n\n    if (confirm) {\n      onCloseModal();\n\n      dispatch({\n        type: RESET_PROPS,\n      });\n    }\n  };\n\n  const handleClosed = () => {\n    // Close the modal\n    if (!isEqual(modifiedData, initialData)) {\n      handleConfirmClose();\n    } else {\n      onCloseModal();\n      // Reset the reducer\n      dispatch({\n        type: RESET_PROPS,\n      });\n    }\n  };\n\n  const sendAdvancedTabEvent = (tab: string) => {\n    if (tab !== 'advanced') {\n      return;\n    }\n\n    if (isCreatingContentType) {\n      trackUsage('didSelectContentTypeSettings');\n\n      return;\n    }\n\n    if (forTarget === 'contentType') {\n      trackUsage('didSelectContentTypeFieldSettings');\n    }\n  };\n\n  const sendButtonAddMoreFieldEvent = (shouldContinue: boolean) => {\n    if (\n      modalType === 'attribute' &&\n      forTarget === 'contentType' &&\n      attributeType !== 'dynamiczone' &&\n      shouldContinue\n    ) {\n      trackUsage('willAddMoreFieldToContentType');\n    }\n  };\n\n  const shouldDisableAdvancedTab = () => {\n    if (modalType === 'editCategory') {\n      return true;\n    }\n\n    if (modalType === 'component') {\n      return true;\n    }\n\n    if (has(modifiedData, 'createComponent')) {\n      return true;\n    }\n\n    return false;\n  };\n\n  // Display data for the attributes picker modal\n  const displayedAttributes = getAttributesToDisplay(\n    forTarget,\n    targetUid,\n    // We need the nested components so we know when to remove the component option\n    nestedComponents\n  );\n\n  if (!isOpen) {\n    return null;\n  }\n\n  if (!modalType) {\n    return null;\n  }\n\n  const formToDisplay = get(forms, [modalType, 'form'], {\n    advanced: () => ({\n      sections: [],\n    }),\n    base: () => ({\n      sections: [],\n    }),\n  });\n\n  const isAddingAComponentToAnotherComponent =\n    forTarget === 'components' || forTarget === 'component';\n\n  const genericInputProps = {\n    customInputs: {\n      'allowed-types-select': AllowedTypesSelect,\n      'boolean-radio-group': BooleanRadioGroup,\n      'checkbox-with-number-field': CheckboxWithNumberField,\n      'icon-picker': IconPicker,\n      'content-type-radio-group': ContentTypeRadioGroup,\n      'radio-group': CustomRadioGroup,\n      relation: Relation,\n      'select-category': SelectCategory,\n      'select-component': SelectComponent,\n      'select-components': SelectComponents,\n      'select-default-boolean': BooleanDefaultValueSelect,\n      'select-number': SelectNumber,\n      'select-date': SelectDateType,\n      'toggle-draft-publish': DraftAndPublishToggle,\n      'text-plural': PluralName,\n      'text-singular': SingularName,\n      'textarea-enum': TextareaEnum,\n      ...inputsFromPlugins,\n    },\n    componentToCreate,\n    dynamicZoneTarget,\n    formErrors,\n    isAddingAComponentToAnotherComponent,\n    isCreatingComponentWhileAddingAField,\n    mainBoxHeader: get(allDataSchema, [...pathToSchema, 'schema', 'displayName'], ''),\n    modifiedData,\n    naturePickerType: forTarget,\n    isCreating,\n    targetUid,\n    forTarget,\n  };\n\n  const advancedForm = formToDisplay.advanced({\n    data: modifiedData,\n    type: attributeType,\n    step,\n    actionType,\n    attributes,\n    extensions: ctbFormsAPI,\n    forTarget,\n    contentTypeSchema: allDataSchema.contentType || {},\n    customField,\n  }).sections;\n  const baseForm = formToDisplay.base({\n    data: modifiedData,\n    type: attributeType,\n    step,\n    actionType,\n    attributes,\n    extensions: ctbFormsAPI,\n    forTarget,\n    contentTypeSchema: allDataSchema.contentType || {},\n    customField,\n  }).sections;\n\n  const baseFormInputNames = getFormInputNames(baseForm);\n\n  const advancedFormInputNames = getFormInputNames(advancedForm);\n  const doesBaseFormHasError = Object.keys(formErrors).some((key) =>\n    baseFormInputNames.includes(key)\n  );\n\n  const doesAdvancedFormHasError = Object.keys(formErrors).some((key) =>\n    advancedFormInputNames.includes(key)\n  );\n\n  const schemaKind = get(contentTypes, [targetUid, 'schema', 'kind']);\n\n  const checkIsEditingFieldName = () =>\n    actionType === 'edit' && attributes.every(({ name }) => name !== modifiedData?.name);\n\n  const handleClickFinish = () => {\n    if (checkIsEditingFieldName()) {\n      trackUsage('didEditFieldNameOnContentType');\n    }\n  };\n\n  return (\n    <ModalLayout onClose={handleClosed} labelledBy=\"title\">\n      <FormModalHeader\n        actionType={actionType}\n        attributeName={attributeName}\n        categoryName={categoryName}\n        contentTypeKind={kind as IconByType}\n        dynamicZoneTarget={dynamicZoneTarget}\n        modalType={modalType}\n        forTarget={forTarget}\n        targetUid={targetUid}\n        attributeType={attributeType as IconByType}\n        customFieldUid={customFieldUid}\n        showBackLink={showBackLink}\n      />\n      {isPickingAttribute && (\n        <AttributeOptions\n          attributes={displayedAttributes}\n          forTarget={forTarget}\n          kind={schemaKind || 'collectionType'}\n        />\n      )}\n      {!isPickingAttribute && (\n        <form onSubmit={handleSubmit}>\n          <ModalBody>\n            <TabGroup\n              label=\"todo\"\n              id=\"tabs\"\n              variant=\"simple\"\n              ref={tabGroupRef}\n              onTabChange={(selectedTab) => {\n                if (selectedTab === 1) {\n                  sendAdvancedTabEvent('advanced');\n                }\n              }}\n            >\n              <Flex justifyContent=\"space-between\">\n                <FormModalSubHeader\n                  actionType={actionType}\n                  forTarget={forTarget}\n                  kind={kind}\n                  step={step}\n                  modalType={modalType}\n                  attributeType={attributeType}\n                  attributeName={attributeName}\n                  customField={customField}\n                />\n                <Tabs>\n                  <Tab hasError={doesBaseFormHasError}>\n                    {formatMessage({\n                      id: getTrad('popUpForm.navContainer.base'),\n                      defaultMessage: 'Basic settings',\n                    })}\n                  </Tab>\n                  <Tab\n                    hasError={doesAdvancedFormHasError}\n                    // TODO put aria-disabled\n                    disabled={shouldDisableAdvancedTab()}\n                  >\n                    {formatMessage({\n                      id: getTrad('popUpForm.navContainer.advanced'),\n                      defaultMessage: 'Advanced settings',\n                    })}\n                  </Tab>\n                </Tabs>\n              </Flex>\n\n              <Divider />\n\n              <Box paddingTop={6}>\n                <TabPanels>\n                  <TabPanel>\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                      <TabForm\n                        form={baseForm}\n                        formErrors={formErrors}\n                        genericInputProps={genericInputProps}\n                        modifiedData={modifiedData}\n                        onChange={handleChange}\n                      />\n                    </Flex>\n                  </TabPanel>\n                  <TabPanel>\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                      <TabForm\n                        form={advancedForm}\n                        formErrors={formErrors}\n                        genericInputProps={genericInputProps}\n                        modifiedData={modifiedData}\n                        onChange={handleChange}\n                      />\n                    </Flex>\n                  </TabPanel>\n                </TabPanels>\n              </Box>\n            </TabGroup>\n          </ModalBody>\n          <ModalFooter\n            endActions={\n              <FormModalEndActions\n                deleteCategory={deleteCategory}\n                deleteContentType={deleteData}\n                deleteComponent={deleteData}\n                categoryName={initialData.name}\n                isAttributeModal={modalType === 'attribute'}\n                isCustomFieldModal={modalType === 'customField'}\n                isComponentToDzModal={modalType === 'addComponentToDynamicZone'}\n                isComponentAttribute={attributeType === 'component'}\n                isComponentModal={modalType === 'component'}\n                isContentTypeModal={modalType === 'contentType'}\n                isCreatingComponent={actionType === 'create'}\n                isCreatingDz={actionType === 'create'}\n                isCreatingComponentAttribute={modifiedData.createComponent || false}\n                isCreatingComponentInDz={modifiedData.createComponent || false}\n                isCreatingComponentWhileAddingAField={isCreatingComponentWhileAddingAField}\n                isCreatingContentType={actionType === 'create'}\n                isEditingAttribute={actionType === 'edit'}\n                isDzAttribute={attributeType === 'dynamiczone'}\n                isEditingCategory={modalType === 'editCategory'}\n                isInFirstComponentStep={step === '1'}\n                onSubmitAddComponentAttribute={handleSubmit}\n                onSubmitAddComponentToDz={handleSubmit}\n                onSubmitCreateComponent={handleSubmit}\n                onSubmitCreateContentType={handleSubmit}\n                onSubmitCreateDz={handleSubmit}\n                onSubmitEditAttribute={handleSubmit}\n                onSubmitEditCategory={handleSubmit}\n                onSubmitEditComponent={handleSubmit}\n                onSubmitEditContentType={handleSubmit}\n                onSubmitEditCustomFieldAttribute={handleSubmit}\n                onSubmitEditDz={handleSubmit}\n                onClickFinish={handleClickFinish}\n              />\n            }\n            startActions={\n              <Button variant=\"tertiary\" onClick={handleClosed}>\n                {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n              </Button>\n            }\n          />\n        </form>\n      )}\n    </ModalLayout>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { pluginId } from '../../pluginId';\n\nimport { initialState } from './reducer';\n\nimport type { DataManagerStateType } from '../../types';\n\n/**\n * Direct selector to the dataManagerProvider state domain\n */\nconst dataManagerProviderDomain = () => (state: DataManagerStateType) =>\n  state[`${pluginId}_dataManagerProvider`] || initialState;\n\n/**\n * Other specific selectors\n */\n\n/**\n * Default selector used by dataManagerProvider\n */\n\nconst makeSelectDataManagerProvider = () =>\n  createSelector(dataManagerProviderDomain(), (substate) => {\n    return substate;\n  });\n\nexport { makeSelectDataManagerProvider, dataManagerProviderDomain };\n","import camelCase from 'lodash/camelCase';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport sortBy from 'lodash/sortBy';\n\nimport { pluginId } from '../../../pluginId';\nimport { makeUnique } from '../../../utils/makeUnique';\n\nimport type { Components, Component, AttributeType, ContentTypes } from '../../../types';\nimport type { UID } from '@strapi/types';\n\nconst getCreatedAndModifiedComponents = (\n  allComponents: Components,\n  initialComponents: Components\n) => {\n  const componentUIDsToReturn = Object.keys(allComponents).filter((compoUid) => {\n    const currentCompo = get(allComponents, compoUid, {});\n    const initialCompo = get(initialComponents, compoUid, {});\n    const hasComponentBeenCreated = get(currentCompo, ['isTemporary'], false);\n    const hasComponentBeenModified = !isEqual(currentCompo, initialCompo);\n\n    return hasComponentBeenCreated || hasComponentBeenModified;\n  });\n\n  return makeUnique(componentUIDsToReturn);\n};\n\nconst formatComponent = (component: Component | Record<string, any>, mainDataUID: UID.Any) => {\n  const formattedAttributes = formatAttributes(\n    get(component, 'schema.attributes', []),\n    mainDataUID\n  );\n\n  // Set tmpUID if the component has just been created\n  // Keep the uid if the component already exists\n  const compoUID = get(component, 'isTemporary', false)\n    ? { tmpUID: component.uid }\n    : { uid: component.uid };\n\n  const formattedComponent = Object.assign(\n    {},\n    compoUID,\n    { category: component.category },\n    // Omit the attributes since we want to format them\n    omit(component.schema, 'attributes'),\n    // Add the formatted attributes\n    { attributes: formattedAttributes }\n  );\n\n  return formattedComponent;\n};\n\nconst formatMainDataType = (data: any, isComponent = false) => {\n  const mainDataUID = get(data, 'uid', null);\n\n  const formattedAttributes = formatAttributes(get(data, 'schema.attributes', []), mainDataUID);\n  const initObj = isComponent ? { category: get(data, 'category', '') } : {};\n\n  const formattedContentType = Object.assign(initObj, omit(data.schema, 'attributes'), {\n    attributes: formattedAttributes,\n  });\n\n  delete formattedContentType.uid;\n  delete formattedContentType.isTemporary;\n  delete formattedContentType.visible;\n  delete formattedContentType.restrictRelationsTo;\n\n  return formattedContentType;\n};\n\n/**\n *\n * @param {Object} attributes\n * @param {String} mainDataUID uid of the main data type\n */\nconst formatAttributes = (attributes: AttributeType[], mainDataUID: UID.Any) => {\n  return attributes.reduce((acc: Record<string, AttributeType>, { name, ...rest }) => {\n    const currentAttribute = rest;\n    const hasARelationWithMainDataUID = currentAttribute.target === mainDataUID;\n    const isRelationType = currentAttribute.type === 'relation';\n    const currentTargetAttribute = get(currentAttribute, 'targetAttribute', null);\n\n    if (!hasARelationWithMainDataUID) {\n      if (isRelationType) {\n        const relationAttr = Object.assign({}, currentAttribute, {\n          targetAttribute: formatRelationTargetAttribute(currentTargetAttribute),\n        });\n\n        acc[name as string] = removeNullKeys(relationAttr) as AttributeType;\n      } else {\n        acc[name as string] = removeNullKeys(currentAttribute) as AttributeType;\n      }\n    }\n\n    if (hasARelationWithMainDataUID) {\n      const target = currentAttribute.target;\n\n      const formattedRelationAttribute = Object.assign({}, currentAttribute, {\n        target,\n        targetAttribute: formatRelationTargetAttribute(currentTargetAttribute),\n      });\n\n      acc[name as string] = removeNullKeys(formattedRelationAttribute) as AttributeType;\n    }\n\n    if (currentAttribute.customField) {\n      const customFieldAttribute = { ...currentAttribute, type: 'customField' };\n      acc[name as string] = removeNullKeys(customFieldAttribute) as AttributeType;\n    }\n\n    return acc;\n  }, {});\n};\n\nconst formatRelationTargetAttribute = (targetAttribute: string | null) =>\n  targetAttribute === '-' ? null : targetAttribute;\n\nconst removeNullKeys = (obj: Record<string, any>) =>\n  Object.keys(obj).reduce((acc: Record<string, any>, current) => {\n    if (obj[current] !== null && current !== 'plugin') {\n      acc[current] = obj[current];\n    }\n\n    return acc;\n  }, {});\n\nconst getComponentsToPost = (\n  allComponents: Components,\n  initialComponents: Components,\n  mainDataUID: UID.Any\n) => {\n  const componentsToFormat = getCreatedAndModifiedComponents(allComponents, initialComponents);\n  const formattedComponents = componentsToFormat.map((compoUID) => {\n    const currentCompo = get(allComponents, compoUID, {});\n    const formattedComponent = formatComponent(currentCompo, mainDataUID);\n\n    return formattedComponent;\n  });\n\n  return formattedComponents;\n};\n\nconst sortContentType = (types: ContentTypes) =>\n  sortBy(\n    Object.keys(types)\n      .map((uid) => ({\n        visible: types[uid].schema.visible,\n        name: uid,\n        title: types[uid].schema.displayName,\n        plugin: types[uid].plugin || null,\n        uid,\n        to: `/plugins/${pluginId}/content-types/${uid}`,\n        kind: types[uid].schema.kind,\n        restrictRelationsTo: types[uid].schema.restrictRelationsTo,\n      }))\n      .filter((obj) => obj !== null),\n    (obj) => camelCase(obj.title)\n  );\n\nexport {\n  formatComponent,\n  formatMainDataType,\n  getComponentsToPost,\n  getCreatedAndModifiedComponents,\n  sortContentType,\n};\n","import { ContentType } from '../../../types';\n\nexport const createDataObject = (arr: ContentType[]) =>\n  arr.reduce((acc: Record<string, ContentType>, current) => {\n    acc[current.uid!] = current;\n\n    return acc;\n  }, {});\n","import get from 'lodash/get';\n\nimport type { ContentType, Components } from '../../../types';\nimport type { UID } from '@strapi/types';\n\nexport const createModifiedDataSchema = (\n  contentTypeSchema: ContentType,\n  retrievedComponents: UID.Component[],\n  allComponentsSchema: Components,\n  isInContentTypeView: boolean\n) => {\n  const componentsAssociatedToContentType = retrievedComponents.reduce((acc: any, current) => {\n    const componentSchema = get(allComponentsSchema, current, {});\n\n    acc[current] = componentSchema;\n\n    return acc;\n  }, {});\n  const keyName = isInContentTypeView ? 'contentType' : 'component';\n  const schema = {\n    [keyName]: contentTypeSchema,\n    components: componentsAssociatedToContentType,\n  };\n\n  return schema;\n};\n","import { AttributeType } from '../../../types';\n\n/**\n * Format the attributes to array instead of an object\n */\nexport const formatSchemas = (schemas: Record<string, any>) => {\n  return Object.keys(schemas).reduce((acc: any, current) => {\n    const schema = schemas[current].schema;\n\n    acc[current] = {\n      ...schemas[current],\n      schema: { ...schema, attributes: toAttributesArray(schema.attributes) },\n    };\n\n    return acc;\n  }, {});\n};\n\nexport const toAttributesArray = (attributes: Record<string, AttributeType>) => {\n  return Object.keys(attributes).reduce((acc: AttributeType[], current: any) => {\n    acc.push({ ...attributes[current], name: current });\n\n    return acc;\n  }, []);\n};\n","import get from 'lodash/get';\n\nimport { makeUnique } from '../../../utils/makeUnique';\n\nimport type { Component, AttributeType, Components } from '../../../types';\nimport type { UID } from '@strapi/types';\n\nconst retrieveComponentsThatHaveComponents = (allComponents: Components) => {\n  const componentsThatHaveNestedComponents = Object.keys(allComponents).reduce(\n    (acc: UID.Component[], current) => {\n      const currentComponent = get(allComponents, [current]);\n      const uid = currentComponent.uid;\n\n      if (doesComponentHaveAComponentField(currentComponent)) {\n        acc.push(uid);\n      }\n\n      return acc;\n    },\n    []\n  );\n\n  return makeUnique(componentsThatHaveNestedComponents);\n};\n\nconst doesComponentHaveAComponentField = (component: Component) => {\n  const attributes = get(component, ['schema', 'attributes'], []) as AttributeType[];\n\n  return attributes.some((attribute) => {\n    const { type } = attribute;\n\n    return type === 'component';\n  });\n};\n\nexport { doesComponentHaveAComponentField, retrieveComponentsThatHaveComponents };\n","import { makeUnique } from '../../../utils/makeUnique';\n\nexport const retrieveNestedComponents = (appComponents: any) => {\n  const nestedComponents = Object.keys(appComponents).reduce((acc: any, current) => {\n    const componentAttributes = appComponents?.[current]?.schema?.attributes ?? [];\n    const currentComponentNestedCompos = getComponentsFromComponent(componentAttributes);\n\n    return [...acc, ...currentComponentNestedCompos];\n  }, []);\n\n  return makeUnique(nestedComponents);\n};\n\nconst getComponentsFromComponent = (componentAttributes: any) => {\n  return componentAttributes.reduce((acc: any, current: any) => {\n    const { type, component } = current;\n\n    if (type === 'component') {\n      acc.push(component);\n    }\n\n    return acc;\n  }, []);\n};\n","import get from 'lodash/get';\n\nimport { makeUnique } from '../../../utils/makeUnique';\n\nexport const retrieveSpecificInfoFromComponents = (allComponents: any, keysToRetrieve: any) => {\n  const allData = Object.keys(allComponents).map((compo) => {\n    return get(allComponents, [compo, ...keysToRetrieve], '');\n  });\n\n  return makeUnique(allData);\n};\n","const SERVER_HAS_NOT_BEEN_KILLED_MESSAGE = 'did-not-kill-server';\nconst SERVER_HAS_BEEN_KILLED_MESSAGE = 'server is down';\n\n/**\n * Server restart watcher\n * Sends an HEAD method to check if the server has been shut down correctly\n * and then pings until it's back on\n */\nexport function serverRestartWatcher(response: any, didShutDownServer?: boolean) {\n  return new Promise((resolve) => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    fetch(`${window.strapi.backendURL}/_health`, {\n      method: 'HEAD',\n      mode: 'no-cors',\n      headers: {\n        'Content-Type': 'application/json',\n        'Keep-Alive': 'false',\n      },\n    })\n      .then((res) => {\n        if (res.status >= 400) {\n          throw new Error(SERVER_HAS_BEEN_KILLED_MESSAGE);\n        }\n\n        if (!didShutDownServer) {\n          throw new Error(SERVER_HAS_NOT_BEEN_KILLED_MESSAGE);\n        }\n\n        resolve(response);\n      })\n      .catch((err) => {\n        setTimeout(() => {\n          return serverRestartWatcher(\n            response,\n            err.message !== SERVER_HAS_NOT_BEEN_KILLED_MESSAGE\n          ).then(resolve);\n        }, 100);\n      });\n  });\n}\n","export const validateSchema = (schema: any) => {\n  const dynamicZoneAttributes = Object.values(schema.attributes).filter(\n    (attribute: any) => attribute.type === 'dynamiczone'\n  );\n\n  return dynamicZoneAttributes.every(\n    (attribute: any) => Array.isArray(attribute.components) && attribute.components.length > 0\n  );\n};\n","import { memo, useEffect, useMemo, useRef, ReactNode } from 'react';\n\nimport {\n  LoadingIndicatorPage,\n  useAppInfo,\n  useAutoReloadOverlayBlocker,\n  useFetchClient,\n  useGuidedTour,\n  useNotification,\n  useRBACProvider,\n  useStrapiApp,\n  useTracking,\n} from '@strapi/helper-plugin';\nimport get from 'lodash/get';\nimport groupBy from 'lodash/groupBy';\nimport set from 'lodash/set';\nimport size from 'lodash/size';\nimport { useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect, useLocation, useRouteMatch } from 'react-router-dom';\n\nimport { DataManagerContext } from '../../contexts/DataManagerContext';\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\nimport { pluginId } from '../../pluginId';\nimport { getTrad } from '../../utils/getTrad';\nimport { makeUnique } from '../../utils/makeUnique';\nimport { FormModal } from '../FormModal/FormModal';\n\nimport {\n  ADD_ATTRIBUTE,\n  ADD_CREATED_COMPONENT_TO_DYNAMIC_ZONE,\n  ADD_CUSTOM_FIELD_ATTRIBUTE,\n  CHANGE_DYNAMIC_ZONE_COMPONENTS,\n  CREATE_COMPONENT_SCHEMA,\n  CREATE_SCHEMA,\n  DELETE_NOT_SAVED_TYPE,\n  EDIT_ATTRIBUTE,\n  EDIT_CUSTOM_FIELD_ATTRIBUTE,\n  GET_DATA_SUCCEEDED,\n  RELOAD_PLUGIN,\n  REMOVE_COMPONENT_FROM_DYNAMIC_ZONE,\n  REMOVE_FIELD,\n  REMOVE_FIELD_FROM_DISPLAYED_COMPONENT,\n  SET_MODIFIED_DATA,\n  UPDATE_SCHEMA,\n  UPDATE_INITIAL_STATE,\n} from './constants';\nimport { makeSelectDataManagerProvider } from './selectors';\nimport { formatMainDataType, getComponentsToPost, sortContentType } from './utils/cleanData';\nimport { createDataObject } from './utils/createDataObject';\nimport { createModifiedDataSchema } from './utils/createModifiedDataSchema';\nimport { formatSchemas } from './utils/formatSchemas';\nimport { retrieveComponentsFromSchema } from './utils/retrieveComponentsFromSchema';\nimport { retrieveComponentsThatHaveComponents } from './utils/retrieveComponentsThatHaveComponents';\nimport { retrieveNestedComponents } from './utils/retrieveNestedComponents';\nimport { retrieveSpecificInfoFromComponents } from './utils/retrieveSpecificInfoFromComponents';\nimport { serverRestartWatcher } from './utils/serverRestartWatcher';\nimport { validateSchema } from './utils/validateSchema';\n\nimport type { ContentType, SchemaType, Components } from '../../types';\nimport type { UID } from '@strapi/types';\n\ninterface DataManagerProviderProps {\n  children: ReactNode;\n}\n\ninterface CustomFieldAttributeParams {\n  attributeToSet: Record<string, any>;\n  forTarget: SchemaType;\n  targetUid: UID.Any;\n  initialAttribute: Record<string, any>;\n}\n\nconst DataManagerProvider = ({ children }: DataManagerProviderProps) => {\n  const dispatch = useDispatch();\n  const {\n    components,\n    contentTypes,\n    isLoading,\n    isLoadingForDataToBeSet,\n    initialData,\n    modifiedData,\n    reservedNames,\n  } = useSelector(makeSelectDataManagerProvider());\n  const toggleNotification = useNotification();\n  const { lockAppWithAutoreload, unlockAppWithAutoreload } = useAutoReloadOverlayBlocker();\n  const { setCurrentStep } = useGuidedTour();\n\n  const { getPlugin } = useStrapiApp();\n\n  const plugin = getPlugin(pluginId);\n  const { autoReload } = useAppInfo();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { refetchPermissions } = useRBACProvider();\n  const { pathname } = useLocation();\n  const { onCloseModal } = useFormModalNavigation();\n  const contentTypeMatch = useRouteMatch<{ uid: string }>(\n    `/plugins/${pluginId}/content-types/:uid`\n  );\n  const componentMatch = useRouteMatch<{ categoryUid: string; componentUid: string }>(\n    `/plugins/${pluginId}/component-categories/:categoryUid/:componentUid`\n  );\n  const fetchClient = useFetchClient();\n  const { put, post, del } = fetchClient;\n\n  const formatMessageRef = useRef<any>();\n  formatMessageRef.current = formatMessage;\n  const isInDevelopmentMode = autoReload;\n\n  const isInContentTypeView = contentTypeMatch !== null;\n  const firstKeyToMainSchema = isInContentTypeView ? 'contentType' : 'component';\n  const currentUid = isInContentTypeView\n    ? get(contentTypeMatch, 'params.uid', null)\n    : get(componentMatch, 'params.componentUid', null);\n\n  const getDataRef = useRef<any>();\n  const endPoint = isInContentTypeView ? 'content-types' : 'components';\n\n  getDataRef.current = async () => {\n    try {\n      const [\n        {\n          data: { data: componentsArray },\n        },\n        {\n          data: { data: contentTypesArray },\n        },\n        { data: reservedNames },\n      ] = await Promise.all(\n        ['components', 'content-types', 'reserved-names'].map((endPoint) => {\n          return fetchClient.get(`/${pluginId}/${endPoint}`);\n        })\n      );\n\n      const components = createDataObject(componentsArray);\n      const formattedComponents = formatSchemas(components);\n      const contentTypes = createDataObject(contentTypesArray);\n      const formattedContentTypes = formatSchemas(contentTypes);\n\n      dispatch({\n        type: GET_DATA_SUCCEEDED,\n        components: formattedComponents,\n        contentTypes: formattedContentTypes,\n        reservedNames,\n      });\n    } catch (err) {\n      console.error({ err });\n      toggleNotification({\n        type: 'warning',\n        message: { id: 'notification.error' },\n      });\n    }\n  };\n\n  useEffect(() => {\n    getDataRef.current();\n\n    return () => {\n      // Reload the plugin so the cycle is new again\n      dispatch({ type: RELOAD_PLUGIN });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // We need to set the modifiedData after the data has been retrieved\n    // and also on pathname change\n    if (!isLoading && currentUid) {\n      setModifiedData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isLoading, pathname, currentUid]);\n\n  useEffect(() => {\n    if (!autoReload) {\n      toggleNotification({\n        type: 'info',\n        message: { id: getTrad('notification.info.autoreaload-disable') },\n      });\n    }\n  }, [autoReload, toggleNotification]);\n\n  const addAttribute = (\n    attributeToSet: Record<string, any>,\n    forTarget: SchemaType,\n    targetUid: UID.Any,\n    isEditing = false,\n    initialAttribute?: Record<string, any>,\n    shouldAddComponentToData = false\n  ) => {\n    const actionType = isEditing ? EDIT_ATTRIBUTE : ADD_ATTRIBUTE;\n\n    dispatch({\n      type: actionType,\n      attributeToSet,\n      forTarget,\n      targetUid,\n      initialAttribute,\n      shouldAddComponentToData,\n    });\n  };\n\n  const addCustomFieldAttribute = ({\n    attributeToSet,\n    forTarget,\n    targetUid,\n    initialAttribute,\n  }: CustomFieldAttributeParams) => {\n    dispatch({\n      type: ADD_CUSTOM_FIELD_ATTRIBUTE,\n      attributeToSet,\n      forTarget,\n      targetUid,\n      initialAttribute,\n    });\n  };\n\n  const editCustomFieldAttribute = ({\n    attributeToSet,\n    forTarget,\n    targetUid,\n    initialAttribute,\n  }: CustomFieldAttributeParams) => {\n    dispatch({\n      type: EDIT_CUSTOM_FIELD_ATTRIBUTE,\n      attributeToSet,\n      forTarget,\n      targetUid,\n      initialAttribute,\n    });\n  };\n\n  const addCreatedComponentToDynamicZone = (\n    dynamicZoneTarget: string,\n    componentsToAdd: string[]\n  ) => {\n    dispatch({\n      type: ADD_CREATED_COMPONENT_TO_DYNAMIC_ZONE,\n      dynamicZoneTarget,\n      componentsToAdd,\n    });\n  };\n\n  const createSchema = (\n    data: Record<string, any>,\n    schemaType: SchemaType,\n    uid: UID.Any,\n    componentCategory?: string,\n    shouldAddComponentToData = false\n  ) => {\n    const type = schemaType === 'contentType' ? CREATE_SCHEMA : CREATE_COMPONENT_SCHEMA;\n\n    dispatch({\n      type,\n      data,\n      componentCategory,\n      schemaType,\n      uid,\n      shouldAddComponentToData,\n    });\n  };\n\n  const changeDynamicZoneComponents = (dynamicZoneTarget: string, newComponents: string[]) => {\n    dispatch({\n      type: CHANGE_DYNAMIC_ZONE_COMPONENTS,\n      dynamicZoneTarget,\n      newComponents,\n    });\n  };\n\n  const removeAttribute = (\n    mainDataKey: string,\n    attributeToRemoveName: string,\n    componentUid = ''\n  ) => {\n    const type =\n      mainDataKey === 'components' ? REMOVE_FIELD_FROM_DISPLAYED_COMPONENT : REMOVE_FIELD;\n\n    if (mainDataKey === 'contentType') {\n      trackUsage('willDeleteFieldOfContentType');\n    }\n\n    dispatch({\n      type,\n      mainDataKey,\n      attributeToRemoveName,\n      componentUid,\n    });\n  };\n\n  const deleteCategory = async (categoryUid: string) => {\n    try {\n      const requestURL = `/${pluginId}/component-categories/${categoryUid}`;\n      // eslint-disable-next-line no-alert\n      const userConfirm = window.confirm(\n        formatMessage({\n          id: getTrad('popUpWarning.bodyMessage.category.delete'),\n        })\n      );\n      // Close the modal\n      onCloseModal();\n\n      if (userConfirm) {\n        lockAppWithAutoreload?.();\n\n        await del(requestURL);\n\n        // Make sure the server has restarted\n        await serverRestartWatcher(true);\n\n        // Unlock the app\n        unlockAppWithAutoreload?.();\n\n        await updatePermissions();\n      }\n    } catch (err) {\n      console.error({ err });\n      toggleNotification({\n        type: 'warning',\n        message: { id: 'notification.error' },\n      });\n    } finally {\n      unlockAppWithAutoreload?.();\n    }\n  };\n\n  const deleteData = async () => {\n    try {\n      const requestURL = `/${pluginId}/${endPoint}/${currentUid}`;\n      const isTemporary = get(modifiedData, [firstKeyToMainSchema, 'isTemporary'], false);\n      // eslint-disable-next-line no-alert\n      const userConfirm = window.confirm(\n        formatMessage({\n          id: getTrad(\n            `popUpWarning.bodyMessage.${isInContentTypeView ? 'contentType' : 'component'}.delete`\n          ),\n        })\n      );\n\n      // Close the modal\n      onCloseModal();\n\n      if (userConfirm) {\n        if (isTemporary) {\n          // Delete the not saved type\n          // Here we just need to reset the components to the initial ones and also the content types\n          // Doing so will trigging a url change since the type doesn't exist in either the contentTypes or the components\n          // so the modified and the initial data will also be reset in the useEffect...\n          dispatch({ type: DELETE_NOT_SAVED_TYPE });\n\n          return;\n        }\n\n        lockAppWithAutoreload?.();\n\n        await del(requestURL);\n\n        // Make sure the server has restarted\n        await serverRestartWatcher(true);\n\n        // Unlock the app\n        await unlockAppWithAutoreload?.();\n\n        // Refetch the permissions\n        await updatePermissions();\n      }\n    } catch (err) {\n      console.error({ err });\n      toggleNotification({\n        type: 'warning',\n        message: { id: 'notification.error' },\n      });\n    } finally {\n      unlockAppWithAutoreload?.();\n    }\n  };\n\n  const editCategory = async (categoryUid: string, body: any) => {\n    try {\n      const requestURL = `/${pluginId}/component-categories/${categoryUid}`;\n\n      // Close the modal\n      onCloseModal();\n\n      // Lock the app\n      lockAppWithAutoreload?.();\n\n      // Update the category\n      await put(requestURL, body);\n\n      // Make sure the server has restarted\n      await serverRestartWatcher(true);\n\n      // Unlock the app\n      await unlockAppWithAutoreload?.();\n\n      await updatePermissions();\n    } catch (err) {\n      console.error({ err });\n      toggleNotification({\n        type: 'warning',\n        message: { id: 'notification.error' },\n      });\n    } finally {\n      unlockAppWithAutoreload?.();\n    }\n  };\n\n  const getAllComponentsThatHaveAComponentInTheirAttributes = () => {\n    // We need to create an object with all the non modified compos\n    // plus the ones that are created on the fly\n    const allCompos = Object.assign({}, components, modifiedData.components);\n\n    // Since we apply the modification of a specific component only in the modified data\n    // we need to update all compos with the modifications\n    if (!isInContentTypeView) {\n      const currentEditedCompo = get(modifiedData, 'component', {});\n\n      set(allCompos, get(currentEditedCompo, ['uid'], ''), currentEditedCompo);\n    }\n\n    const composWithCompos = retrieveComponentsThatHaveComponents(allCompos);\n\n    return makeUnique(composWithCompos);\n  };\n\n  const getAllNestedComponents = () => {\n    const appNestedCompo = retrieveNestedComponents(components);\n    const editingDataNestedCompos = retrieveNestedComponents(modifiedData.components || {});\n\n    return makeUnique([...editingDataNestedCompos, ...appNestedCompo]);\n  };\n\n  const removeComponentFromDynamicZone = (dzName: string, componentToRemoveIndex: number) => {\n    dispatch({\n      type: REMOVE_COMPONENT_FROM_DYNAMIC_ZONE,\n      dzName,\n      componentToRemoveIndex,\n    });\n  };\n\n  const setModifiedData = () => {\n    const currentSchemas = isInContentTypeView ? contentTypes : components;\n    const schemaToSet = get(currentSchemas, currentUid ?? '', {\n      schema: { attributes: [] },\n    });\n\n    const retrievedComponents = retrieveComponentsFromSchema(\n      schemaToSet.schema.attributes,\n      components\n    );\n\n    const newSchemaToSet = createModifiedDataSchema(\n      schemaToSet,\n      retrievedComponents,\n      components,\n      isInContentTypeView\n    );\n\n    const hasJustCreatedSchema =\n      get(schemaToSet, 'isTemporary', false) &&\n      size(get(schemaToSet, 'schema.attributes', [])) === 0;\n\n    dispatch({\n      type: SET_MODIFIED_DATA,\n      schemaToSet: newSchemaToSet,\n      hasJustCreatedSchema,\n    });\n  };\n\n  const shouldRedirect = useMemo(() => {\n    const dataSet = isInContentTypeView ? contentTypes : components;\n    if (currentUid === 'create-content-type') {\n      return false;\n    }\n\n    return !Object.keys(dataSet).includes(currentUid || '') && !isLoading;\n  }, [components, contentTypes, currentUid, isInContentTypeView, isLoading]);\n\n  const redirectEndpoint = useMemo(() => {\n    const allowedEndpoints = Object.keys(contentTypes)\n      .filter((uid) => get(contentTypes, [uid, 'schema', 'visible'], true))\n      .sort();\n\n    return get(allowedEndpoints, '0', 'create-content-type');\n  }, [contentTypes]);\n\n  if (shouldRedirect) {\n    return <Redirect to={`/plugins/${pluginId}/content-types/${redirectEndpoint}`} />;\n  }\n\n  const submitData = async (additionalContentTypeData?: Record<string, any>) => {\n    try {\n      const isCreating = get(modifiedData, [firstKeyToMainSchema, 'isTemporary'], false);\n\n      const body: {\n        components: any[];\n        contentType?: Record<string, any>;\n        component?: any;\n      } = {\n        components: getComponentsToPost(\n          modifiedData.components as Components,\n          components as Components,\n          currentUid as UID.Any\n        ),\n      };\n\n      if (isInContentTypeView) {\n        const PluginForms = plugin?.apis?.forms as any;\n        const contentType = PluginForms.mutateContentTypeSchema(\n          {\n            ...formatMainDataType(modifiedData.contentType),\n            ...additionalContentTypeData,\n          },\n          initialData.contentType\n        ) as ContentType;\n\n        const isValidSchema = validateSchema(contentType);\n\n        if (!isValidSchema) {\n          toggleNotification({\n            type: 'warning',\n            message: {\n              id: getTrad('notification.error.dynamiczone-min.validation'),\n              defaultMessage:\n                'At least one component is required in a dynamic zone to be able to save a content type',\n            },\n          });\n\n          return;\n        }\n\n        body.contentType = contentType;\n\n        trackUsage('willSaveContentType');\n      } else {\n        body.component = formatMainDataType(modifiedData.component, true);\n\n        trackUsage('willSaveComponent');\n      }\n\n      // Lock the app\n      lockAppWithAutoreload?.();\n\n      const baseURL = `/${pluginId}/${endPoint}`;\n      const requestURL = isCreating ? baseURL : `${baseURL}/${currentUid}`;\n\n      if (isCreating) {\n        await post(requestURL, body);\n      } else {\n        await put(requestURL, body);\n      }\n\n      // Make sure the server has restarted\n      await serverRestartWatcher(true);\n\n      // Unlock the app\n      unlockAppWithAutoreload?.();\n\n      if (\n        isCreating &&\n        (initialData.contentType?.schema.kind === 'collectionType' ||\n          initialData.contentType?.schema.kind === 'singleType')\n      ) {\n        setCurrentStep('contentTypeBuilder.success');\n      }\n\n      // Submit ct tracking success\n      if (isInContentTypeView) {\n        trackUsage('didSaveContentType');\n\n        const oldName = get(body, ['contentType', 'schema', 'name'], '');\n        const newName = get(initialData, ['contentType', 'schema', 'name'], '');\n\n        if (!isCreating && oldName !== newName) {\n          trackUsage('didEditNameOfContentType');\n        }\n      } else {\n        trackUsage('didSaveComponent');\n      }\n\n      // refetch and update initial state after the data has been saved\n      await getDataRef.current();\n      dispatch({ type: UPDATE_INITIAL_STATE });\n\n      // Update the app's permissions\n      await updatePermissions();\n    } catch (err: any) {\n      if (!isInContentTypeView) {\n        trackUsage('didNotSaveComponent');\n      }\n\n      console.error({ err: err.response });\n      toggleNotification({\n        type: 'warning',\n        message: { id: 'notification.error' },\n      });\n    } finally {\n      unlockAppWithAutoreload?.();\n    }\n  };\n\n  const updatePermissions = async () => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    await refetchPermissions();\n  };\n\n  const updateSchema = (\n    data: Record<string, any>,\n    schemaType: SchemaType,\n    componentUID: UID.Any\n  ) => {\n    dispatch({\n      type: UPDATE_SCHEMA,\n      data,\n      schemaType,\n      uid: componentUID,\n    });\n  };\n\n  return (\n    <DataManagerContext.Provider\n      value={{\n        addAttribute,\n        addCustomFieldAttribute,\n        addCreatedComponentToDynamicZone,\n        allComponentsCategories: retrieveSpecificInfoFromComponents(components, ['category']),\n        changeDynamicZoneComponents,\n        components,\n        componentsGroupedByCategory: groupBy(components, 'category') as Record<string, any[]>,\n        componentsThatHaveOtherComponentInTheirAttributes:\n          getAllComponentsThatHaveAComponentInTheirAttributes(),\n        contentTypes,\n        createSchema,\n        deleteCategory,\n        deleteData,\n        editCategory,\n        editCustomFieldAttribute,\n        isInDevelopmentMode,\n        initialData,\n        isInContentTypeView,\n        modifiedData,\n        nestedComponents: getAllNestedComponents(),\n        removeAttribute,\n        removeComponentFromDynamicZone,\n        reservedNames,\n        setModifiedData,\n        sortedContentTypesList: sortContentType(contentTypes),\n        submitData,\n        updateSchema,\n      }}\n    >\n      {isLoadingForDataToBeSet ? (\n        <LoadingIndicatorPage />\n      ) : (\n        <>\n          {children}\n          {isInDevelopmentMode && <FormModal />}\n        </>\n      )}\n    </DataManagerContext.Provider>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default memo(DataManagerProvider);\n","const INITIAL_STATE_DATA = {\n  actionType: null,\n  attributeName: null,\n  attributeType: null,\n  categoryName: null,\n  dynamicZoneTarget: null,\n  forTarget: null,\n  modalType: null,\n  isOpen: false,\n  showBackLink: false,\n  kind: null,\n  step: null,\n  targetUid: null,\n  customFieldUid: null,\n};\n\nexport { INITIAL_STATE_DATA };\n","import * as React from 'react';\n\nimport { useTracking } from '@strapi/helper-plugin';\n\nimport { FormModalNavigationContext } from '../../contexts/FormModalNavigationContext';\n\nimport { INITIAL_STATE_DATA } from './constants';\n\ntype FormModalNavigationProviderProps = {\n  children: React.ReactNode;\n};\n\nexport type State = any;\n\nexport type ModalEventProps = {\n  attributeType?: string;\n  customFieldUid?: string;\n  dynamicZoneTarget?: string;\n  forTarget?: string;\n  targetUid?: string;\n  attributeName?: string;\n  step?: string | null;\n  kind?: string;\n  categoryName?: string;\n  modalType?: string;\n  actionType?: string;\n  isOpen?: boolean;\n  showBackLink?: boolean;\n};\n\nexport const FormModalNavigationProvider = ({ children }: FormModalNavigationProviderProps) => {\n  const [state, setFormModalNavigationState] = React.useState(INITIAL_STATE_DATA);\n  const { trackUsage } = useTracking();\n\n  const onClickSelectCustomField = ({ attributeType, customFieldUid }: ModalEventProps) => {\n    // TODO: Add tracking for custom fields\n    setFormModalNavigationState((prevState: any) => {\n      return {\n        ...prevState,\n        actionType: 'create',\n        modalType: 'customField',\n        attributeType,\n        customFieldUid,\n      };\n    });\n  };\n\n  const onClickSelectField = ({ attributeType, step }: ModalEventProps) => {\n    if (state.forTarget === 'contentType') {\n      trackUsage('didSelectContentTypeFieldType', { type: attributeType });\n    }\n\n    setFormModalNavigationState((prevState: State) => {\n      return {\n        ...prevState,\n        actionType: 'create',\n        modalType: 'attribute',\n        step,\n        attributeType,\n        showBackLink: true,\n      };\n    });\n  };\n\n  const onOpenModalAddComponentsToDZ = ({ dynamicZoneTarget, targetUid }: ModalEventProps) => {\n    setFormModalNavigationState((prevState: State) => {\n      return {\n        ...prevState,\n        dynamicZoneTarget,\n        targetUid,\n        modalType: 'addComponentToDynamicZone',\n        forTarget: 'contentType',\n        step: '1',\n        actionType: 'edit',\n        isOpen: true,\n      };\n    });\n  };\n\n  const onOpenModalAddField = ({ forTarget, targetUid }: ModalEventProps) => {\n    setFormModalNavigationState((prevState: State) => {\n      return {\n        ...prevState,\n        actionType: 'create',\n        forTarget,\n        targetUid,\n        modalType: 'chooseAttribute',\n        isOpen: true,\n        showBackLink: false,\n      };\n    });\n  };\n\n  const onOpenModalCreateSchema = (nextState: State) => {\n    setFormModalNavigationState((prevState) => {\n      return { ...prevState, ...nextState, isOpen: true };\n    });\n  };\n\n  const onOpenModalEditCategory = (categoryName: string) => {\n    setFormModalNavigationState((prevState: State) => {\n      return {\n        ...prevState,\n        categoryName,\n        actionType: 'edit',\n        modalType: 'editCategory',\n        isOpen: true,\n      };\n    });\n  };\n\n  const onOpenModalEditCustomField = ({\n    forTarget,\n    targetUid,\n    attributeName,\n    attributeType,\n    customFieldUid,\n  }: ModalEventProps) => {\n    setFormModalNavigationState((prevState: State) => {\n      return {\n        ...prevState,\n        modalType: 'customField',\n        customFieldUid,\n        actionType: 'edit',\n        forTarget,\n        targetUid,\n        attributeName,\n        attributeType,\n        isOpen: true,\n      };\n    });\n  };\n\n  const onOpenModalEditField = ({\n    forTarget,\n    targetUid,\n    attributeName,\n    attributeType,\n    step,\n  }: ModalEventProps) => {\n    setFormModalNavigationState((prevState: State) => {\n      return {\n        ...prevState,\n        modalType: 'attribute',\n        actionType: 'edit',\n        forTarget,\n        targetUid,\n        attributeName,\n        attributeType,\n        step,\n        isOpen: true,\n      };\n    });\n  };\n\n  const onOpenModalEditSchema = ({ modalType, forTarget, targetUid, kind }: ModalEventProps) => {\n    setFormModalNavigationState((prevState: State) => {\n      return {\n        ...prevState,\n        modalType,\n        actionType: 'edit',\n        forTarget,\n        targetUid,\n        kind,\n        isOpen: true,\n      };\n    });\n  };\n\n  const onCloseModal = () => {\n    setFormModalNavigationState(INITIAL_STATE_DATA);\n  };\n\n  const onNavigateToChooseAttributeModal = ({ forTarget, targetUid }: ModalEventProps) => {\n    setFormModalNavigationState((prev: State) => {\n      return {\n        ...prev,\n        forTarget,\n        targetUid,\n        modalType: 'chooseAttribute',\n      };\n    });\n  };\n\n  const onNavigateToCreateComponentStep2 = () => {\n    setFormModalNavigationState((prev: State) => {\n      return {\n        ...prev,\n        attributeType: 'component',\n        modalType: 'attribute',\n        step: '2',\n      };\n    });\n  };\n\n  const onNavigateToAddCompoToDZModal = ({ dynamicZoneTarget }: ModalEventProps) => {\n    setFormModalNavigationState((prev: State) => {\n      return {\n        ...prev,\n        dynamicZoneTarget,\n        modalType: 'addComponentToDynamicZone',\n        actionType: 'create',\n        step: '1',\n        attributeType: null,\n        attributeName: null,\n      };\n    });\n  };\n\n  return (\n    <FormModalNavigationContext.Provider\n      value={\n        {\n          ...state,\n          onClickSelectField,\n          onClickSelectCustomField,\n          onCloseModal,\n          onNavigateToChooseAttributeModal,\n          onNavigateToAddCompoToDZModal,\n          onOpenModalAddComponentsToDZ,\n          onNavigateToCreateComponentStep2,\n          onOpenModalAddField,\n          onOpenModalCreateSchema,\n          onOpenModalEditCategory,\n          onOpenModalEditField,\n          onOpenModalEditCustomField,\n          onOpenModalEditSchema,\n          setFormModalNavigationState,\n        } as any\n      }\n    >\n      {children}\n    </FormModalNavigationContext.Provider>\n  );\n};\n","import { lazy, Suspense } from 'react';\n\nimport { LoadingIndicatorPage } from '@strapi/helper-plugin';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\n\nconst ListView = lazy(() => import('../ListView/ListView'));\n\nexport const RecursivePath = () => {\n  const { url } = useRouteMatch();\n\n  return (\n    <Suspense fallback={<LoadingIndicatorPage />}>\n      <Switch>\n        <Route path={`${url}/:componentUid`}>\n          <ListView />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n};\n","/* eslint-disable import/no-default-export */\n/* eslint-disable check-file/filename-naming-convention  */\n/* eslint-disable check-file/no-index */\nimport { lazy, Suspense, useEffect, useRef } from 'react';\n\nimport { Layout } from '@strapi/design-system';\nimport { CheckPagePermissions, LoadingIndicatorPage, useGuidedTour } from '@strapi/helper-plugin';\nimport { Helmet } from 'react-helmet';\nimport { useIntl } from 'react-intl';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { ContentTypeBuilderNav } from '../../components/ContentTypeBuilderNav/ContentTypeBuilderNav';\nimport DataManagerProvider from '../../components/DataManagerProvider/DataManagerProvider';\nimport { FormModalNavigationProvider } from '../../components/FormModalNavigationProvider/FormModalNavigationProvider';\nimport { PERMISSIONS } from '../../constants';\nimport { pluginId } from '../../pluginId';\nimport { RecursivePath } from '../RecursivePath/RecursivePath';\n\nconst ListView = lazy(() => import('../ListView/ListView'));\n\nconst App = () => {\n  const { formatMessage } = useIntl();\n  const title = formatMessage({\n    id: `${pluginId}.plugin.name`,\n    defaultMessage: 'Content Types Builder',\n  });\n  const { startSection } = useGuidedTour();\n  const startSectionRef = useRef(startSection);\n\n  useEffect(() => {\n    if (startSectionRef.current) {\n      startSectionRef.current('contentTypeBuilder');\n    }\n  }, []);\n\n  return (\n    <CheckPagePermissions permissions={PERMISSIONS.main}>\n      <Helmet title={title} />\n      <FormModalNavigationProvider>\n        {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}\n        {/* @ts-ignore */}\n        <DataManagerProvider>\n          <Layout sideNav={<ContentTypeBuilderNav />}>\n            <Suspense fallback={<LoadingIndicatorPage />}>\n              <Switch>\n                <Route\n                  path={`/plugins/${pluginId}/content-types/create-content-type`}\n                  component={ListView}\n                />\n                <Route path={`/plugins/${pluginId}/content-types/:uid`} component={ListView} />\n                <Route\n                  path={`/plugins/${pluginId}/component-categories/:categoryUid`}\n                  component={RecursivePath}\n                />\n              </Switch>\n            </Suspense>\n          </Layout>\n        </DataManagerProvider>\n      </FormModalNavigationProvider>\n    </CheckPagePermissions>\n  );\n};\n\nexport default App;\n"],"names":["pluginId","createContext","useContext","React","useNotification","useTracking","useState","useIntl","useFilter","useCollator","isEqual","components","data","link","jsxs","SubNav","jsx","SubNavHeader","SubNavSections","Fragment","SubNavSection","SubNavLinkSection","upperFirst","SubNavLink","NavLink","Box","TextButton","Icon","Plus","pxToRem","MultiSelectNested","Number","Blocks","Boolean","CollectionType","Component","Date","DynamicZone","Email","Enumeration","Media","Json","Password","Relation","RichText","SingleType","Text","Uid","styled","useCustomFields","Flex","Spark","Typography","KeyboardNavigable","index","Grid","GridItem","EmptyDocuments","LinkButton","qs","Link","ModalBody","TabGroup","Tabs","Tab","Divider","TabPanels","TabPanel","options","value","Select","intlLabel","Option","Wrapper","inputFocusStyle","Checkbox","TextInput","NumberInput","ConfirmDialog","Button","ModalHeader","ArrowLeft","Breadcrumbs","Crumb","Icons","Field","FieldLabel","VisuallyHidden","FieldInput","useRef","useEffect","Searchbar","IconButton","Search","Tooltip","Trash","nameToSlug","pluralize","useDispatch","plugin","ON_CHANGE_RELATION_TARGET","Menu","GenericInput","OneWay","OneToOne","OneToMany","ManyToOne","ManyToMany","ManyWay","get","ON_CHANGE_RELATION_TYPE","truncate","getRelationType","CreatableCombobox","ComboboxOption","key","Textarea","nameField","slugify","errorsTrads","snakeCase","yup","toNumber","uniq","values","createComponentUid","createUid","baseForm","initialState","createSelector","acc","current","useMemo","useSelector","shallowEqual","useHistory","useStrapiApp","SET_DATA_TO_EDIT","kind","SET_DYNAMIC_ZONE_DATA_SCHEMA","set","SET_CUSTOM_FIELD_DATA_SCHEMA","SET_ATTRIBUTE_DATA_SCHEMA","RESET_PROPS","useCallback","SET_ERRORS","ON_CHANGE","toLower","RESET_PROPS_AND_SET_THE_FORM_FOR_ADDING_A_COMPO_TO_A_DZ","RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO","RESET_PROPS_AND_SAVE_CURRENT_DATA","getYupInnerErrors","has","advancedForm","ModalLayout","ModalFooter","makeUnique","omit","sortBy","camelCase","useAutoReloadOverlayBlocker","useGuidedTour","useAppInfo","useRBACProvider","useLocation","useRouteMatch","useFetchClient","reservedNames","endPoint","contentTypes","GET_DATA_SUCCEEDED","RELOAD_PLUGIN","EDIT_ATTRIBUTE","ADD_ATTRIBUTE","ADD_CUSTOM_FIELD_ATTRIBUTE","EDIT_CUSTOM_FIELD_ATTRIBUTE","ADD_CREATED_COMPONENT_TO_DYNAMIC_ZONE","CREATE_SCHEMA","CREATE_COMPONENT_SCHEMA","CHANGE_DYNAMIC_ZONE_COMPONENTS","REMOVE_FIELD_FROM_DISPLAYED_COMPONENT","REMOVE_FIELD","DELETE_NOT_SAVED_TYPE","REMOVE_COMPONENT_FROM_DYNAMIC_ZONE","retrieveComponentsFromSchema","size","SET_MODIFIED_DATA","Redirect","UPDATE_INITIAL_STATE","UPDATE_SCHEMA","groupBy","LoadingIndicatorPage","memo","ListView","lazy","Suspense","Switch","Route","CheckPagePermissions","PERMISSIONS","Helmet","DataManagerProvider","Layout"],"mappings":"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"}