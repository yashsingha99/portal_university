{"version":3,"file":"index-eAjEXbAj.js","sources":["../../admin/src/utils/getBreadcrumbDataML.js","../../admin/src/components/FolderCard/FolderCardCheckbox/FolderCardCheckbox.jsx","../../admin/src/components/PaginationFooter/index.jsx","../../admin/src/pages/App/MediaLibrary/components/BulkDeleteButton.jsx","../../admin/src/hooks/useBulkMove.js","../../admin/src/components/BulkMoveDialog/BulkMoveDialog.jsx","../../admin/src/pages/App/MediaLibrary/components/BulkMoveButton.jsx","../../admin/src/pages/App/MediaLibrary/components/BulkActions.jsx","../../admin/src/pages/App/MediaLibrary/components/EmptyOrNoPermissions.jsx","../../admin/src/pages/App/MediaLibrary/components/Filters.jsx","../../admin/src/pages/App/MediaLibrary/components/Header.jsx","../../admin/src/pages/App/MediaLibrary/index.jsx","../../admin/src/pages/App/index.jsx"],"sourcesContent":["import getFolderURL from './getFolderURL';\nimport getTrad from './getTrad';\n\nconst getBreadcrumbDataML = (folder, { pathname, query }) => {\n  let data = [\n    {\n      id: null,\n      label: { id: getTrad('plugin.name'), defaultMessage: 'Media Library' },\n      href: folder ? getFolderURL(pathname, query) : undefined,\n    },\n  ];\n\n  if (folder?.parent?.parent) {\n    data.push([]);\n  }\n\n  if (folder?.parent) {\n    data.push({\n      id: folder.parent.id,\n      label: folder.parent.name,\n      href: getFolderURL(pathname, query, {\n        folder: folder.parent.id,\n        folderPath: folder.parent.path,\n      }),\n    });\n  }\n\n  if (folder) {\n    data.push({\n      id: folder.id,\n      label: folder.name,\n    });\n  }\n\n  return data;\n};\n\nexport default getBreadcrumbDataML;\n","import React from 'react';\n\nimport { BaseCheckbox, Box } from '@strapi/design-system';\n\nimport { useFolderCard } from '../contexts/FolderCard';\n\nexport const FolderCardCheckbox = (props) => {\n  const { id } = useFolderCard();\n\n  return (\n    <Box position=\"relative\" zIndex={2}>\n      <BaseCheckbox aria-labelledby={`${id}-title`} {...props} />\n    </Box>\n  );\n};\n","import React from 'react';\n\nimport { Box, Flex } from '@strapi/design-system';\nimport { PageSizeURLQuery, PaginationURLQuery } from '@strapi/helper-plugin';\nimport PropTypes from 'prop-types';\n\nexport const PaginationFooter = ({ pagination }) => {\n  return (\n    <Box paddingTop={6}>\n      <Flex alignItems=\"flex-end\" justifyContent=\"space-between\">\n        <PageSizeURLQuery />\n        <PaginationURLQuery pagination={pagination} />\n      </Flex>\n    </Box>\n  );\n};\n\nPaginationFooter.defaultProps = {\n  pagination: {\n    pageCount: 0,\n    pageSize: 10,\n    total: 0,\n  },\n};\n\nPaginationFooter.propTypes = {\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    pageCount: PropTypes.number,\n    pageSize: PropTypes.number,\n    total: PropTypes.number,\n  }),\n};\n","import React, { useState } from 'react';\n\nimport { Button } from '@strapi/design-system';\nimport { ConfirmDialog } from '@strapi/helper-plugin';\nimport { Trash } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { AssetDefinition, FolderDefinition } from '../../../../constants';\nimport { useBulkRemove } from '../../../../hooks/useBulkRemove';\n\nexport const BulkDeleteButton = ({ selected, onSuccess }) => {\n  const { formatMessage } = useIntl();\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const { isLoading, remove } = useBulkRemove();\n\n  const handleConfirmRemove = async () => {\n    await remove(selected);\n    onSuccess();\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"danger-light\"\n        size=\"S\"\n        startIcon={<Trash />}\n        onClick={() => setShowConfirmDialog(true)}\n      >\n        {formatMessage({ id: 'global.delete', defaultMessage: 'Delete' })}\n      </Button>\n\n      <ConfirmDialog\n        isConfirmButtonLoading={isLoading}\n        isOpen={showConfirmDialog}\n        onToggleDialog={() => setShowConfirmDialog(false)}\n        onConfirm={handleConfirmRemove}\n      />\n    </>\n  );\n};\n\nBulkDeleteButton.propTypes = {\n  selected: PropTypes.arrayOf(AssetDefinition, FolderDefinition).isRequired,\n  onSuccess: PropTypes.func.isRequired,\n};\n","import { useFetchClient, useNotification } from '@strapi/helper-plugin';\nimport { useMutation, useQueryClient } from 'react-query';\n\nimport pluginId from '../pluginId';\nimport { getTrad } from '../utils';\n\nexport const useBulkMove = () => {\n  const toggleNotification = useNotification();\n  const queryClient = useQueryClient();\n  const { post } = useFetchClient();\n\n  const bulkMoveQuery = ({ destinationFolderId, filesAndFolders }) => {\n    const payload = filesAndFolders.reduce((acc, selected) => {\n      const { id, type } = selected;\n      const key = type === 'asset' ? 'fileIds' : 'folderIds';\n\n      if (!acc[key]) {\n        acc[key] = [];\n      }\n\n      acc[key].push(id);\n\n      return acc;\n    }, {});\n\n    return post('/upload/actions/bulk-move', { ...payload, destinationFolderId });\n  };\n\n  const mutation = useMutation(bulkMoveQuery, {\n    onSuccess(res) {\n      const {\n        data: { data },\n      } = res;\n\n      if (data?.files?.length > 0) {\n        queryClient.refetchQueries([pluginId, 'assets'], { active: true });\n        queryClient.refetchQueries([pluginId, 'asset-count'], { active: true });\n      }\n\n      // folders need to be re-fetched in any case, because assets might have been\n      // moved into a sub-folder and therefore the count needs to be updated\n      queryClient.refetchQueries([pluginId, 'folders'], { active: true });\n\n      toggleNotification({\n        type: 'success',\n        message: {\n          id: getTrad('modal.move.success-label'),\n          defaultMessage: 'Elements have been moved successfully.',\n        },\n      });\n    },\n  });\n\n  const move = (destinationFolderId, filesAndFolders) =>\n    mutation.mutateAsync({ destinationFolderId, filesAndFolders });\n\n  return { ...mutation, move };\n};\n","import React from 'react';\n\nimport {\n  Button,\n  FieldLabel,\n  Flex,\n  Grid,\n  GridItem,\n  Loader,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalLayout,\n  Typography,\n} from '@strapi/design-system';\nimport { Form, normalizeAPIError } from '@strapi/helper-plugin';\nimport { Formik } from 'formik';\nimport isEmpty from 'lodash/isEmpty';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { AssetDefinition, FolderDefinition } from '../../constants';\nimport { useBulkMove } from '../../hooks/useBulkMove';\nimport { useFolderStructure } from '../../hooks/useFolderStructure';\nimport { getTrad } from '../../utils';\nimport SelectTree from '../SelectTree';\n\nexport const BulkMoveDialog = ({ onClose, selected, currentFolder }) => {\n  const { formatMessage } = useIntl();\n  const { data: folderStructure, isLoading } = useFolderStructure();\n  const { move } = useBulkMove();\n\n  if (!folderStructure) {\n    return null;\n  }\n\n  const handleSubmit = async (values, { setErrors }) => {\n    try {\n      await move(values.destination.value, selected);\n      onClose();\n    } catch (error) {\n      const normalizedError = normalizeAPIError(error);\n\n      const formikErrors = normalizedError.errors.reduce((acc, error) => {\n        acc[error.values?.path?.length || 'destination'] = error.defaultMessage;\n\n        return acc;\n      }, {});\n\n      if (!isEmpty(formikErrors)) {\n        setErrors(formikErrors);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  if (isLoading) {\n    return (\n      <ModalLayout onClose={handleClose} labelledBy=\"title\">\n        <ModalBody>\n          <Flex justifyContent=\"center\" paddingTop={4} paddingBottom={4}>\n            <Loader>\n              {formatMessage({\n                id: getTrad('content.isLoading'),\n                defaultMessage: 'Content is loading.',\n              })}\n            </Loader>\n          </Flex>\n        </ModalBody>\n      </ModalLayout>\n    );\n  }\n\n  const initialFormData = {\n    destination: {\n      value: currentFolder?.id || '',\n      label: currentFolder?.name || folderStructure[0].label,\n    },\n  };\n\n  return (\n    <ModalLayout onClose={handleClose} labelledBy=\"title\">\n      <Formik validateOnChange={false} onSubmit={handleSubmit} initialValues={initialFormData}>\n        {({ values, errors, setFieldValue }) => (\n          <Form noValidate>\n            <ModalHeader>\n              <Typography fontWeight=\"bold\" textColor=\"neutral800\" as=\"h2\" id=\"title\">\n                {formatMessage({\n                  id: getTrad('modal.folder.move.title'),\n                  defaultMessage: 'Move elements to',\n                })}\n              </Typography>\n            </ModalHeader>\n\n            <ModalBody>\n              <Grid gap={4}>\n                <GridItem xs={12} col={12}>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n                    <FieldLabel htmlFor=\"folder-destination\">\n                      {formatMessage({\n                        id: getTrad('form.input.label.folder-location'),\n                        defaultMessage: 'Location',\n                      })}\n                    </FieldLabel>\n\n                    <SelectTree\n                      options={folderStructure}\n                      onChange={(value) => {\n                        setFieldValue('destination', value);\n                      }}\n                      defaultValue={values.destination}\n                      name=\"destination\"\n                      menuPortalTarget={document.querySelector('body')}\n                      inputId=\"folder-destination\"\n                      error={errors?.destination}\n                      ariaErrorMessage=\"destination-error\"\n                    />\n\n                    {errors.destination && (\n                      <Typography\n                        variant=\"pi\"\n                        as=\"p\"\n                        id=\"folder-destination-error\"\n                        textColor=\"danger600\"\n                      >\n                        {errors.destination}\n                      </Typography>\n                    )}\n                  </Flex>\n                </GridItem>\n              </Grid>\n            </ModalBody>\n\n            <ModalFooter\n              startActions={\n                <Button onClick={handleClose} variant=\"tertiary\" name=\"cancel\">\n                  {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\n                </Button>\n              }\n              endActions={\n                <Button type=\"submit\" loading={isLoading}>\n                  {formatMessage({ id: 'modal.folder.move.submit', defaultMessage: 'Move' })}\n                </Button>\n              }\n            />\n          </Form>\n        )}\n      </Formik>\n    </ModalLayout>\n  );\n};\n\nBulkMoveDialog.defaultProps = {\n  currentFolder: undefined,\n};\n\nBulkMoveDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  currentFolder: FolderDefinition,\n  selected: PropTypes.arrayOf(FolderDefinition, AssetDefinition).isRequired,\n};\n","import React, { useState } from 'react';\n\nimport { Button } from '@strapi/design-system';\nimport { Folder } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { BulkMoveDialog } from '../../../../components/BulkMoveDialog';\nimport { AssetDefinition, FolderDefinition } from '../../../../constants';\n\nexport const BulkMoveButton = ({ selected, onSuccess, currentFolder }) => {\n  const { formatMessage } = useIntl();\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n\n  const handleConfirmMove = () => {\n    setShowConfirmDialog(false);\n    onSuccess();\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"secondary\"\n        size=\"S\"\n        startIcon={<Folder />}\n        onClick={() => setShowConfirmDialog(true)}\n      >\n        {formatMessage({ id: 'global.move', defaultMessage: 'Move' })}\n      </Button>\n\n      {showConfirmDialog && (\n        <BulkMoveDialog\n          currentFolder={currentFolder}\n          onClose={handleConfirmMove}\n          selected={selected}\n        />\n      )}\n    </>\n  );\n};\n\nBulkMoveButton.defaultProps = {\n  currentFolder: undefined,\n};\n\nBulkMoveButton.propTypes = {\n  onSuccess: PropTypes.func.isRequired,\n  currentFolder: FolderDefinition,\n  selected: PropTypes.arrayOf(AssetDefinition, FolderDefinition).isRequired,\n};\n","import React from 'react';\n\nimport { Flex, Typography } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { AssetDefinition, FolderDefinition } from '../../../../constants';\nimport getTrad from '../../../../utils/getTrad';\n\nimport { BulkDeleteButton } from './BulkDeleteButton';\nimport { BulkMoveButton } from './BulkMoveButton';\n\nexport const BulkActions = ({ selected, onSuccess, currentFolder }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex gap={2} paddingBottom={5}>\n      <Typography variant=\"epsilon\" textColor=\"neutral600\">\n        {formatMessage(\n          {\n            id: getTrad('list.assets.selected'),\n            defaultMessage:\n              '{numberFolders, plural, one {1 folder} other {# folders}} - {numberAssets, plural, one {1 asset} other {# assets}} selected',\n          },\n          {\n            numberFolders: selected.filter(({ type }) => type === 'folder').length,\n            numberAssets: selected.filter(({ type }) => type === 'asset').length,\n          }\n        )}\n      </Typography>\n\n      <BulkDeleteButton selected={selected} onSuccess={onSuccess} />\n      <BulkMoveButton currentFolder={currentFolder} selected={selected} onSuccess={onSuccess} />\n    </Flex>\n  );\n};\n\nBulkActions.defaultProps = {\n  currentFolder: undefined,\n};\n\nBulkActions.propTypes = {\n  onSuccess: PropTypes.func.isRequired,\n  currentFolder: FolderDefinition,\n  selected: PropTypes.arrayOf(AssetDefinition, FolderDefinition).isRequired,\n};\n","import React from 'react';\n\nimport { Button } from '@strapi/design-system';\nimport { EmptyPermissions, Plus } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { EmptyAssets } from '../../../../components/EmptyAssets';\nimport { getTrad } from '../../../../utils';\n\nconst getContentIntlMessage = ({ isFiltering, canCreate, canRead }) => {\n  if (isFiltering) {\n    return {\n      id: 'list.assets-empty.title-withSearch',\n      defaultMessage: 'There are no elements with the applied filters',\n    };\n  }\n\n  if (canRead) {\n    if (canCreate) {\n      return {\n        id: 'list.assets.empty-upload',\n        defaultMessage: 'Upload your first assets...',\n      };\n    }\n\n    return {\n      id: 'list.assets.empty',\n      defaultMessage: 'Media Library is empty',\n    };\n  }\n\n  return {\n    id: 'header.actions.no-permissions',\n    defaultMessage: 'No permissions to view',\n  };\n};\n\nexport const EmptyOrNoPermissions = ({ canCreate, isFiltering, canRead, onActionClick }) => {\n  const { formatMessage } = useIntl();\n  const content = getContentIntlMessage({ isFiltering, canCreate, canRead });\n\n  return (\n    <EmptyAssets\n      icon={!canRead ? EmptyPermissions : null}\n      action={\n        canCreate &&\n        !isFiltering && (\n          <Button variant=\"secondary\" startIcon={<Plus />} onClick={onActionClick}>\n            {formatMessage({\n              id: getTrad('header.actions.add-assets'),\n              defaultMessage: 'Add new assets',\n            })}\n          </Button>\n        )\n      }\n      content={formatMessage({\n        ...content,\n        id: getTrad(content.id),\n      })}\n    />\n  );\n};\n\nEmptyOrNoPermissions.propTypes = {\n  canCreate: PropTypes.bool.isRequired,\n  canRead: PropTypes.bool.isRequired,\n  isFiltering: PropTypes.bool.isRequired,\n  onActionClick: PropTypes.func.isRequired,\n};\n","import React, { useRef, useState } from 'react';\n\nimport { Button } from '@strapi/design-system';\nimport { useQueryParams, useTracking } from '@strapi/helper-plugin';\nimport { Filter } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport FilterList from '../../../../components/FilterList';\nimport FilterPopover from '../../../../components/FilterPopover';\nimport displayedFilters from '../../../../utils/displayedFilters';\n\nexport const Filters = () => {\n  const buttonRef = useRef(null);\n  const [isVisible, setVisible] = useState(false);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const [{ query }, setQuery] = useQueryParams();\n  const filters = query?.filters?.$and || [];\n\n  const toggleFilter = () => setVisible((prev) => !prev);\n\n  const handleRemoveFilter = (nextFilters) => {\n    setQuery({ filters: { $and: nextFilters }, page: 1 });\n  };\n\n  const handleSubmit = (filters) => {\n    trackUsage('didFilterMediaLibraryElements', {\n      location: 'content-manager',\n      filter: Object.keys(filters[filters.length - 1])[0],\n    });\n    setQuery({ filters: { $and: filters }, page: 1 });\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"tertiary\"\n        ref={buttonRef}\n        startIcon={<Filter />}\n        onClick={toggleFilter}\n        size=\"S\"\n      >\n        {formatMessage({ id: 'app.utils.filters', defaultMessage: 'Filters' })}\n      </Button>\n      {isVisible && (\n        <FilterPopover\n          displayedFilters={displayedFilters}\n          filters={filters}\n          onSubmit={handleSubmit}\n          onToggle={toggleFilter}\n          source={buttonRef}\n        />\n      )}\n      <FilterList\n        appliedFilters={filters}\n        filtersSchema={displayedFilters}\n        onRemoveFilter={handleRemoveFilter}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Button, Flex, HeaderLayout, Link } from '@strapi/design-system';\nimport { useQueryParams } from '@strapi/helper-plugin';\nimport { ArrowLeft, Plus } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nimport { Breadcrumbs } from '../../../../components/Breadcrumbs';\nimport { BreadcrumbsDefinition, FolderDefinition } from '../../../../constants';\nimport { getTrad } from '../../../../utils';\n\nexport const Header = ({\n  breadcrumbs,\n  canCreate,\n  folder,\n  onToggleEditFolderDialog,\n  onToggleUploadAssetDialog,\n}) => {\n  const { formatMessage } = useIntl();\n  const { pathname } = useLocation();\n  const [{ query }] = useQueryParams();\n  const backQuery = {\n    ...query,\n    folder: folder?.parent?.id ?? undefined,\n    folderPath: folder?.parent?.path ?? undefined,\n  };\n\n  return (\n    <HeaderLayout\n      title={formatMessage({\n        id: getTrad('plugin.name'),\n        defaultMessage: `Media Library`,\n      })}\n      subtitle={\n        breadcrumbs &&\n        folder && (\n          <Breadcrumbs\n            as=\"nav\"\n            label={formatMessage({\n              id: getTrad('header.breadcrumbs.nav.label'),\n              defaultMessage: 'Folders navigation',\n            })}\n            breadcrumbs={breadcrumbs}\n            currentFolderId={folder?.id}\n          />\n        )\n      }\n      navigationAction={\n        folder && (\n          <Link\n            startIcon={<ArrowLeft />}\n            to={`${pathname}?${stringify(backQuery, { encode: false })}`}\n          >\n            {formatMessage({\n              id: getTrad('header.actions.folder-level-up'),\n              defaultMessage: 'Back',\n            })}\n          </Link>\n        )\n      }\n      primaryAction={\n        canCreate && (\n          <Flex gap={2}>\n            <Button startIcon={<Plus />} variant=\"secondary\" onClick={onToggleEditFolderDialog}>\n              {formatMessage({\n                id: getTrad('header.actions.add-folder'),\n                defaultMessage: 'Add new folder',\n              })}\n            </Button>\n\n            <Button startIcon={<Plus />} onClick={onToggleUploadAssetDialog}>\n              {formatMessage({\n                id: getTrad('header.actions.add-assets'),\n                defaultMessage: 'Add new assets',\n              })}\n            </Button>\n          </Flex>\n        )\n      }\n    />\n  );\n};\n\nHeader.defaultProps = {\n  breadcrumbs: false,\n  folder: null,\n};\n\nHeader.propTypes = {\n  breadcrumbs: PropTypes.oneOfType([BreadcrumbsDefinition, PropTypes.bool]),\n  canCreate: PropTypes.bool.isRequired,\n  folder: FolderDefinition,\n  onToggleEditFolderDialog: PropTypes.func.isRequired,\n  onToggleUploadAssetDialog: PropTypes.func.isRequired,\n};\n","import React, { useRef, useState } from 'react';\n\nimport {\n  ActionLayout,\n  BaseCheckbox,\n  Box,\n  ContentLayout,\n  Divider,\n  Flex,\n  GridItem,\n  IconButton,\n  Layout,\n  Main,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport {\n  AnErrorOccurred,\n  CheckPermissions,\n  LoadingIndicatorPage,\n  SearchURLQuery,\n  useFocusWhenNavigate,\n  usePersistentState,\n  useQueryParams,\n  useSelectionState,\n  useTracking,\n} from '@strapi/helper-plugin';\nimport { Cog, Grid, List, Pencil } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link as ReactRouterLink, useHistory, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { AssetGridList } from '../../../components/AssetGridList';\nimport { EditAssetDialog } from '../../../components/EditAssetDialog';\nimport { EditFolderDialog } from '../../../components/EditFolderDialog';\nimport {\n  FolderCard,\n  FolderCardBody,\n  FolderCardBodyAction,\n  FolderCardCheckbox,\n} from '../../../components/FolderCard';\nimport { FolderGridList } from '../../../components/FolderGridList';\nimport { PaginationFooter } from '../../../components/PaginationFooter';\nimport SortPicker from '../../../components/SortPicker';\nimport { TableList } from '../../../components/TableList';\nimport { UploadAssetDialog } from '../../../components/UploadAssetDialog/UploadAssetDialog';\nimport { localStorageKeys, PERMISSIONS, viewOptions } from '../../../constants';\nimport { useAssets } from '../../../hooks/useAssets';\nimport { useFolder } from '../../../hooks/useFolder';\nimport { useFolders } from '../../../hooks/useFolders';\nimport { useMediaLibraryPermissions } from '../../../hooks/useMediaLibraryPermissions';\nimport { containsAssetFilter, getBreadcrumbDataML, getFolderURL, getTrad } from '../../../utils';\n\nimport { BulkActions } from './components/BulkActions';\nimport { EmptyOrNoPermissions } from './components/EmptyOrNoPermissions';\nimport { Filters } from './components/Filters';\nimport { Header } from './components/Header';\n\nconst BoxWithHeight = styled(Box)`\n  height: ${32 / 16}rem;\n  display: flex;\n  align-items: center;\n`;\n\nconst TypographyMaxWidth = styled(Typography)`\n  max-width: 100%;\n`;\n\nconst ActionContainer = styled(Box)`\n  svg {\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\nexport const MediaLibrary = () => {\n  const { push } = useHistory();\n  const {\n    canRead,\n    canCreate,\n    canUpdate,\n    canCopyLink,\n    canDownload,\n    isLoading: permissionsLoading,\n  } = useMediaLibraryPermissions();\n  const currentFolderToEditRef = useRef();\n  const { formatMessage } = useIntl();\n  const { pathname } = useLocation();\n  const { trackUsage } = useTracking();\n  const [{ query }, setQuery] = useQueryParams();\n  const isFiltering = Boolean(query._q || query.filters);\n  const [view, setView] = usePersistentState(localStorageKeys.view, viewOptions.GRID);\n  const isGridView = view === viewOptions.GRID;\n\n  const {\n    data: assetsData,\n    isLoading: assetsLoading,\n    errors: assetsError,\n  } = useAssets({\n    skipWhen: !canRead,\n    query,\n  });\n\n  const {\n    data: foldersData,\n    isLoading: foldersLoading,\n    errors: foldersError,\n  } = useFolders({\n    enabled: canRead && assetsData?.pagination?.page === 1 && !containsAssetFilter(query),\n    query,\n  });\n\n  const {\n    data: currentFolder,\n    isLoading: isCurrentFolderLoading,\n    error: currentFolderError,\n  } = useFolder(query?.folder, {\n    enabled: canRead && !!query?.folder,\n  });\n\n  // Folder was not found: redirect to the media library root\n  if (currentFolderError?.response?.status === 404) {\n    push(pathname);\n  }\n\n  const folders =\n    foldersData?.map((folder) => ({\n      ...folder,\n      type: 'folder',\n      folderURL: getFolderURL(pathname, query, folder.id),\n      isSelectable: canUpdate,\n    })) ?? [];\n  const folderCount = folders?.length || 0;\n  const assets =\n    assetsData?.results?.map((asset) => ({ ...asset, type: 'asset', isSelectable: canUpdate })) ||\n    [];\n  const assetCount = assets?.length ?? 0;\n  const totalAssetCount = assetsData?.pagination?.total;\n\n  const isLoading = isCurrentFolderLoading || foldersLoading || permissionsLoading || assetsLoading;\n  const [showUploadAssetDialog, setShowUploadAssetDialog] = useState(false);\n  const [showEditFolderDialog, setShowEditFolderDialog] = useState(false);\n  const [assetToEdit, setAssetToEdit] = useState(undefined);\n  const [folderToEdit, setFolderToEdit] = useState(undefined);\n  const [selected, { selectOne, selectAll }] = useSelectionState(['type', 'id'], []);\n  const indeterminateBulkSelect =\n    selected?.length > 0 && selected?.length !== assetCount + folderCount;\n  const toggleUploadAssetDialog = () => setShowUploadAssetDialog((prev) => !prev);\n  const toggleEditFolderDialog = ({ created = false } = {}) => {\n    // folders are only displayed on the first page, therefore\n    // we have to navigate the user to that page, in case a folder\n    // was created successfully in order for them to see it\n    if (created && query?.page !== '1') {\n      setQuery({\n        ...query,\n        page: 1,\n      });\n    }\n\n    setShowEditFolderDialog((prev) => !prev);\n  };\n\n  const handleBulkSelect = (event, elements) => {\n    if (event.target.checked) {\n      trackUsage('didSelectAllMediaLibraryElements');\n    }\n\n    selectAll(elements);\n  };\n\n  const handleChangeSort = (value) => {\n    trackUsage('didSortMediaLibraryElements', {\n      location: 'upload',\n      sort: value,\n    });\n    setQuery({ sort: value });\n  };\n\n  const handleEditFolder = (folder) => {\n    setFolderToEdit(folder);\n    setShowEditFolderDialog(true);\n  };\n\n  const handleEditFolderClose = (payload) => {\n    setFolderToEdit(null);\n    toggleEditFolderDialog(payload);\n\n    if (currentFolderToEditRef.current) {\n      currentFolderToEditRef.current.focus();\n    }\n  };\n\n  const handleAssetDeleted = (numberOfAssets) => {\n    if (\n      numberOfAssets === assetCount &&\n      assetsData.pagination.page === assetsData.pagination.pageCount &&\n      assetsData.pagination.page > 1\n    ) {\n      setQuery({\n        ...query,\n        page: assetsData.pagination.page - 1,\n      });\n    }\n  };\n\n  const handleBulkActionSuccess = () => {\n    selectAll();\n\n    handleAssetDeleted(selected.length);\n  };\n\n  useFocusWhenNavigate();\n\n  return (\n    <Layout>\n      <Main aria-busy={isLoading}>\n        <Header\n          breadcrumbs={\n            !isCurrentFolderLoading && getBreadcrumbDataML(currentFolder, { pathname, query })\n          }\n          canCreate={canCreate}\n          onToggleEditFolderDialog={toggleEditFolderDialog}\n          onToggleUploadAssetDialog={toggleUploadAssetDialog}\n          folder={currentFolder}\n        />\n        <ActionLayout\n          startActions={\n            <>\n              {canUpdate && isGridView && (assetCount > 0 || folderCount > 0) && (\n                <BoxWithHeight\n                  paddingLeft={2}\n                  paddingRight={2}\n                  background=\"neutral0\"\n                  hasRadius\n                  borderColor=\"neutral200\"\n                >\n                  <BaseCheckbox\n                    aria-label={formatMessage({\n                      id: getTrad('bulk.select.label'),\n                      defaultMessage: 'Select all folders & assets',\n                    })}\n                    indeterminate={indeterminateBulkSelect}\n                    value={\n                      (assetCount > 0 || folderCount > 0) &&\n                      selected.length === assetCount + folderCount\n                    }\n                    onChange={(e) => handleBulkSelect(e, [...assets, ...folders])}\n                  />\n                </BoxWithHeight>\n              )}\n              {canRead && isGridView && (\n                <SortPicker value={query?.sort} onChangeSort={handleChangeSort} />\n              )}\n              {canRead && <Filters />}\n            </>\n          }\n          endActions={\n            <>\n              <CheckPermissions permissions={PERMISSIONS.configureView}>\n                <ActionContainer paddingTop={1} paddingBottom={1}>\n                  <IconButton\n                    forwardedAs={ReactRouterLink}\n                    to={{\n                      pathname: `${pathname}/configuration`,\n                      search: stringify(query, { encode: false }),\n                    }}\n                    icon={<Cog />}\n                    label={formatMessage({\n                      id: 'app.links.configure-view',\n                      defaultMessage: 'Configure the view',\n                    })}\n                  />\n                </ActionContainer>\n              </CheckPermissions>\n              <ActionContainer paddingTop={1} paddingBottom={1}>\n                <IconButton\n                  icon={isGridView ? <List /> : <Grid />}\n                  label={\n                    isGridView\n                      ? formatMessage({\n                          id: getTrad('view-switch.list'),\n                          defaultMessage: 'List View',\n                        })\n                      : formatMessage({\n                          id: getTrad('view-switch.grid'),\n                          defaultMessage: 'Grid View',\n                        })\n                  }\n                  onClick={() => setView(isGridView ? viewOptions.LIST : viewOptions.GRID)}\n                />\n              </ActionContainer>\n              <SearchURLQuery\n                label={formatMessage({\n                  id: getTrad('search.label'),\n                  defaultMessage: 'Search for an asset',\n                })}\n                trackedEvent=\"didSearchMediaLibraryElements\"\n                trackedEventDetails={{ location: 'upload' }}\n              />\n            </>\n          }\n        />\n\n        <ContentLayout>\n          {selected.length > 0 && (\n            <BulkActions\n              currentFolder={currentFolder}\n              selected={selected}\n              onSuccess={handleBulkActionSuccess}\n            />\n          )}\n\n          {isLoading && <LoadingIndicatorPage />}\n\n          {(assetsError || foldersError) && <AnErrorOccurred />}\n\n          {folderCount === 0 && assetCount === 0 && (\n            <EmptyOrNoPermissions\n              canCreate={canCreate}\n              canRead={canRead}\n              isFiltering={isFiltering}\n              onActionClick={toggleUploadAssetDialog}\n            />\n          )}\n\n          {/* TODO: fix AssetListTable should handle no assets views (loading) */}\n          {canRead && !isGridView && (assetCount > 0 || folderCount > 0) && (\n            <TableList\n              assetCount={assetCount}\n              folderCount={folderCount}\n              indeterminate={indeterminateBulkSelect}\n              onChangeSort={handleChangeSort}\n              onChangeFolder={(folderID, folderPath) =>\n                push(getFolderURL(pathname, query, { folder: folderID, folderPath }))\n              }\n              onEditAsset={setAssetToEdit}\n              onEditFolder={handleEditFolder}\n              onSelectOne={selectOne}\n              onSelectAll={handleBulkSelect}\n              rows={[...folders, ...assets]}\n              selected={selected}\n              shouldDisableBulkSelect={!canUpdate}\n              sortQuery={query?.sort ?? ''}\n            />\n          )}\n\n          {canRead && isGridView && (\n            <>\n              {folderCount > 0 && (\n                <FolderGridList\n                  title={\n                    // Folders title should only appear if:\n                    // user is filtering and there are assets to display, to divide both type of elements\n                    // user is not filtering\n                    (((isFiltering && assetCount > 0) || !isFiltering) &&\n                      formatMessage(\n                        {\n                          id: getTrad('list.folders.title'),\n                          defaultMessage: 'Folders ({count})',\n                        },\n                        { count: folderCount }\n                      )) ||\n                    ''\n                  }\n                >\n                  {folders.map((folder) => {\n                    const selectedFolders = selected.filter(({ type }) => type === 'folder');\n                    const isSelected = !!selectedFolders.find(\n                      (currentFolder) => currentFolder.id === folder.id\n                    );\n\n                    const url = getFolderURL(pathname, query, {\n                      folder: folder?.id,\n                      folderPath: folder?.path,\n                    });\n\n                    return (\n                      <GridItem col={3} key={`folder-${folder.id}`}>\n                        <FolderCard\n                          ref={\n                            folderToEdit && folder.id === folderToEdit.id\n                              ? currentFolderToEditRef\n                              : undefined\n                          }\n                          ariaLabel={folder.name}\n                          id={`folder-${folder.id}`}\n                          to={url}\n                          startAction={\n                            selectOne && folder.isSelectable ? (\n                              <FolderCardCheckbox\n                                data-testid={`folder-checkbox-${folder.id}`}\n                                value={isSelected}\n                                onChange={() => selectOne(folder)}\n                              />\n                            ) : null\n                          }\n                          cardActions={\n                            <IconButton\n                              icon={<Pencil />}\n                              aria-label={formatMessage({\n                                id: getTrad('list.folder.edit'),\n                                defaultMessage: 'Edit folder',\n                              })}\n                              onClick={() => handleEditFolder(folder)}\n                            />\n                          }\n                        >\n                          <FolderCardBody>\n                            <FolderCardBodyAction to={url}>\n                              <Flex as=\"h2\" direction=\"column\" alignItems=\"start\" maxWidth=\"100%\">\n                                <TypographyMaxWidth fontWeight=\"semiBold\" ellipsis>\n                                  {folder.name}\n                                  <VisuallyHidden>:</VisuallyHidden>\n                                </TypographyMaxWidth>\n\n                                <TypographyMaxWidth\n                                  as=\"span\"\n                                  textColor=\"neutral600\"\n                                  variant=\"pi\"\n                                  ellipsis\n                                >\n                                  {formatMessage(\n                                    {\n                                      id: getTrad('list.folder.subtitle'),\n                                      defaultMessage:\n                                        '{folderCount, plural, =0 {# folder} one {# folder} other {# folders}}, {filesCount, plural, =0 {# asset} one {# asset} other {# assets}}',\n                                    },\n                                    {\n                                      folderCount: folder.children.count,\n                                      filesCount: folder.files.count,\n                                    }\n                                  )}\n                                </TypographyMaxWidth>\n                              </Flex>\n                            </FolderCardBodyAction>\n                          </FolderCardBody>\n                        </FolderCard>\n                      </GridItem>\n                    );\n                  })}\n                </FolderGridList>\n              )}\n\n              {assetCount > 0 && folderCount > 0 && (\n                <Box paddingTop={6} paddingBottom={4}>\n                  <Divider />\n                </Box>\n              )}\n\n              {assetCount > 0 && (\n                <AssetGridList\n                  assets={assets}\n                  onEditAsset={setAssetToEdit}\n                  onSelectAsset={selectOne}\n                  selectedAssets={selected.filter(({ type }) => type === 'asset')}\n                  title={\n                    // Assets title should only appear if:\n                    // - user is not filtering\n                    // - user is filtering and there are folders to display, to separate them\n                    // - user is on page 1 since folders won't appear on any other page than the first one (no need to visually separate them)\n                    ((!isFiltering || (isFiltering && folderCount > 0)) &&\n                      assetsData?.pagination?.page === 1 &&\n                      formatMessage(\n                        {\n                          id: getTrad('list.assets.title'),\n                          defaultMessage: 'Assets ({count})',\n                        },\n                        { count: totalAssetCount }\n                      )) ||\n                    ''\n                  }\n                />\n              )}\n            </>\n          )}\n\n          {assetsData?.pagination && <PaginationFooter pagination={assetsData.pagination} />}\n        </ContentLayout>\n      </Main>\n\n      {showUploadAssetDialog && (\n        <UploadAssetDialog\n          onClose={toggleUploadAssetDialog}\n          trackedLocation=\"upload\"\n          folderId={query?.folder}\n        />\n      )}\n\n      {showEditFolderDialog && (\n        <EditFolderDialog\n          onClose={handleEditFolderClose}\n          folder={folderToEdit}\n          parentFolderId={query?.folder}\n          location=\"upload\"\n        />\n      )}\n\n      {assetToEdit && (\n        <EditAssetDialog\n          onClose={(editedAsset) => {\n            // The asset has been deleted\n            if (editedAsset === null) {\n              handleAssetDeleted(1);\n            }\n\n            setAssetToEdit(undefined);\n          }}\n          asset={assetToEdit}\n          canUpdate={canUpdate}\n          canCopyLink={canCopyLink}\n          canDownload={canDownload}\n          trackedLocation=\"upload\"\n        />\n      )}\n    </Layout>\n  );\n};\n","import React, { lazy, Suspense, useEffect } from 'react';\n\nimport { Main } from '@strapi/design-system';\nimport { LoadingIndicatorPage, useFocusWhenNavigate, useQueryParams } from '@strapi/helper-plugin';\nimport { Helmet } from 'react-helmet';\nimport { useIntl } from 'react-intl';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { useConfig } from '../../hooks/useConfig';\nimport pluginID from '../../pluginId';\nimport { getTrad } from '../../utils';\n\nimport { MediaLibrary } from './MediaLibrary';\n\nconst ConfigureTheView = lazy(() => import('./ConfigureTheView'));\n\nconst Upload = () => {\n  const {\n    config: { isLoading, isError, data: config },\n  } = useConfig();\n\n  const [{ rawQuery }, setQuery] = useQueryParams();\n  const { formatMessage } = useIntl();\n  const title = formatMessage({ id: getTrad('plugin.name'), defaultMessage: 'Media Library' });\n\n  useEffect(() => {\n    if (isLoading || isError || rawQuery) {\n      return;\n    }\n    setQuery({ sort: config.sort, page: 1, pageSize: config.pageSize });\n  }, [isLoading, isError, config, rawQuery, setQuery]);\n\n  useFocusWhenNavigate();\n\n  return (\n    <Main aria-busy={isLoading}>\n      <Helmet title={title} />\n      {isLoading && <LoadingIndicatorPage />}\n      {rawQuery ? (\n        <Suspense fallback={<LoadingIndicatorPage />}>\n          <Switch>\n            <Route exact path={`/plugins/${pluginID}`} component={MediaLibrary} />\n            <Route\n              exact\n              path={`/plugins/${pluginID}/configuration`}\n              render={() => <ConfigureTheView config={config} />}\n            />\n          </Switch>\n        </Suspense>\n      ) : null}\n    </Main>\n  );\n};\n\nexport default Upload;\n"],"names":["getTrad","getFolderURL","useFolderCard","jsx","Box","BaseCheckbox","Flex","PageSizeURLQuery","PaginationURLQuery","PropTypes","useIntl","useState","useBulkRemove","jsxs","Fragment","Button","Trash","ConfirmDialog","AssetDefinition","FolderDefinition","useNotification","useQueryClient","useFetchClient","useMutation","pluginId","useFolderStructure","normalizeAPIError","error","isEmpty","ModalLayout","ModalBody","Loader","Formik","Form","ModalHeader","Typography","Grid","GridItem","FieldLabel","SelectTree","ModalFooter","Folder","EmptyAssets","EmptyPermissions","Plus","useRef","useTracking","useQueryParams","filters","Filter","FilterPopover","displayedFilters","FilterList","useLocation","HeaderLayout","Breadcrumbs","Link","ArrowLeft","stringify","BreadcrumbsDefinition","styled","useHistory","useMediaLibraryPermissions","usePersistentState","localStorageKeys","viewOptions","useAssets","useFolders","containsAssetFilter","useFolder","useSelectionState","useFocusWhenNavigate","Layout","Main","ActionLayout","SortPicker","CheckPermissions","PERMISSIONS","IconButton","ReactRouterLink","Cog","List","SearchURLQuery","ContentLayout","LoadingIndicatorPage","AnErrorOccurred","TableList","FolderGridList","currentFolder","FolderCard","Pencil","FolderCardBody","FolderCardBodyAction","VisuallyHidden","Divider","AssetGridList","UploadAssetDialog","EditFolderDialog","EditAssetDialog","lazy","useConfig","useEffect","Helmet","Suspense","Switch","Route","pluginID"],"mappings":"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"}