{"version":3,"file":"index.mjs","sources":["../../../../src/services/content-api/permissions/index.ts"],"sourcesContent":["import _ from 'lodash';\nimport type { Strapi, Common } from '@strapi/types';\nimport { createActionProvider, createConditionProvider } from './providers';\nimport createPermissionEngine from './engine';\n\nconst typeSymbol = Symbol.for('__type__');\n\ninterface ValidatePermissionHandler {\n  (params: { permission: { action: string } }): boolean;\n}\n\n/**\n * Creates an handler that checks if the permission's action exists in the action registry\n */\nconst createValidatePermissionHandler =\n  (actionProvider: ReturnType<typeof createActionProvider>): ValidatePermissionHandler =>\n  ({ permission }) => {\n    const action = actionProvider.get(permission.action);\n\n    // If the action isn't registered into the action provider, then ignore the permission and warn the user\n    if (!action) {\n      strapi.log.debug(\n        `Unknown action \"${permission.action}\" supplied when registering a new permission`\n      );\n\n      return false;\n    }\n\n    return true;\n  };\n\n/**\n * Create instances of providers and permission engine for the core content-API service.\n * Also, expose utilities to get informations about available actions and such.\n */\nexport default (strapi: Strapi) => {\n  // NOTE: Here we define both an action and condition provider,\n  // but at the moment, we're only using the action one.\n  const providers = {\n    action: createActionProvider(),\n    condition: createConditionProvider(),\n  };\n\n  /**\n   * Get a tree representation of the available Content API actions\n   * based on the methods of the Content API controllers.\n   *\n   * @note Only actions bound to a content-API route are returned.\n   */\n  const getActionsMap = () => {\n    const actionMap: Record<\n      string,\n      {\n        controllers: Record<string, string[]>;\n      }\n    > = {};\n\n    /**\n     * Check if a controller's action is bound to the\n     * content-api by looking at a potential __type__ symbol\n     */\n    const isContentApi = (action: Common.ControllerHandler & { [s: symbol]: any }) => {\n      if (!_.has(action, typeSymbol)) {\n        return false;\n      }\n\n      return action[typeSymbol].includes('content-api');\n    };\n\n    /**\n     * Register actions from a specific API source into the result tree\n     */\n    const registerAPIsActions = (\n      apis: Record<string, Common.Plugin | Common.Module>,\n      source: 'api' | 'plugin'\n    ) => {\n      _.forEach(apis, (api, apiName) => {\n        const controllers = _.reduce(\n          api.controllers,\n          (acc, controller, controllerName) => {\n            const contentApiActions = _.pickBy(controller, isContentApi);\n\n            if (_.isEmpty(contentApiActions)) {\n              return acc;\n            }\n\n            acc[controllerName] = Object.keys(contentApiActions);\n\n            return acc;\n          },\n          {} as Record<string, string[]>\n        );\n\n        if (!_.isEmpty(controllers)) {\n          actionMap[`${source}::${apiName}`] = { controllers };\n        }\n      });\n    };\n\n    registerAPIsActions(strapi.api, 'api');\n    registerAPIsActions(strapi.plugins, 'plugin');\n\n    return actionMap;\n  };\n\n  /**\n   * Register all the content-API's controllers actions into the action provider.\n   * This method make use of the {@link getActionsMap} to generate the list of actions to register.\n   *\n   * @return {void}\n   */\n  const registerActions = async () => {\n    const actionsMap = getActionsMap();\n\n    // For each API\n    for (const [api, value] of Object.entries(actionsMap)) {\n      const { controllers } = value;\n\n      // Register controllers methods as actions\n      for (const [controller, actions] of Object.entries(controllers)) {\n        // Register each action individually\n        await Promise.all(\n          actions.map((action) => {\n            const actionUID = `${api}.${controller}.${action}`;\n\n            return providers.action.register(actionUID, {\n              api,\n              controller,\n              action,\n              uid: actionUID,\n            });\n          })\n        );\n      }\n    }\n  };\n\n  // Create an instance of a content-API permission engine\n  // and binds a custom validation handler to it\n  const engine = createPermissionEngine({ providers });\n\n  engine.on(\n    'before-format::validate.permission',\n    createValidatePermissionHandler(providers.action)\n  );\n\n  return {\n    engine,\n    providers,\n    registerActions,\n    getActionsMap,\n  };\n};\n"],"names":["strapi"],"mappings":";;;;AAKA,MAAM,aAAa,OAAO,IAAI,UAAU;AASxC,MAAM,kCACJ,CAAC,mBACD,CAAC,EAAE,iBAAiB;AAClB,QAAM,SAAS,eAAe,IAAI,WAAW,MAAM;AAGnD,MAAI,CAAC,QAAQ;AACX,WAAO,IAAI;AAAA,MACT,mBAAmB,WAAW,MAAM;AAAA,IAAA;AAG/B,WAAA;AAAA,EACT;AAEO,SAAA;AACT;AAMF,MAAe,kCAAA,CAACA,YAAmB;AAGjC,QAAM,YAAY;AAAA,IAChB,QAAQ,qBAAqB;AAAA,IAC7B,WAAW,wBAAwB;AAAA,EAAA;AASrC,QAAM,gBAAgB,MAAM;AAC1B,UAAM,YAKF,CAAA;AAME,UAAA,eAAe,CAAC,WAA4D;AAChF,UAAI,CAAC,EAAE,IAAI,QAAQ,UAAU,GAAG;AACvB,eAAA;AAAA,MACT;AAEA,aAAO,OAAO,UAAU,EAAE,SAAS,aAAa;AAAA,IAAA;AAM5C,UAAA,sBAAsB,CAC1B,MACA,WACG;AACH,QAAE,QAAQ,MAAM,CAAC,KAAK,YAAY;AAChC,cAAM,cAAc,EAAE;AAAA,UACpB,IAAI;AAAA,UACJ,CAAC,KAAK,YAAY,mBAAmB;AACnC,kBAAM,oBAAoB,EAAE,OAAO,YAAY,YAAY;AAEvD,gBAAA,EAAE,QAAQ,iBAAiB,GAAG;AACzB,qBAAA;AAAA,YACT;AAEA,gBAAI,cAAc,IAAI,OAAO,KAAK,iBAAiB;AAE5C,mBAAA;AAAA,UACT;AAAA,UACA,CAAC;AAAA,QAAA;AAGH,YAAI,CAAC,EAAE,QAAQ,WAAW,GAAG;AAC3B,oBAAU,GAAG,MAAM,KAAK,OAAO,EAAE,IAAI,EAAE;QACzC;AAAA,MAAA,CACD;AAAA,IAAA;AAGiBA,wBAAAA,QAAO,KAAK,KAAK;AACjBA,wBAAAA,QAAO,SAAS,QAAQ;AAErC,WAAA;AAAA,EAAA;AAST,QAAM,kBAAkB,YAAY;AAClC,UAAM,aAAa;AAGnB,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AAC/C,YAAA,EAAE,YAAgB,IAAA;AAGxB,iBAAW,CAAC,YAAY,OAAO,KAAK,OAAO,QAAQ,WAAW,GAAG;AAE/D,cAAM,QAAQ;AAAA,UACZ,QAAQ,IAAI,CAAC,WAAW;AACtB,kBAAM,YAAY,GAAG,GAAG,IAAI,UAAU,IAAI,MAAM;AAEzC,mBAAA,UAAU,OAAO,SAAS,WAAW;AAAA,cAC1C;AAAA,cACA;AAAA,cACA;AAAA,cACA,KAAK;AAAA,YAAA,CACN;AAAA,UAAA,CACF;AAAA,QAAA;AAAA,MAEL;AAAA,IACF;AAAA,EAAA;AAKF,QAAM,SAAS,uBAAuB,EAAE,UAAW,CAAA;AAE5C,SAAA;AAAA,IACL;AAAA,IACA,gCAAgC,UAAU,MAAM;AAAA,EAAA;AAG3C,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;"}