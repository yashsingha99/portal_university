{"version":3,"file":"container.mjs","sources":["../src/container.ts"],"sourcesContent":["import type { Strapi, Container } from '@strapi/types';\n\nexport const createContainer = (strapi: Strapi): Container => {\n  const registered = new Map<string, unknown>();\n  const resolved = new Map();\n\n  return {\n    register<T, U extends string>(name: U, resolver: T) {\n      if (registered.has(name)) {\n        throw new Error(`Cannot register already registered service ${name}`);\n      }\n\n      registered.set(name, resolver);\n      return this;\n    },\n\n    get(name: string, args?: unknown) {\n      // TODO: handle singleton vs reinstanciation everytime\n      if (resolved.has(name)) {\n        return resolved.get(name);\n      }\n\n      if (registered.has(name)) {\n        const resolver = registered.get(name);\n\n        if (typeof resolver === 'function') {\n          resolved.set(name, resolver({ strapi }, args));\n        } else {\n          resolved.set(name, resolver);\n        }\n\n        return resolved.get(name);\n      }\n\n      throw new Error(`Could not resolve service ${name}`);\n    },\n\n    // TODO: implement\n    extend() {\n      return this;\n    },\n  };\n};\n"],"names":[],"mappings":"AAEa,MAAA,kBAAkB,CAAC,WAA8B;AACtD,QAAA,iCAAiB;AACjB,QAAA,+BAAe;AAEd,SAAA;AAAA,IACL,SAA8B,MAAS,UAAa;AAC9C,UAAA,WAAW,IAAI,IAAI,GAAG;AACxB,cAAM,IAAI,MAAM,8CAA8C,IAAI,EAAE;AAAA,MACtE;AAEW,iBAAA,IAAI,MAAM,QAAQ;AACtB,aAAA;AAAA,IACT;AAAA,IAEA,IAAI,MAAc,MAAgB;AAE5B,UAAA,SAAS,IAAI,IAAI,GAAG;AACf,eAAA,SAAS,IAAI,IAAI;AAAA,MAC1B;AAEI,UAAA,WAAW,IAAI,IAAI,GAAG;AAClB,cAAA,WAAW,WAAW,IAAI,IAAI;AAEhC,YAAA,OAAO,aAAa,YAAY;AAClC,mBAAS,IAAI,MAAM,SAAS,EAAE,OAAO,GAAG,IAAI,CAAC;AAAA,QAAA,OACxC;AACI,mBAAA,IAAI,MAAM,QAAQ;AAAA,QAC7B;AAEO,eAAA,SAAS,IAAI,IAAI;AAAA,MAC1B;AAEA,YAAM,IAAI,MAAM,6BAA6B,IAAI,EAAE;AAAA,IACrD;AAAA;AAAA,IAGA,SAAS;AACA,aAAA;AAAA,IACT;AAAA,EAAA;AAEJ;"}