{"version":3,"file":"Strapi.mjs","sources":["../src/Strapi.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable vars-on-top */\n/* eslint-disable no-var */\nimport path from 'path';\nimport _ from 'lodash';\nimport { isFunction } from 'lodash/fp';\nimport { Logger, createLogger } from '@strapi/logger';\nimport { Database } from '@strapi/database';\nimport { hooks } from '@strapi/utils';\nimport type {\n  Strapi as StrapiI,\n  Server,\n  Container,\n  EntityService,\n  EventHub,\n  StartupLogger,\n  CronService,\n  WebhookStore,\n  CoreStore,\n  TelemetryService,\n  RequestContext,\n  CustomFields,\n  Fetch,\n  StrapiFS,\n  StrapiDirectories,\n  Reloader,\n  EntityValidator,\n  Common,\n  Shared,\n  Schema,\n} from '@strapi/types';\n\nimport loadConfiguration from './core/app-configuration';\n\nimport * as factories from './factories';\nimport compile from './compile';\n\nimport * as utils from './utils';\nimport { createContainer } from './container';\nimport createStrapiFs from './services/fs';\nimport createEventHub from './services/event-hub';\nimport { createServer } from './services/server';\nimport createWebhookRunner, { WebhookRunner } from './services/webhook-runner';\nimport { webhookModel, createWebhookStore } from './services/webhook-store';\nimport { createCoreStore, coreStoreModel } from './services/core-store';\nimport createEntityService from './services/entity-service';\nimport createCronService from './services/cron';\nimport entityValidator from './services/entity-validator';\nimport createTelemetry from './services/metrics';\nimport requestContext from './services/request-context';\nimport createAuth from './services/auth';\nimport createCustomFields from './services/custom-fields';\nimport createContentAPI from './services/content-api';\nimport createUpdateNotifier from './utils/update-notifier';\nimport createStartupLogger from './utils/startup-logger';\nimport { createStrapiFetch } from './utils/fetch';\nimport { LIFECYCLES } from './utils/lifecycles';\nimport ee from './utils/ee';\nimport contentTypesRegistry from './core/registries/content-types';\nimport servicesRegistry from './core/registries/services';\nimport policiesRegistry from './core/registries/policies';\nimport middlewaresRegistry from './core/registries/middlewares';\nimport hooksRegistry from './core/registries/hooks';\nimport controllersRegistry from './core/registries/controllers';\nimport modulesRegistry from './core/registries/modules';\nimport pluginsRegistry from './core/registries/plugins';\nimport customFieldsRegistry from './core/registries/custom-fields';\nimport createConfigProvider from './core/registries/config';\nimport apisRegistry from './core/registries/apis';\nimport bootstrap from './core/bootstrap';\nimport loaders from './core/loaders';\nimport { destroyOnSignal } from './utils/signals';\nimport getNumberOfDynamicZones from './services/utils/dynamic-zones';\nimport sanitizersRegistry from './core/registries/sanitizers';\nimport validatorsRegistry from './core/registries/validators';\nimport convertCustomFieldType from './utils/convert-custom-field-type';\n\n// TODO: move somewhere else\nimport * as draftAndPublishSync from './migrations/draft-publish';\nimport { FeaturesService, createFeaturesService } from './services/features';\n\n/**\n * Resolve the working directories based on the instance options.\n *\n * Behavior:\n * - `appDir` is the directory where Strapi will write every file (schemas, generated APIs, controllers or services)\n * - `distDir` is the directory where Strapi will read configurations, schemas and any compiled code\n *\n * Default values:\n * - If `appDir` is `undefined`, it'll be set to `process.cwd()`\n * - If `distDir` is `undefined`, it'll be set to `appDir`\n */\nconst resolveWorkingDirectories = (opts: { appDir?: string; distDir?: string }) => {\n  const cwd = process.cwd();\n\n  const appDir = opts.appDir ? path.resolve(cwd, opts.appDir) : cwd;\n  const distDir = opts.distDir ? path.resolve(cwd, opts.distDir) : appDir;\n\n  return { app: appDir, dist: distDir };\n};\n\nconst reloader = (strapi: Strapi) => {\n  const state = {\n    shouldReload: 0,\n    isWatching: true,\n  };\n\n  function reload() {\n    if (state.shouldReload > 0) {\n      // Reset the reloading state\n      state.shouldReload -= 1;\n      reload.isReloading = false;\n      return;\n    }\n\n    if (strapi.config.get('autoReload')) {\n      process.send?.('reload');\n    }\n  }\n\n  Object.defineProperty(reload, 'isWatching', {\n    configurable: true,\n    enumerable: true,\n    set(value) {\n      // Special state when the reloader is disabled temporarly (see GraphQL plugin example).\n      if (state.isWatching === false && value === true) {\n        state.shouldReload += 1;\n      }\n      state.isWatching = value;\n    },\n    get() {\n      return state.isWatching;\n    },\n  });\n\n  reload.isReloading = false;\n  reload.isWatching = true;\n\n  return reload;\n};\n\nexport type LoadedStrapi = Required<Strapi>;\n\nclass Strapi implements StrapiI {\n  server: Server;\n\n  container: Container;\n\n  log: Logger;\n\n  fs: StrapiFS;\n\n  eventHub: EventHub;\n\n  startupLogger: StartupLogger;\n\n  cron: CronService;\n\n  webhookRunner?: WebhookRunner;\n\n  webhookStore?: WebhookStore;\n\n  store?: CoreStore;\n\n  entityValidator?: EntityValidator;\n\n  entityService?: EntityService.EntityService;\n\n  telemetry: TelemetryService;\n\n  requestContext: RequestContext;\n\n  customFields: CustomFields.CustomFields;\n\n  fetch: Fetch;\n\n  dirs: StrapiDirectories;\n\n  admin?: Common.Module;\n\n  isLoaded: boolean;\n\n  db?: Database;\n\n  app: any;\n\n  EE?: boolean;\n\n  components: Shared.Components;\n\n  reload: Reloader;\n\n  features: FeaturesService;\n\n  constructor(opts: StrapiOptions = {}) {\n    destroyOnSignal(this);\n\n    const rootDirs = resolveWorkingDirectories(opts);\n\n    // Load the app configuration from the dist directory\n    const appConfig = loadConfiguration(rootDirs, opts);\n\n    // Instantiate the Strapi container\n    this.container = createContainer(this)\n      .register('config', createConfigProvider(appConfig))\n      .register('content-types', contentTypesRegistry())\n      .register('services', servicesRegistry(this))\n      .register('policies', policiesRegistry())\n      .register('middlewares', middlewaresRegistry())\n      .register('hooks', hooksRegistry())\n      .register('controllers', controllersRegistry(this))\n      .register('modules', modulesRegistry(this))\n      .register('plugins', pluginsRegistry(this))\n      .register('custom-fields', customFieldsRegistry(this))\n      .register('apis', apisRegistry(this))\n      .register('auth', createAuth())\n      .register('content-api', createContentAPI(this))\n      .register('sanitizers', sanitizersRegistry())\n      .register('validators', validatorsRegistry());\n\n    this.components = {};\n\n    // Create a mapping of every useful directory (for the app, dist and static directories)\n    this.dirs = utils.getDirs(rootDirs, { strapi: this });\n\n    // Strapi state management variables\n    this.isLoaded = false;\n    this.reload = reloader(this);\n\n    // Instantiate the Koa app & the HTTP server\n    this.server = createServer(this);\n\n    // Strapi utils instantiation\n    this.fs = createStrapiFs(this);\n    this.eventHub = createEventHub();\n    this.startupLogger = createStartupLogger(this);\n    this.log = createLogger(this.config.get('logger', {}));\n    this.cron = createCronService();\n    this.telemetry = createTelemetry(this);\n    this.requestContext = requestContext;\n    this.customFields = createCustomFields(this);\n    this.fetch = createStrapiFetch(this);\n    this.features = createFeaturesService(this);\n\n    createUpdateNotifier(this).notify();\n\n    Object.defineProperty<Strapi>(this, 'EE', {\n      get: () => {\n        ee.init(this.dirs.app.root, this.log);\n        return ee.isEE;\n      },\n      configurable: false,\n    });\n  }\n\n  get config() {\n    return this.container.get('config');\n  }\n\n  get services() {\n    return this.container.get('services').getAll();\n  }\n\n  service(uid: Common.UID.Service) {\n    return this.container.get('services').get(uid);\n  }\n\n  get controllers() {\n    return this.container.get('controllers').getAll();\n  }\n\n  controller(uid: Common.UID.Controller) {\n    return this.container.get('controllers').get(uid);\n  }\n\n  get contentTypes(): Shared.ContentTypes {\n    return this.container.get('content-types').getAll();\n  }\n\n  contentType(name: Common.UID.ContentType) {\n    return this.container.get('content-types').get(name);\n  }\n\n  get policies() {\n    return this.container.get('policies').getAll();\n  }\n\n  policy(name: string) {\n    return this.container.get('policies').get(name);\n  }\n\n  get middlewares() {\n    return this.container.get('middlewares').getAll();\n  }\n\n  middleware(name: string) {\n    return this.container.get('middlewares').get(name);\n  }\n\n  get plugins(): Record<string, Common.Plugin> {\n    return this.container.get('plugins').getAll();\n  }\n\n  plugin(name: string): Common.Plugin {\n    return this.container.get('plugins').get(name);\n  }\n\n  get hooks() {\n    return this.container.get('hooks').getAll();\n  }\n\n  hook(name: string) {\n    return this.container.get('hooks').get(name);\n  }\n\n  // api(name) {\n  //   return this.container.get('apis').get(name);\n  // }\n\n  get api(): Record<string, Common.Module> {\n    return this.container.get('apis').getAll();\n  }\n\n  get auth() {\n    return this.container.get('auth');\n  }\n\n  get contentAPI() {\n    return this.container.get('content-api');\n  }\n\n  get sanitizers() {\n    return this.container.get('sanitizers');\n  }\n\n  get validators() {\n    return this.container.get('validators');\n  }\n\n  async start() {\n    try {\n      if (!this.isLoaded) {\n        await this.load();\n      }\n\n      await this.listen();\n\n      return this;\n    } catch (error) {\n      return this.stopWithError(error);\n    }\n  }\n\n  async destroy() {\n    await this.server.destroy();\n    await this.runLifecyclesFunctions(LIFECYCLES.DESTROY);\n\n    this.eventHub.destroy();\n\n    await this.db?.destroy();\n\n    this.telemetry.destroy();\n    this.cron.destroy();\n\n    process.removeAllListeners();\n\n    // @ts-expect-error: Allow clean delete of global.strapi to allow re-instanciation\n    delete global.strapi;\n  }\n\n  sendStartupTelemetry() {\n    // Emit started event.\n    // do not await to avoid slower startup\n    // This event is anonymous\n    this.telemetry\n      .send('didStartServer', {\n        groupProperties: {\n          database: this.config.get('database.connection.client'),\n          plugins: Object.keys(this.plugins),\n          numberOfAllContentTypes: _.size(this.contentTypes), // TODO: V5: This event should be renamed numberOfContentTypes in V5 as the name is already taken to describe the number of content types using i18n.\n          numberOfComponents: _.size(this.components),\n          numberOfDynamicZones: getNumberOfDynamicZones(),\n          numberOfCustomControllers: Object.values<Common.Controller>(this.controllers).filter(\n            // TODO: Fix this at the content API loader level to prevent future types issues\n            (controller) => controller !== undefined && factories.isCustomController(controller)\n          ).length,\n          environment: this.config.environment,\n          // TODO: to add back\n          // providers: this.config.installedProviders,\n        },\n      })\n      .catch(this.log.error);\n  }\n\n  async openAdmin({ isInitialized }: { isInitialized: boolean }) {\n    const shouldOpenAdmin =\n      this.config.get('environment') === 'development' &&\n      this.config.get('admin.autoOpen', true) !== false;\n\n    if (shouldOpenAdmin && !isInitialized) {\n      try {\n        await utils.openBrowser(this.config);\n        this.telemetry.send('didOpenTab');\n      } catch (e) {\n        this.telemetry.send('didNotOpenTab');\n      }\n    }\n  }\n\n  async postListen() {\n    const isInitialized = await utils.isInitialized(this);\n\n    this.startupLogger.logStartupMessage({ isInitialized });\n\n    this.sendStartupTelemetry();\n    this.openAdmin({ isInitialized });\n  }\n\n  /**\n   * Add behaviors to the server\n   */\n  async listen() {\n    return new Promise<void>((resolve, reject) => {\n      const onListen = async () => {\n        try {\n          await this.postListen();\n\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      const listenSocket = this.config.get('server.socket');\n\n      if (listenSocket) {\n        this.server.listen(listenSocket, onListen);\n      } else {\n        const { host, port } = this.config.get('server');\n\n        this.server.listen(port, host, onListen);\n      }\n    });\n  }\n\n  stopWithError(err: unknown, customMessage?: string): never {\n    this.log.debug(`⛔️ Server wasn't able to start properly.`);\n    if (customMessage) {\n      this.log.error(customMessage);\n    }\n\n    this.log.error(err);\n    return this.stop();\n  }\n\n  stop(exitCode = 1): never {\n    this.destroy();\n\n    if (this.config.get('autoReload')) {\n      process.send?.('stop');\n    }\n\n    // Kill process\n    process.exit(exitCode);\n  }\n\n  async loadAdmin() {\n    await loaders.loadAdmin(this);\n  }\n\n  async loadPlugins() {\n    await loaders.loadPlugins(this);\n  }\n\n  async loadPolicies() {\n    await loaders.loadPolicies(this);\n  }\n\n  async loadAPIs() {\n    await loaders.loadAPIs(this);\n  }\n\n  async loadComponents() {\n    this.components = await loaders.loadComponents(this);\n  }\n\n  async loadMiddlewares() {\n    await loaders.loadMiddlewares(this);\n  }\n\n  async loadApp() {\n    this.app = await loaders.loadSrcIndex(this);\n  }\n\n  async loadSanitizers() {\n    await loaders.loadSanitizers(this);\n  }\n\n  async loadValidators() {\n    await loaders.loadValidators(this);\n  }\n\n  registerInternalHooks() {\n    this.container\n      .get('hooks')\n      .set('strapi::content-types.beforeSync', hooks.createAsyncParallelHook());\n\n    this.container\n      .get('hooks')\n      .set('strapi::content-types.afterSync', hooks.createAsyncParallelHook());\n\n    this.hook('strapi::content-types.beforeSync').register(draftAndPublishSync.disable);\n    this.hook('strapi::content-types.afterSync').register(draftAndPublishSync.enable);\n  }\n\n  async register() {\n    await Promise.all([\n      this.loadApp(),\n      this.loadSanitizers(),\n      this.loadValidators(),\n      this.loadPlugins(),\n      this.loadAdmin(),\n      this.loadAPIs(),\n      this.loadComponents(),\n      this.loadMiddlewares(),\n      this.loadPolicies(),\n    ]);\n\n    await bootstrap({ strapi: this });\n\n    // init webhook runner\n    this.webhookRunner = createWebhookRunner({\n      eventHub: this.eventHub,\n      logger: this.log,\n      configuration: this.config.get('server.webhooks', {}),\n      fetch: this.fetch,\n    });\n\n    this.registerInternalHooks();\n\n    this.telemetry.register();\n\n    await this.runLifecyclesFunctions(LIFECYCLES.REGISTER);\n    // NOTE: Swap type customField for underlying data type\n    convertCustomFieldType(this);\n\n    return this;\n  }\n\n  async bootstrap() {\n    const contentTypes = [\n      coreStoreModel,\n      webhookModel,\n      ...Object.values(this.contentTypes),\n      ...Object.values(this.components),\n    ];\n\n    this.db = await Database.init({\n      ...this.config.get('database'),\n      models: Database.transformContentTypes(contentTypes),\n    });\n\n    this.store = createCoreStore({ db: this.db });\n    this.webhookStore = createWebhookStore({ db: this.db });\n\n    this.entityValidator = entityValidator;\n    this.entityService = createEntityService({\n      strapi: this,\n      db: this.db,\n      eventHub: this.eventHub,\n      entityValidator: this.entityValidator,\n    });\n\n    if (this.config.get('server.cron.enabled', true)) {\n      const cronTasks = this.config.get('server.cron.tasks', {});\n      this.cron.add(cronTasks);\n    }\n\n    this.telemetry.bootstrap();\n\n    let oldContentTypes;\n    if (await this.db.getSchemaConnection().hasTable(coreStoreModel.collectionName)) {\n      oldContentTypes = await this.store.get({\n        type: 'strapi',\n        name: 'content_types',\n        key: 'schema',\n      });\n    }\n\n    await this.hook('strapi::content-types.beforeSync').call({\n      oldContentTypes,\n      contentTypes: this.contentTypes,\n    });\n\n    await this.db.schema.sync();\n\n    if (this.EE) {\n      await ee.checkLicense({ strapi: this });\n    }\n\n    await this.hook('strapi::content-types.afterSync').call({\n      oldContentTypes,\n      contentTypes: this.contentTypes,\n    });\n\n    await this.store.set({\n      type: 'strapi',\n      name: 'content_types',\n      key: 'schema',\n      value: this.contentTypes,\n    });\n\n    await this.startWebhooks();\n\n    await this.server.initMiddlewares();\n    this.server.initRouting();\n\n    await this.contentAPI.permissions.registerActions();\n\n    await this.runLifecyclesFunctions(LIFECYCLES.BOOTSTRAP);\n\n    this.cron.start();\n\n    return this;\n  }\n\n  async load() {\n    await this.register();\n    await this.bootstrap();\n\n    this.isLoaded = true;\n\n    return this as this & Required<StrapiI>;\n  }\n\n  async startWebhooks() {\n    const webhooks = await this.webhookStore?.findWebhooks();\n    if (!webhooks) {\n      return;\n    }\n\n    for (const webhook of webhooks) {\n      this.webhookRunner?.add(webhook);\n    }\n  }\n\n  async runLifecyclesFunctions(lifecycleName: 'register' | 'bootstrap' | 'destroy') {\n    // plugins\n    await this.container.get('modules')[lifecycleName]();\n\n    // admin\n    const adminLifecycleFunction = this.admin && this.admin[lifecycleName];\n    if (isFunction(adminLifecycleFunction)) {\n      await adminLifecycleFunction({ strapi: this });\n    }\n\n    // user\n    const userLifecycleFunction = this.app && this.app[lifecycleName];\n    if (isFunction(userLifecycleFunction)) {\n      await userLifecycleFunction({ strapi: this });\n    }\n  }\n\n  getModel(uid: Common.UID.ContentType): Schema.ContentType;\n  getModel(uid: Common.UID.Component): Schema.Component;\n  getModel<TUID extends Common.UID.Schema>(\n    uid: TUID\n  ): Schema.ContentType | Schema.Component | undefined {\n    if (uid in this.contentTypes) {\n      return this.contentTypes[uid as Common.UID.ContentType];\n    }\n\n    if (uid in this.components) {\n      return this.components[uid as Common.UID.Component];\n    }\n  }\n\n  /**\n   * Binds queries with a specific model\n   * @param {string} uid\n   */\n  query(uid: Common.UID.Schema) {\n    return this.db!.query(uid);\n  }\n}\n\ninterface StrapiOptions {\n  appDir?: string;\n  distDir?: string;\n  autoReload?: boolean;\n  serveAdminPanel?: boolean;\n}\n\ninterface Init {\n  (options?: StrapiOptions): Strapi;\n  factories: typeof factories;\n  compile: typeof compile;\n}\n\nconst initFn = (options: StrapiOptions = {}) => {\n  const strapi = new Strapi(options);\n  global.strapi = strapi as LoadedStrapi;\n  return strapi;\n};\n\nconst init: Init = Object.assign(initFn, { factories, compile });\n\nexport default init;\n"],"names":["createAuth","utils.getDirs","createTelemetry","requestContext","ee","factories.isCustomController","isInitialized","utils.openBrowser","utils.isInitialized","draftAndPublishSync.disable","draftAndPublishSync.enable"],"mappings":"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"}