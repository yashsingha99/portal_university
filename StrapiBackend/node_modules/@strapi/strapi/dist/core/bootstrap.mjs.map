{"version":3,"file":"bootstrap.mjs","sources":["../../src/core/bootstrap.ts"],"sourcesContent":["import { getConfigUrls } from '@strapi/utils';\nimport fse from 'fs-extra';\nimport type { Strapi } from '@strapi/types';\n\nexport default async function bootstrap({ strapi }: { strapi: Strapi }) {\n  strapi.config.port = strapi.config.get('server.port') || strapi.config.port;\n  strapi.config.host = strapi.config.get('server.host') || strapi.config.host;\n\n  const { serverUrl, adminUrl, adminPath } = getConfigUrls(strapi.config);\n\n  strapi.config.server = strapi.config.server || {};\n  strapi.config.server.url = serverUrl;\n  strapi.config.admin.url = adminUrl;\n  strapi.config.admin.path = adminPath;\n\n  // check if we should serve admin panel\n  const shouldServeAdmin = strapi.config.get(\n    'admin.serveAdminPanel',\n    strapi.config.get('serveAdminPanel')\n  );\n\n  if (!shouldServeAdmin) {\n    strapi.config.serveAdminPanel = false;\n  }\n\n  // ensure public repository exists\n  if (!(await fse.pathExists(strapi.dirs.static.public))) {\n    throw new Error(\n      `The public folder (${strapi.dirs.static.public}) doesn't exist or is not accessible. Please make sure it exists.`\n    );\n  }\n}\n"],"names":[],"mappings":";;AAI8B,eAAA,UAAU,EAAE,UAA8B;AAC/D,SAAA,OAAO,OAAO,OAAO,OAAO,IAAI,aAAa,KAAK,OAAO,OAAO;AAChE,SAAA,OAAO,OAAO,OAAO,OAAO,IAAI,aAAa,KAAK,OAAO,OAAO;AAEvE,QAAM,EAAE,WAAW,UAAU,UAAc,IAAA,cAAc,OAAO,MAAM;AAEtE,SAAO,OAAO,SAAS,OAAO,OAAO,UAAU;AACxC,SAAA,OAAO,OAAO,MAAM;AACpB,SAAA,OAAO,MAAM,MAAM;AACnB,SAAA,OAAO,MAAM,OAAO;AAGrB,QAAA,mBAAmB,OAAO,OAAO;AAAA,IACrC;AAAA,IACA,OAAO,OAAO,IAAI,iBAAiB;AAAA,EAAA;AAGrC,MAAI,CAAC,kBAAkB;AACrB,WAAO,OAAO,kBAAkB;AAAA,EAClC;AAGI,MAAA,CAAE,MAAM,IAAI,WAAW,OAAO,KAAK,OAAO,MAAM,GAAI;AACtD,UAAM,IAAI;AAAA,MACR,sBAAsB,OAAO,KAAK,OAAO,MAAM;AAAA,IAAA;AAAA,EAEnD;AACF;"}