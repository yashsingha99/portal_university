{"version":3,"file":"policies.mjs","sources":["../../../src/core/registries/policies.ts"],"sourcesContent":["import { pickBy, has } from 'lodash/fp';\nimport type { Common } from '@strapi/types';\nimport { addNamespace, hasNamespace } from '../utils';\n\ntype PolicyExtendFn = (policy: Common.Policy) => Common.Policy;\ntype PolicyMap = Record<string, Common.Policy>;\n\n// TODO: move instantiation part here instead of in the policy utils\nconst policiesRegistry = () => {\n  const policies: PolicyMap = {};\n\n  return {\n    /**\n     * Returns this list of registered policies uids\n     */\n    keys() {\n      return Object.keys(policies);\n    },\n\n    /**\n     * Returns the instance of a policy. Instantiate the policy if not already done\n     */\n    get(uid: Common.UID.Policy) {\n      return policies[uid];\n    },\n\n    /**\n     * Returns a map with all the policies in a namespace\n     */\n    getAll(namespace: string) {\n      return pickBy((_, uid) => hasNamespace(uid, namespace))(policies);\n    },\n\n    /**\n     * Registers a policy\n     */\n    set(uid: string, policy: Common.Policy) {\n      policies[uid] = policy;\n      return this;\n    },\n\n    /**\n     * Registers a map of policies for a specific namespace\n     */\n    add(namespace: string, newPolicies: PolicyMap) {\n      for (const policyName of Object.keys(newPolicies)) {\n        const policy = newPolicies[policyName];\n        const uid = addNamespace(policyName, namespace);\n\n        if (has(uid, policies)) {\n          throw new Error(`Policy ${uid} has already been registered.`);\n        }\n        policies[uid] = policy;\n      }\n    },\n\n    /**\n     * Wraps a policy to extend it\n     * @param {string} uid\n     * @param {(policy: Policy) => Policy} extendFn\n     */\n    extend(uid: Common.UID.Policy, extendFn: PolicyExtendFn) {\n      const currentPolicy = this.get(uid);\n\n      if (!currentPolicy) {\n        throw new Error(`Policy ${uid} doesn't exist`);\n      }\n\n      const newPolicy = extendFn(currentPolicy);\n      policies[uid] = newPolicy;\n\n      return this;\n    },\n  };\n};\n\nexport default policiesRegistry;\n"],"names":[],"mappings":";;AAQA,MAAM,mBAAmB,MAAM;AAC7B,QAAM,WAAsB,CAAA;AAErB,SAAA;AAAA;AAAA;AAAA;AAAA,IAIL,OAAO;AACE,aAAA,OAAO,KAAK,QAAQ;AAAA,IAC7B;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAwB;AAC1B,aAAO,SAAS,GAAG;AAAA,IACrB;AAAA;AAAA;AAAA;AAAA,IAKA,OAAO,WAAmB;AACjB,aAAA,OAAO,CAAC,GAAG,QAAQ,aAAa,KAAK,SAAS,CAAC,EAAE,QAAQ;AAAA,IAClE;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAa,QAAuB;AACtC,eAAS,GAAG,IAAI;AACT,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,WAAmB,aAAwB;AAC7C,iBAAW,cAAc,OAAO,KAAK,WAAW,GAAG;AAC3C,cAAA,SAAS,YAAY,UAAU;AAC/B,cAAA,MAAM,aAAa,YAAY,SAAS;AAE1C,YAAA,IAAI,KAAK,QAAQ,GAAG;AACtB,gBAAM,IAAI,MAAM,UAAU,GAAG,+BAA+B;AAAA,QAC9D;AACA,iBAAS,GAAG,IAAI;AAAA,MAClB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,OAAO,KAAwB,UAA0B;AACjD,YAAA,gBAAgB,KAAK,IAAI,GAAG;AAElC,UAAI,CAAC,eAAe;AAClB,cAAM,IAAI,MAAM,UAAU,GAAG,gBAAgB;AAAA,MAC/C;AAEM,YAAA,YAAY,SAAS,aAAa;AACxC,eAAS,GAAG,IAAI;AAET,aAAA;AAAA,IACT;AAAA,EAAA;AAEJ;"}