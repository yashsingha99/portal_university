{"version":3,"file":"middlewares.mjs","sources":["../../../src/core/registries/middlewares.ts"],"sourcesContent":["import { pickBy, has } from 'lodash/fp';\nimport type { Common } from '@strapi/types';\nimport { addNamespace, hasNamespace } from '../utils';\n\ntype MiddlewareExtendFn = (middleware: Common.Middleware) => Common.Middleware;\n\n// TODO: move instantiation part here instead of in the server service\nconst middlewaresRegistry = () => {\n  const middlewares: Record<Common.UID.Middleware, Common.Middleware> = {};\n\n  return {\n    /**\n     * Returns this list of registered middlewares uids\n     */\n    keys() {\n      return Object.keys(middlewares);\n    },\n\n    /**\n     * Returns the instance of a middleware. Instantiate the middleware if not already done\n     */\n    get(uid: Common.UID.Middleware) {\n      return middlewares[uid];\n    },\n\n    /**\n     * Returns a map with all the middlewares in a namespace\n     */\n    getAll(namespace: string) {\n      return pickBy((_, uid) => hasNamespace(uid, namespace))(middlewares);\n    },\n\n    /**\n     * Registers a middleware\n     */\n    set(uid: Common.UID.Middleware, middleware: Common.Middleware) {\n      middlewares[uid] = middleware;\n      return this;\n    },\n\n    /**\n     * Registers a map of middlewares for a specific namespace\n     */\n    add(namespace: string, rawMiddlewares: Record<string, Common.Middleware> = {}) {\n      for (const middlewareName of Object.keys(rawMiddlewares)) {\n        const middleware = rawMiddlewares[middlewareName];\n        const uid = addNamespace(middlewareName, namespace) as Common.UID.Middleware;\n\n        if (has(uid, middlewares)) {\n          throw new Error(`Middleware ${uid} has already been registered.`);\n        }\n        middlewares[uid] = middleware;\n      }\n    },\n\n    /**\n     * Wraps a middleware to extend it\n     */\n    extend(uid: Common.UID.Middleware, extendFn: MiddlewareExtendFn) {\n      const currentMiddleware = this.get(uid);\n\n      if (!currentMiddleware) {\n        throw new Error(`Middleware ${uid} doesn't exist`);\n      }\n\n      const newMiddleware = extendFn(currentMiddleware);\n      middlewares[uid] = newMiddleware;\n\n      return this;\n    },\n  };\n};\n\nexport default middlewaresRegistry;\n"],"names":[],"mappings":";;AAOA,MAAM,sBAAsB,MAAM;AAChC,QAAM,cAAgE,CAAA;AAE/D,SAAA;AAAA;AAAA;AAAA;AAAA,IAIL,OAAO;AACE,aAAA,OAAO,KAAK,WAAW;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAA4B;AAC9B,aAAO,YAAY,GAAG;AAAA,IACxB;AAAA;AAAA;AAAA;AAAA,IAKA,OAAO,WAAmB;AACjB,aAAA,OAAO,CAAC,GAAG,QAAQ,aAAa,KAAK,SAAS,CAAC,EAAE,WAAW;AAAA,IACrE;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAA4B,YAA+B;AAC7D,kBAAY,GAAG,IAAI;AACZ,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,WAAmB,iBAAoD,IAAI;AAC7E,iBAAW,kBAAkB,OAAO,KAAK,cAAc,GAAG;AAClD,cAAA,aAAa,eAAe,cAAc;AAC1C,cAAA,MAAM,aAAa,gBAAgB,SAAS;AAE9C,YAAA,IAAI,KAAK,WAAW,GAAG;AACzB,gBAAM,IAAI,MAAM,cAAc,GAAG,+BAA+B;AAAA,QAClE;AACA,oBAAY,GAAG,IAAI;AAAA,MACrB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA,IAKA,OAAO,KAA4B,UAA8B;AACzD,YAAA,oBAAoB,KAAK,IAAI,GAAG;AAEtC,UAAI,CAAC,mBAAmB;AACtB,cAAM,IAAI,MAAM,cAAc,GAAG,gBAAgB;AAAA,MACnD;AAEM,YAAA,gBAAgB,SAAS,iBAAiB;AAChD,kBAAY,GAAG,IAAI;AAEZ,aAAA;AAAA,IACT;AAAA,EAAA;AAEJ;"}