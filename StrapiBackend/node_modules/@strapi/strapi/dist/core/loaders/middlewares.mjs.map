{"version":3,"file":"middlewares.mjs","sources":["../../../src/core/loaders/middlewares.ts"],"sourcesContent":["import { join, extname, basename } from 'path';\nimport fse from 'fs-extra';\nimport { importDefault } from '@strapi/utils';\nimport type { Strapi, Common } from '@strapi/types';\nimport { middlewares as internalMiddlewares } from '../../middlewares';\n\n// TODO:: allow folders with index.js inside for bigger policies\nexport default async function loadMiddlewares(strapi: Strapi) {\n  const localMiddlewares = await loadLocalMiddlewares(strapi);\n\n  strapi.container.get('middlewares').add(`global::`, localMiddlewares);\n  strapi.container.get('middlewares').add(`strapi::`, internalMiddlewares);\n}\n\nconst loadLocalMiddlewares = async (strapi: Strapi) => {\n  const dir = strapi.dirs.dist.middlewares;\n\n  if (!(await fse.pathExists(dir))) {\n    return {};\n  }\n\n  const middlewares: Record<string, Common.MiddlewareFactory> = {};\n  const paths = await fse.readdir(dir, { withFileTypes: true });\n\n  for (const fd of paths) {\n    const { name } = fd;\n    const fullPath = join(dir, name);\n\n    if (fd.isFile() && extname(name) === '.js') {\n      const key = basename(name, '.js');\n      middlewares[key] = importDefault(fullPath);\n    }\n  }\n\n  return middlewares;\n};\n"],"names":["internalMiddlewares","middlewares"],"mappings":";;;;AAOA,eAA8B,gBAAgB,QAAgB;AACtD,QAAA,mBAAmB,MAAM,qBAAqB,MAAM;AAE1D,SAAO,UAAU,IAAI,aAAa,EAAE,IAAI,YAAY,gBAAgB;AACpE,SAAO,UAAU,IAAI,aAAa,EAAE,IAAI,YAAYA,WAAmB;AACzE;AAEA,MAAM,uBAAuB,OAAO,WAAmB;AAC/C,QAAA,MAAM,OAAO,KAAK,KAAK;AAE7B,MAAI,CAAE,MAAM,IAAI,WAAW,GAAG,GAAI;AAChC,WAAO;EACT;AAEA,QAAMC,eAAwD,CAAA;AACxD,QAAA,QAAQ,MAAM,IAAI,QAAQ,KAAK,EAAE,eAAe,MAAM;AAE5D,aAAW,MAAM,OAAO;AAChB,UAAA,EAAE,KAAS,IAAA;AACX,UAAA,WAAW,KAAK,KAAK,IAAI;AAE/B,QAAI,GAAG,OAAO,KAAK,QAAQ,IAAI,MAAM,OAAO;AACpC,YAAA,MAAM,SAAS,MAAM,KAAK;AACpB,MAAAA,aAAA,GAAG,IAAI,cAAc,QAAQ;AAAA,IAC3C;AAAA,EACF;AAEO,SAAAA;AACT;"}