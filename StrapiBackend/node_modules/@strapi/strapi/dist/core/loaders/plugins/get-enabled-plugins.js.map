{"version":3,"file":"get-enabled-plugins.js","sources":["../../../../src/core/loaders/plugins/get-enabled-plugins.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\nimport { dirname, join, resolve } from 'path';\nimport { statSync, existsSync } from 'fs';\nimport _ from 'lodash';\nimport { get, pickBy, defaultsDeep, map, prop, pipe } from 'lodash/fp';\nimport { isKebabCase } from '@strapi/utils';\nimport type { Strapi } from '@strapi/types';\nimport { getUserPluginsConfig } from './get-user-plugins-config';\n\ninterface PluginMeta {\n  enabled: boolean;\n  pathToPlugin?: string;\n  info: Record<string, unknown>;\n}\n\ntype PluginMetas = Record<string, PluginMeta>;\n\ninterface PluginInfo {\n  name: string;\n  kind: string;\n}\n\ninterface PluginDeclaration {\n  enabled: boolean;\n  resolve: string;\n  isModule: boolean;\n}\n\n/**\n * otherwise known as \"core features\"\n */\nconst INTERNAL_PLUGINS = [\n  '@strapi/plugin-content-manager',\n  '@strapi/plugin-content-type-builder',\n  '@strapi/plugin-email',\n  '@strapi/plugin-upload',\n  '@strapi/content-releases',\n];\n\nconst isStrapiPlugin = (info: PluginInfo) => get('strapi.kind', info) === 'plugin';\n\nconst validatePluginName = (pluginName: string) => {\n  if (!isKebabCase(pluginName)) {\n    throw new Error(`Plugin name \"${pluginName}\" is not in kebab (an-example-of-kebab-case)`);\n  }\n};\n\nconst toDetailedDeclaration = (declaration: boolean | PluginDeclaration) => {\n  if (typeof declaration === 'boolean') {\n    return { enabled: declaration };\n  }\n\n  const detailedDeclaration: { enabled: boolean; pathToPlugin?: string } = {\n    enabled: declaration.enabled,\n  };\n\n  if (declaration?.resolve) {\n    let pathToPlugin = '';\n\n    if (declaration.isModule) {\n      /**\n       * we only want the node_module here, not the package.json\n       */\n      pathToPlugin = join(declaration.resolve, '..');\n    } else {\n      try {\n        pathToPlugin = dirname(require.resolve(declaration.resolve));\n      } catch (e) {\n        pathToPlugin = resolve(strapi.dirs.app.root, declaration.resolve);\n\n        if (!existsSync(pathToPlugin) || !statSync(pathToPlugin).isDirectory()) {\n          throw new Error(`${declaration.resolve} couldn't be resolved`);\n        }\n      }\n    }\n\n    detailedDeclaration.pathToPlugin = pathToPlugin;\n  }\n\n  return detailedDeclaration;\n};\n\nexport const getEnabledPlugins = async (strapi: Strapi, { client } = { client: false }) => {\n  const internalPlugins: PluginMetas = {};\n\n  for (const dep of INTERNAL_PLUGINS) {\n    const packagePath = join(dep, 'package.json');\n    const packageInfo = require(packagePath);\n\n    validatePluginName(packageInfo.strapi.name);\n    internalPlugins[packageInfo.strapi.name] = {\n      ...toDetailedDeclaration({ enabled: true, resolve: packagePath, isModule: client }),\n      info: packageInfo.strapi,\n    };\n  }\n\n  const installedPlugins: PluginMetas = {};\n  const dependencies = strapi.config.get('info.dependencies', {});\n\n  for (const dep of Object.keys(dependencies)) {\n    const packagePath = join(dep, 'package.json');\n    let packageInfo;\n    try {\n      packageInfo = require(packagePath);\n    } catch {\n      continue;\n    }\n\n    if (isStrapiPlugin(packageInfo)) {\n      validatePluginName(packageInfo.strapi.name);\n      installedPlugins[packageInfo.strapi.name] = {\n        ...toDetailedDeclaration({ enabled: true, resolve: packagePath, isModule: client }),\n        info: {\n          ...packageInfo.strapi,\n          packageName: packageInfo.name,\n        },\n      };\n    }\n  }\n\n  const declaredPlugins: PluginMetas = {};\n  const userPluginsConfig = await getUserPluginsConfig();\n\n  _.forEach(userPluginsConfig, (declaration, pluginName) => {\n    validatePluginName(pluginName);\n\n    declaredPlugins[pluginName] = {\n      ...toDetailedDeclaration(declaration),\n      info: {},\n    };\n\n    const { pathToPlugin } = declaredPlugins[pluginName];\n\n    // for manually resolved plugins\n    if (pathToPlugin) {\n      const packagePath = join(pathToPlugin, 'package.json');\n      const packageInfo = require(packagePath);\n\n      if (isStrapiPlugin(packageInfo)) {\n        declaredPlugins[pluginName].info = packageInfo.strapi || {};\n      }\n    }\n  });\n\n  const declaredPluginsResolves = map(prop('pathToPlugin'), declaredPlugins);\n  const installedPluginsNotAlreadyUsed = pickBy(\n    (p) => !declaredPluginsResolves.includes(p.pathToPlugin),\n    installedPlugins\n  );\n\n  const enabledPlugins = pipe(\n    defaultsDeep(declaredPlugins),\n    defaultsDeep(installedPluginsNotAlreadyUsed),\n    pickBy((p: PluginMeta) => p.enabled)\n  )(internalPlugins);\n\n  return enabledPlugins;\n};\n"],"names":["get","isKebabCase","join","dirname","resolve","existsSync","statSync","strapi","getUserPluginsConfig","_","map","prop","pickBy","pipe","defaultsDeep"],"mappings":";;;;;;;;;;AA+BA,MAAM,mBAAmB;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,iBAAiB,CAAC,SAAqBA,IAAAA,IAAI,eAAe,IAAI,MAAM;AAE1E,MAAM,qBAAqB,CAAC,eAAuB;AAC7C,MAAA,CAACC,YAAAA,YAAY,UAAU,GAAG;AAC5B,UAAM,IAAI,MAAM,gBAAgB,UAAU,8CAA8C;AAAA,EAC1F;AACF;AAEA,MAAM,wBAAwB,CAAC,gBAA6C;AACtE,MAAA,OAAO,gBAAgB,WAAW;AAC7B,WAAA,EAAE,SAAS;EACpB;AAEA,QAAM,sBAAmE;AAAA,IACvE,SAAS,YAAY;AAAA,EAAA;AAGvB,MAAI,aAAa,SAAS;AACxB,QAAI,eAAe;AAEnB,QAAI,YAAY,UAAU;AAIT,qBAAAC,KAAAA,KAAK,YAAY,SAAS,IAAI;AAAA,IAAA,OACxC;AACD,UAAA;AACF,uBAAeC,KAAQ,QAAA,QAAQ,QAAQ,YAAY,OAAO,CAAC;AAAA,eACpD,GAAG;AACV,uBAAeC,KAAAA,QAAQ,OAAO,KAAK,IAAI,MAAM,YAAY,OAAO;AAE5D,YAAA,CAACC,cAAW,YAAY,KAAK,CAACC,GAAAA,SAAS,YAAY,EAAE,eAAe;AACtE,gBAAM,IAAI,MAAM,GAAG,YAAY,OAAO,uBAAuB;AAAA,QAC/D;AAAA,MACF;AAAA,IACF;AAEA,wBAAoB,eAAe;AAAA,EACrC;AAEO,SAAA;AACT;AAEa,MAAA,oBAAoB,OAAOC,SAAgB,EAAE,OAAW,IAAA,EAAE,QAAQ,YAAY;AACzF,QAAM,kBAA+B,CAAA;AAErC,aAAW,OAAO,kBAAkB;AAC5B,UAAA,cAAcL,KAAAA,KAAK,KAAK,cAAc;AACtC,UAAA,cAAc,QAAQ,WAAW;AAEpB,uBAAA,YAAY,OAAO,IAAI;AAC1B,oBAAA,YAAY,OAAO,IAAI,IAAI;AAAA,MACzC,GAAG,sBAAsB,EAAE,SAAS,MAAM,SAAS,aAAa,UAAU,QAAQ;AAAA,MAClF,MAAM,YAAY;AAAA,IAAA;AAAA,EAEtB;AAEA,QAAM,mBAAgC,CAAA;AACtC,QAAM,eAAeK,QAAO,OAAO,IAAI,qBAAqB,CAAA,CAAE;AAE9D,aAAW,OAAO,OAAO,KAAK,YAAY,GAAG;AACrC,UAAA,cAAcL,KAAAA,KAAK,KAAK,cAAc;AACxC,QAAA;AACA,QAAA;AACF,oBAAc,QAAQ,WAAW;AAAA,IAAA,QAC3B;AACN;AAAA,IACF;AAEI,QAAA,eAAe,WAAW,GAAG;AACZ,yBAAA,YAAY,OAAO,IAAI;AACzB,uBAAA,YAAY,OAAO,IAAI,IAAI;AAAA,QAC1C,GAAG,sBAAsB,EAAE,SAAS,MAAM,SAAS,aAAa,UAAU,QAAQ;AAAA,QAClF,MAAM;AAAA,UACJ,GAAG,YAAY;AAAA,UACf,aAAa,YAAY;AAAA,QAC3B;AAAA,MAAA;AAAA,IAEJ;AAAA,EACF;AAEA,QAAM,kBAA+B,CAAA;AAC/B,QAAA,oBAAoB,MAAMM,qBAAAA;AAEhCC,aAAAA,QAAE,QAAQ,mBAAmB,CAAC,aAAa,eAAe;AACxD,uBAAmB,UAAU;AAE7B,oBAAgB,UAAU,IAAI;AAAA,MAC5B,GAAG,sBAAsB,WAAW;AAAA,MACpC,MAAM,CAAC;AAAA,IAAA;AAGT,UAAM,EAAE,aAAA,IAAiB,gBAAgB,UAAU;AAGnD,QAAI,cAAc;AACV,YAAA,cAAcP,KAAAA,KAAK,cAAc,cAAc;AAC/C,YAAA,cAAc,QAAQ,WAAW;AAEnC,UAAA,eAAe,WAAW,GAAG;AAC/B,wBAAgB,UAAU,EAAE,OAAO,YAAY,UAAU,CAAA;AAAA,MAC3D;AAAA,IACF;AAAA,EAAA,CACD;AAED,QAAM,0BAA0BQ,IAAAA,IAAIC,IAAAA,KAAK,cAAc,GAAG,eAAe;AACzE,QAAM,iCAAiCC,IAAA;AAAA,IACrC,CAAC,MAAM,CAAC,wBAAwB,SAAS,EAAE,YAAY;AAAA,IACvD;AAAA,EAAA;AAGF,QAAM,iBAAiBC,IAAA;AAAA,IACrBC,IAAAA,aAAa,eAAe;AAAA,IAC5BA,IAAAA,aAAa,8BAA8B;AAAA,IAC3CF,IAAAA,OAAO,CAAC,MAAkB,EAAE,OAAO;AAAA,IACnC,eAAe;AAEV,SAAA;AACT;;"}