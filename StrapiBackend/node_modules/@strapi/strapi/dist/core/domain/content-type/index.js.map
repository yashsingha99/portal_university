{"version":3,"file":"index.js","sources":["../../../../src/core/domain/content-type/index.ts"],"sourcesContent":["import { cloneDeep } from 'lodash/fp';\nimport _ from 'lodash';\nimport { yup, contentTypes as contentTypesUtils } from '@strapi/utils';\nimport type { Schema } from '@strapi/types';\nimport { validateContentTypeDefinition } from './validator';\n\nexport type ContentTypeDefinition = {\n  schema: Schema.ContentType;\n  actions: Record<string, unknown>;\n  lifecycles: Record<string, unknown>;\n};\n\nconst {\n  CREATED_AT_ATTRIBUTE,\n  UPDATED_AT_ATTRIBUTE,\n  PUBLISHED_AT_ATTRIBUTE,\n  CREATED_BY_ATTRIBUTE,\n  UPDATED_BY_ATTRIBUTE,\n} = contentTypesUtils.constants;\n\nconst createContentType = (uid: string, definition: ContentTypeDefinition) => {\n  try {\n    validateContentTypeDefinition(definition);\n  } catch (e) {\n    if (e instanceof yup.ValidationError) {\n      throw new Error(`Content Type Definition is invalid for ${uid}'.\\n${e.errors}`);\n    }\n\n    throw e;\n  }\n\n  const { schema, actions, lifecycles } = cloneDeep(definition);\n\n  // general info\n  Object.assign(schema, {\n    kind: schema.kind || 'collectionType',\n    __schema__: pickSchema(definition.schema),\n    modelType: 'contentType',\n    modelName: definition.schema.info.singularName,\n    connection: 'default',\n  });\n\n  if (uid.startsWith('api::')) {\n    Object.assign(schema, {\n      uid,\n      apiName: uid.split('::')[1].split('.')[0],\n      collectionName: schema.collectionName || schema.info.singularName,\n      globalId: getGlobalId(schema, schema.info.singularName),\n    });\n  } else if (uid.startsWith('plugin::')) {\n    const pluginName = uid.split('::')[1].split('.')[0];\n    Object.assign(schema, {\n      uid,\n      plugin: pluginName, // TODO: to be set in load-plugins.js\n      collectionName:\n        schema.collectionName || `${pluginName}_${schema.info.singularName}`.toLowerCase(),\n      globalId: getGlobalId(schema, schema.info.singularName, pluginName),\n    });\n  } else if (uid.startsWith('admin::')) {\n    Object.assign(schema, {\n      uid,\n      plugin: 'admin',\n      globalId: getGlobalId(schema, schema.info.singularName, 'admin'),\n    });\n  } else {\n    throw new Error(\n      `Incorrect Content Type UID \"${uid}\". The UID should start with api::, plugin:: or admin::.`\n    );\n  }\n\n  // attributes\n  Object.assign(schema.attributes, {\n    [CREATED_AT_ATTRIBUTE]: {\n      type: 'datetime',\n    },\n    // TODO: handle on edit set to new date\n    [UPDATED_AT_ATTRIBUTE]: {\n      type: 'datetime',\n    },\n  });\n\n  if (contentTypesUtils.hasDraftAndPublish(schema as any)) {\n    schema.attributes[PUBLISHED_AT_ATTRIBUTE] = {\n      type: 'datetime',\n      configurable: false,\n      writable: true,\n      visible: false,\n    };\n  }\n\n  const isPrivate = !_.get(schema, 'options.populateCreatorFields', false);\n\n  schema.attributes[CREATED_BY_ATTRIBUTE] = {\n    type: 'relation',\n    relation: 'oneToOne',\n    target: 'admin::user',\n    configurable: false,\n    writable: false,\n    visible: false,\n    useJoinTable: false,\n    private: isPrivate,\n  };\n\n  schema.attributes[UPDATED_BY_ATTRIBUTE] = {\n    type: 'relation',\n    relation: 'oneToOne',\n    target: 'admin::user',\n    configurable: false,\n    writable: false,\n    visible: false,\n    useJoinTable: false,\n    private: isPrivate,\n  };\n\n  Object.assign(schema, { actions, lifecycles });\n\n  return schema;\n};\n\nconst getGlobalId = (model: any, modelName: string, prefix?: string) => {\n  const globalId = prefix ? `${prefix}-${modelName}` : modelName;\n\n  return model.globalId || _.upperFirst(_.camelCase(globalId));\n};\n\nconst pickSchema = (model: Schema.ContentType) => {\n  const schema = _.cloneDeep(\n    _.pick(model, [\n      'connection',\n      'collectionName',\n      'info',\n      'options',\n      'pluginOptions',\n      'attributes',\n    ])\n  );\n\n  schema.kind = model.kind || 'collectionType';\n  return schema;\n};\n\nexport { createContentType };\n"],"names":["contentTypesUtils","validateContentTypeDefinition","yup","cloneDeep","_"],"mappings":"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"}