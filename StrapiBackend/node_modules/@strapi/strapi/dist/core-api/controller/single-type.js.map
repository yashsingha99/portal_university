{"version":3,"file":"single-type.js","sources":["../../../src/core-api/controller/single-type.ts"],"sourcesContent":["import { isObject } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport type { Schema, CoreApi, Utils, Common } from '@strapi/types';\n\nimport { parseBody } from './transform';\n\ninterface Options {\n  contentType: Schema.SingleType;\n}\n\n/**\n * Returns a single type controller to handle default core-api actions\n */\nconst createSingleTypeController = ({\n  contentType,\n}: Options): Utils.PartialWithThis<CoreApi.Controller.SingleType> => {\n  const uid = contentType.uid as Common.UID.Service;\n\n  return {\n    /**\n     * Retrieve single type content\n     *\n     */\n    async find(ctx) {\n      await this.validateQuery(ctx);\n      const sanitizedQuery = await this.sanitizeQuery(ctx);\n\n      const entity = await strapi.service(uid).find(sanitizedQuery);\n\n      const sanitizedEntity = await this.sanitizeOutput(entity, ctx);\n\n      return this.transformResponse(sanitizedEntity);\n    },\n\n    /**\n     * create or update single type content.\n     *\n     * @return {Object}\n     */\n    async update(ctx) {\n      const { query } = ctx.request;\n      const body = parseBody(ctx);\n\n      if (!isObject(body.data)) {\n        throw new errors.ValidationError('Missing \"data\" payload in the request body');\n      }\n\n      const sanitizedInputData = await this.sanitizeInput(body.data, ctx);\n\n      const entity = await strapi.service(uid).createOrUpdate({\n        ...query,\n        data: sanitizedInputData,\n        files: 'files' in body ? body.files : undefined,\n      });\n\n      const sanitizedEntity = await this.sanitizeOutput(entity, ctx);\n\n      return this.transformResponse(sanitizedEntity);\n    },\n\n    async delete(ctx) {\n      const { query } = ctx;\n\n      const entity = await strapi.service(uid).delete(query);\n      const sanitizedEntity = await this.sanitizeOutput(entity, ctx);\n\n      return this.transformResponse(sanitizedEntity);\n    },\n  };\n};\n\nexport default createSingleTypeController;\n"],"names":["parseBody","isObject","errors"],"mappings":";;;;AAaA,MAAM,6BAA6B,CAAC;AAAA,EAClC;AACF,MAAqE;AACnE,QAAM,MAAM,YAAY;AAEjB,SAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKL,MAAM,KAAK,KAAK;AACR,YAAA,KAAK,cAAc,GAAG;AAC5B,YAAM,iBAAiB,MAAM,KAAK,cAAc,GAAG;AAEnD,YAAM,SAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,KAAK,cAAc;AAE5D,YAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,GAAG;AAEtD,aAAA,KAAK,kBAAkB,eAAe;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,OAAO,KAAK;AACV,YAAA,EAAE,MAAM,IAAI,IAAI;AAChB,YAAA,OAAOA,oBAAU,GAAG;AAE1B,UAAI,CAACC,EAAA,SAAS,KAAK,IAAI,GAAG;AAClB,cAAA,IAAIC,YAAO,OAAA,gBAAgB,4CAA4C;AAAA,MAC/E;AAEA,YAAM,qBAAqB,MAAM,KAAK,cAAc,KAAK,MAAM,GAAG;AAElE,YAAM,SAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,eAAe;AAAA,QACtD,GAAG;AAAA,QACH,MAAM;AAAA,QACN,OAAO,WAAW,OAAO,KAAK,QAAQ;AAAA,MAAA,CACvC;AAED,YAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,GAAG;AAEtD,aAAA,KAAK,kBAAkB,eAAe;AAAA,IAC/C;AAAA,IAEA,MAAM,OAAO,KAAK;AACV,YAAA,EAAE,MAAU,IAAA;AAElB,YAAM,SAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,OAAO,KAAK;AACrD,YAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,GAAG;AAEtD,aAAA,KAAK,kBAAkB,eAAe;AAAA,IAC/C;AAAA,EAAA;AAEJ;;"}