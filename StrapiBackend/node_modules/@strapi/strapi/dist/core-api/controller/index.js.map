{"version":3,"file":"index.js","sources":["../../../src/core-api/controller/index.ts"],"sourcesContent":["import { prop } from 'lodash/fp';\nimport type Koa from 'koa';\nimport { contentTypes as contentTypeUtils, sanitize, validate } from '@strapi/utils';\nimport type { CoreApi, Schema } from '@strapi/types';\n\nimport { transformResponse } from './transform';\nimport createSingleTypeController from './single-type';\nimport createCollectionTypeController from './collection-type';\n\nconst isSingleType = (contentType: Schema.ContentType): contentType is Schema.SingleType =>\n  contentTypeUtils.isSingleType(contentType);\n\nconst getAuthFromKoaContext = (ctx: Koa.Context) => prop('state.auth', ctx) ?? {};\n\nfunction createController<T extends Schema.SingleType | Schema.CollectionType>(opts: {\n  contentType: T;\n}): T extends Schema.SingleType ? CoreApi.Controller.SingleType : CoreApi.Controller.CollectionType;\nfunction createController({\n  contentType,\n}: {\n  contentType: Schema.SingleType | Schema.CollectionType;\n}) {\n  const proto: CoreApi.Controller.Base = {\n    transformResponse(data, meta) {\n      return transformResponse(data, meta, { contentType });\n    },\n\n    async sanitizeOutput(data, ctx) {\n      const auth = getAuthFromKoaContext(ctx);\n\n      return sanitize.contentAPI.output(data, contentType, { auth });\n    },\n\n    async sanitizeInput(data, ctx) {\n      const auth = getAuthFromKoaContext(ctx);\n\n      return sanitize.contentAPI.input(data, contentType, { auth });\n    },\n\n    async sanitizeQuery(ctx) {\n      const auth = getAuthFromKoaContext(ctx);\n\n      return sanitize.contentAPI.query(ctx.query, contentType, { auth });\n    },\n\n    async validateQuery(ctx) {\n      const auth = getAuthFromKoaContext(ctx);\n\n      return validate.contentAPI.query(ctx.query, contentType, { auth });\n    },\n\n    async validateInput(data, ctx) {\n      const auth = getAuthFromKoaContext(ctx);\n\n      return validate.contentAPI.input(data, contentType, { auth });\n    },\n  };\n\n  let ctrl;\n\n  if (isSingleType(contentType)) {\n    ctrl = createSingleTypeController({ contentType });\n  } else {\n    ctrl = createCollectionTypeController({ contentType });\n  }\n\n  return Object.assign(Object.create(proto), ctrl);\n}\n\nexport { createController };\n"],"names":["contentTypeUtils","prop","transformResponse","sanitize","validate","createSingleTypeController","createCollectionTypeController"],"mappings":";;;;;;;AASA,MAAM,eAAe,CAAC,gBACpBA,YAAA,aAAiB,aAAa,WAAW;AAE3C,MAAM,wBAAwB,CAAC,QAAqBC,EAAAA,KAAK,cAAc,GAAG,KAAK;AAK/E,SAAS,iBAAiB;AAAA,EACxB;AACF,GAEG;AACD,QAAM,QAAiC;AAAA,IACrC,kBAAkB,MAAM,MAAM;AAC5B,aAAOC,UAAkB,kBAAA,MAAM,MAAM,EAAE,YAAa,CAAA;AAAA,IACtD;AAAA,IAEA,MAAM,eAAe,MAAM,KAAK;AACxB,YAAA,OAAO,sBAAsB,GAAG;AAEtC,aAAOC,YAAAA,SAAS,WAAW,OAAO,MAAM,aAAa,EAAE,MAAM;AAAA,IAC/D;AAAA,IAEA,MAAM,cAAc,MAAM,KAAK;AACvB,YAAA,OAAO,sBAAsB,GAAG;AAEtC,aAAOA,YAAAA,SAAS,WAAW,MAAM,MAAM,aAAa,EAAE,MAAM;AAAA,IAC9D;AAAA,IAEA,MAAM,cAAc,KAAK;AACjB,YAAA,OAAO,sBAAsB,GAAG;AAE/B,aAAAA,YAAA,SAAS,WAAW,MAAM,IAAI,OAAO,aAAa,EAAE,MAAM;AAAA,IACnE;AAAA,IAEA,MAAM,cAAc,KAAK;AACjB,YAAA,OAAO,sBAAsB,GAAG;AAE/B,aAAAC,YAAA,SAAS,WAAW,MAAM,IAAI,OAAO,aAAa,EAAE,MAAM;AAAA,IACnE;AAAA,IAEA,MAAM,cAAc,MAAM,KAAK;AACvB,YAAA,OAAO,sBAAsB,GAAG;AAEtC,aAAOA,YAAAA,SAAS,WAAW,MAAM,MAAM,aAAa,EAAE,MAAM;AAAA,IAC9D;AAAA,EAAA;AAGE,MAAA;AAEA,MAAA,aAAa,WAAW,GAAG;AACtB,WAAAC,WAA2B,EAAE,YAAA,CAAa;AAAA,EAAA,OAC5C;AACE,WAAAC,eAA+B,EAAE,YAAA,CAAa;AAAA,EACvD;AAEA,SAAO,OAAO,OAAO,OAAO,OAAO,KAAK,GAAG,IAAI;AACjD;;"}