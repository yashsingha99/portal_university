{"version":3,"file":"single-type.js","sources":["../../../src/core-api/service/single-type.ts"],"sourcesContent":["import { propOr } from 'lodash/fp';\nimport type { CoreApi, Schema, Common } from '@strapi/types';\nimport { errors, contentTypes as contentTypeUtils } from '@strapi/utils';\nimport { getFetchParams } from './get-fetch-params';\n\nconst {\n  hasDraftAndPublish,\n  constants: { PUBLISHED_AT_ATTRIBUTE },\n} = contentTypeUtils;\n\nconst setPublishedAt = (data: Record<string, unknown>) => {\n  data[PUBLISHED_AT_ATTRIBUTE] = propOr(new Date(), PUBLISHED_AT_ATTRIBUTE, data);\n};\n\n/**\n * Returns a single type service to handle default core-api actions\n */\nconst createSingleTypeService = ({\n  contentType,\n}: {\n  contentType: Schema.SingleType;\n}): CoreApi.Service.SingleType => {\n  const { uid } = contentType;\n\n  return <any>{\n    getFetchParams,\n    /**\n     * Returns singleType content\n     */\n    find(params = {}) {\n      return (\n        strapi.entityService?.findMany(uid as Common.UID.SingleType, this.getFetchParams(params)) ??\n        null\n      );\n    },\n\n    /**\n     * Creates or updates a singleType content\n     *\n     * @return {Promise}\n     */\n    async createOrUpdate({ data, ...params } = { data: {} }) {\n      const entity = await this.find({ ...params, publicationState: 'preview' });\n\n      if (!entity) {\n        const count = await strapi.query(uid).count();\n        if (count >= 1) {\n          throw new errors.ValidationError('singleType.alreadyExists');\n        }\n\n        if (hasDraftAndPublish(contentType)) {\n          setPublishedAt(data);\n        }\n        return strapi.entityService?.create(uid, { ...params, data });\n      }\n\n      return strapi.entityService?.update(uid, entity.id, { ...params, data });\n    },\n\n    /**\n     * Deletes the singleType content\n     *\n     * @return {Promise}\n     */\n    async delete(params = {}) {\n      const entity = await this.find(params);\n\n      if (!entity) return;\n\n      return strapi.entityService?.delete(uid, entity.id);\n    },\n  };\n};\n\nexport default createSingleTypeService;\n"],"names":["contentTypeUtils","propOr","getFetchParams","errors"],"mappings":";;;;AAKA,MAAM;AAAA,EACJ;AAAA,EACA,WAAW,EAAE,uBAAuB;AACtC,IAAIA;AAEJ,MAAM,iBAAiB,CAAC,SAAkC;AACxD,OAAK,sBAAsB,IAAIC,EAAA,2BAAW,QAAQ,wBAAwB,IAAI;AAChF;AAKA,MAAM,0BAA0B,CAAC;AAAA,EAC/B;AACF,MAEkC;AAC1B,QAAA,EAAE,IAAQ,IAAA;AAEJ,SAAA;AAAA,IAAA,gBACVC,eAAA;AAAA;AAAA;AAAA;AAAA,IAIA,KAAK,SAAS,IAAI;AAEd,aAAA,OAAO,eAAe,SAAS,KAA8B,KAAK,eAAe,MAAM,CAAC,KACxF;AAAA,IAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,eAAe,EAAE,MAAM,GAAG,OAAO,IAAI,EAAE,MAAM,CAAA,KAAM;AACjD,YAAA,SAAS,MAAM,KAAK,KAAK,EAAE,GAAG,QAAQ,kBAAkB,UAAA,CAAW;AAEzE,UAAI,CAAC,QAAQ;AACX,cAAM,QAAQ,MAAM,OAAO,MAAM,GAAG,EAAE;AACtC,YAAI,SAAS,GAAG;AACR,gBAAA,IAAIC,YAAO,OAAA,gBAAgB,0BAA0B;AAAA,QAC7D;AAEI,YAAA,mBAAmB,WAAW,GAAG;AACnC,yBAAe,IAAI;AAAA,QACrB;AACO,eAAA,OAAO,eAAe,OAAO,KAAK,EAAE,GAAG,QAAQ,MAAM;AAAA,MAC9D;AAEO,aAAA,OAAO,eAAe,OAAO,KAAK,OAAO,IAAI,EAAE,GAAG,QAAQ,KAAA,CAAM;AAAA,IACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,OAAO,SAAS,IAAI;AACxB,YAAM,SAAS,MAAM,KAAK,KAAK,MAAM;AAErC,UAAI,CAAC;AAAQ;AAEb,aAAO,OAAO,eAAe,OAAO,KAAK,OAAO,EAAE;AAAA,IACpD;AAAA,EAAA;AAEJ;;"}