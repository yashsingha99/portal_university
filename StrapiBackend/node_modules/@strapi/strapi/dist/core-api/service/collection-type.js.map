{"version":3,"file":"collection-type.js","sources":["../../../src/core-api/service/collection-type.ts"],"sourcesContent":["import { propOr } from 'lodash/fp';\nimport { contentTypes } from '@strapi/utils';\nimport type { CoreApi, Schema, Entity } from '@strapi/types';\n\nimport {\n  getPaginationInfo,\n  convertPagedToStartLimit,\n  shouldCount,\n  transformPaginationResponse,\n} from './pagination';\nimport { getFetchParams } from './get-fetch-params';\n\nconst {\n  hasDraftAndPublish,\n  constants: { PUBLISHED_AT_ATTRIBUTE },\n} = contentTypes;\n\nconst setPublishedAt = (data: Record<string, unknown>) => {\n  data[PUBLISHED_AT_ATTRIBUTE] = propOr(new Date(), PUBLISHED_AT_ATTRIBUTE, data);\n};\n\n/**\n *\n * Returns a collection type service to handle default core-api actions\n */\nconst createCollectionTypeService = ({\n  contentType,\n}: {\n  contentType: Schema.CollectionType;\n}): CoreApi.Service.CollectionType => {\n  const { uid } = contentType;\n\n  return <any>{\n    getFetchParams,\n\n    async find(params = {}) {\n      const fetchParams = this.getFetchParams(params);\n\n      const paginationInfo = getPaginationInfo(fetchParams);\n\n      const results = await strapi.entityService?.findMany(uid, {\n        ...fetchParams,\n        ...convertPagedToStartLimit(paginationInfo),\n      });\n\n      if (shouldCount(fetchParams)) {\n        const count = await strapi.entityService?.count(uid, { ...fetchParams, ...paginationInfo });\n\n        if (typeof count !== 'number') {\n          throw new Error('Count should be a number');\n        }\n\n        return {\n          results,\n          pagination: transformPaginationResponse(paginationInfo, count),\n        };\n      }\n\n      return {\n        results,\n        pagination: paginationInfo,\n      };\n    },\n\n    findOne(entityId: Entity.ID, params = {}) {\n      return strapi.entityService?.findOne(uid, entityId, this.getFetchParams(params));\n    },\n\n    create(params = { data: {} }) {\n      const { data } = params;\n\n      if (hasDraftAndPublish(contentType)) {\n        setPublishedAt(data);\n      }\n\n      return strapi.entityService?.create(uid, { ...params, data });\n    },\n\n    update(entityId: Entity.ID, params = { data: {} }) {\n      const { data } = params;\n\n      return strapi.entityService?.update(uid, entityId, { ...params, data });\n    },\n\n    delete(entityId: Entity.ID, params = {}) {\n      return strapi.entityService?.delete(uid, entityId, params);\n    },\n  };\n};\n\nexport default createCollectionTypeService;\n"],"names":["contentTypes","propOr","getFetchParams","getPaginationInfo","convertPagedToStartLimit","shouldCount","transformPaginationResponse"],"mappings":";;;;;AAYA,MAAM;AAAA,EACJ;AAAA,EACA,WAAW,EAAE,uBAAuB;AACtC,IAAIA;AAEJ,MAAM,iBAAiB,CAAC,SAAkC;AACxD,OAAK,sBAAsB,IAAIC,EAAA,2BAAW,QAAQ,wBAAwB,IAAI;AAChF;AAMA,MAAM,8BAA8B,CAAC;AAAA,EACnC;AACF,MAEsC;AAC9B,QAAA,EAAE,IAAQ,IAAA;AAEJ,SAAA;AAAA,IAAA,gBACVC,eAAA;AAAA,IAEA,MAAM,KAAK,SAAS,IAAI;AAChB,YAAA,cAAc,KAAK,eAAe,MAAM;AAExC,YAAA,iBAAiBC,6BAAkB,WAAW;AAEpD,YAAM,UAAU,MAAM,OAAO,eAAe,SAAS,KAAK;AAAA,QACxD,GAAG;AAAA,QACH,GAAGC,WAAAA,yBAAyB,cAAc;AAAA,MAAA,CAC3C;AAEG,UAAAC,WAAAA,YAAY,WAAW,GAAG;AACtB,cAAA,QAAQ,MAAM,OAAO,eAAe,MAAM,KAAK,EAAE,GAAG,aAAa,GAAG,eAAA,CAAgB;AAEtF,YAAA,OAAO,UAAU,UAAU;AACvB,gBAAA,IAAI,MAAM,0BAA0B;AAAA,QAC5C;AAEO,eAAA;AAAA,UACL;AAAA,UACA,YAAYC,WAAAA,4BAA4B,gBAAgB,KAAK;AAAA,QAAA;AAAA,MAEjE;AAEO,aAAA;AAAA,QACL;AAAA,QACA,YAAY;AAAA,MAAA;AAAA,IAEhB;AAAA,IAEA,QAAQ,UAAqB,SAAS,IAAI;AACjC,aAAA,OAAO,eAAe,QAAQ,KAAK,UAAU,KAAK,eAAe,MAAM,CAAC;AAAA,IACjF;AAAA,IAEA,OAAO,SAAS,EAAE,MAAM,MAAM;AACtB,YAAA,EAAE,KAAS,IAAA;AAEb,UAAA,mBAAmB,WAAW,GAAG;AACnC,uBAAe,IAAI;AAAA,MACrB;AAEO,aAAA,OAAO,eAAe,OAAO,KAAK,EAAE,GAAG,QAAQ,MAAM;AAAA,IAC9D;AAAA,IAEA,OAAO,UAAqB,SAAS,EAAE,MAAM,MAAM;AAC3C,YAAA,EAAE,KAAS,IAAA;AAEV,aAAA,OAAO,eAAe,OAAO,KAAK,UAAU,EAAE,GAAG,QAAQ,KAAA,CAAM;AAAA,IACxE;AAAA,IAEA,OAAO,UAAqB,SAAS,IAAI;AACvC,aAAO,OAAO,eAAe,OAAO,KAAK,UAAU,MAAM;AAAA,IAC3D;AAAA,EAAA;AAEJ;;"}