{"version":3,"file":"index.mjs","sources":["../../../src/middlewares/public/index.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport stream from 'stream';\nimport _ from 'lodash';\nimport { defaultsDeep } from 'lodash/fp';\nimport koaStatic from 'koa-static';\nimport type { Strapi, Common } from '@strapi/types';\nimport * as utils from '../../utils';\nimport { serveStatic } from './serve-static';\n\ntype Config = koaStatic.Options;\n\nconst defaults = {\n  maxAge: 60000,\n  defaultIndex: true,\n};\n\nexport const publicStatic: Common.MiddlewareFactory = (\n  config: Config,\n  { strapi }: { strapi: Strapi }\n) => {\n  const { defaultIndex, maxAge } = defaultsDeep(defaults, config);\n\n  if (defaultIndex === true) {\n    const index = fs.readFileSync(path.join(__dirname, 'index.html'), 'utf8');\n\n    const serveIndexPage: Common.MiddlewareHandler = async (ctx, next) => {\n      // defer rendering of strapi index page\n      await next();\n\n      if (ctx.body != null || ctx.status !== 404) return;\n\n      ctx.url = 'index.html';\n      const isInitialized = await utils.isInitialized(strapi);\n      const data = {\n        serverTime: new Date().toUTCString(),\n        isInitialized,\n        ..._.pick(strapi, [\n          'config.info.version',\n          'config.info.name',\n          'config.admin.url',\n          'config.server.url',\n          'config.environment',\n          'config.serveAdminPanel',\n        ]),\n      };\n      const content = _.template(index)(data);\n      const body = new stream.Readable({\n        read() {\n          this.push(Buffer.from(content));\n          this.push(null);\n        },\n      });\n\n      // Serve static.\n      ctx.type = 'html';\n      ctx.body = body;\n    };\n\n    strapi.server.routes([\n      {\n        method: 'GET',\n        path: '/',\n        handler: serveIndexPage,\n        config: { auth: false },\n      },\n      {\n        method: 'GET',\n        path: '/index.html',\n        handler: serveIndexPage,\n        config: { auth: false },\n      },\n      {\n        method: 'GET',\n        path: '/assets/images/(.*)',\n        handler: serveStatic(path.resolve(__dirname, 'assets/images'), {\n          maxage: maxAge,\n          defer: true,\n        }),\n        config: { auth: false },\n      },\n      // All other public GET-routes except /uploads/(.*) which is handled in upload middleware\n      {\n        method: 'GET',\n        path: '/((?!uploads/).+)',\n        handler: koaStatic(strapi.dirs.static.public, {\n          maxage: maxAge,\n          defer: true,\n        }),\n        config: { auth: false },\n      },\n    ]);\n  }\n};\n"],"names":["isInitialized","utils.isInitialized"],"mappings":";;;;;;;;;;AAYA,MAAM,WAAW;AAAA,EACf,QAAQ;AAAA,EACR,cAAc;AAChB;AAEO,MAAM,eAAyC,CACpD,QACA,EAAE,aACC;AACH,QAAM,EAAE,cAAc,OAAA,IAAW,aAAa,UAAU,MAAM;AAE9D,MAAI,iBAAiB,MAAM;AACnB,UAAA,QAAQ,GAAG,aAAa,KAAK,KAAK,WAAW,YAAY,GAAG,MAAM;AAElE,UAAA,iBAA2C,OAAO,KAAK,SAAS;AAEpE,YAAM,KAAK;AAEX,UAAI,IAAI,QAAQ,QAAQ,IAAI,WAAW;AAAK;AAE5C,UAAI,MAAM;AACV,YAAMA,kBAAgB,MAAMC,cAAoB,MAAM;AACtD,YAAM,OAAO;AAAA,QACX,aAAY,oBAAI,KAAK,GAAE,YAAY;AAAA,QAAA,eACnCD;AAAAA,QACA,GAAG,EAAE,KAAK,QAAQ;AAAA,UAChB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QAAA,CACD;AAAA,MAAA;AAEH,YAAM,UAAU,EAAE,SAAS,KAAK,EAAE,IAAI;AAChC,YAAA,OAAO,IAAI,OAAO,SAAS;AAAA,QAC/B,OAAO;AACL,eAAK,KAAK,OAAO,KAAK,OAAO,CAAC;AAC9B,eAAK,KAAK,IAAI;AAAA,QAChB;AAAA,MAAA,CACD;AAGD,UAAI,OAAO;AACX,UAAI,OAAO;AAAA,IAAA;AAGb,WAAO,OAAO,OAAO;AAAA,MACnB;AAAA,QACE,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,SAAS;AAAA,QACT,QAAQ,EAAE,MAAM,MAAM;AAAA,MACxB;AAAA,MACA;AAAA,QACE,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,SAAS;AAAA,QACT,QAAQ,EAAE,MAAM,MAAM;AAAA,MACxB;AAAA,MACA;AAAA,QACE,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,SAAS,YAAY,KAAK,QAAQ,WAAW,eAAe,GAAG;AAAA,UAC7D,QAAQ;AAAA,UACR,OAAO;AAAA,QAAA,CACR;AAAA,QACD,QAAQ,EAAE,MAAM,MAAM;AAAA,MACxB;AAAA;AAAA,MAEA;AAAA,QACE,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,SAAS,UAAU,OAAO,KAAK,OAAO,QAAQ;AAAA,UAC5C,QAAQ;AAAA,UACR,OAAO;AAAA,QAAA,CACR;AAAA,QACD,QAAQ,EAAE,MAAM,MAAM;AAAA,MACxB;AAAA,IAAA,CACD;AAAA,EACH;AACF;"}