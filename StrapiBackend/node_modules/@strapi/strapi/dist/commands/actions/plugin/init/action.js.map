{"version":3,"file":"action.js","sources":["../../../../../src/commands/actions/plugin/init/action.ts"],"sourcesContent":["import path from 'node:path';\nimport boxen from 'boxen';\nimport chalk from 'chalk';\nimport getLatestVersion from 'get-latest-version';\nimport gitUrlParse from 'git-url-parse';\nimport {\n  InitOptions,\n  definePackageFeature,\n  definePackageOption,\n  defineTemplate,\n  init,\n  TemplateFile,\n} from '@strapi/pack-up';\nimport { outdent } from 'outdent';\nimport { notifyExperimentalCommand } from '../../../utils/helpers';\n\nimport { CLIContext } from '../../../types';\nimport { gitIgnoreFile } from './files/gitIgnore';\n\ninterface ActionOptions extends Pick<InitOptions, 'silent' | 'debug'> {}\n\nexport default async (\n  packagePath: string,\n  { silent, debug }: ActionOptions,\n  { logger, cwd }: CLIContext\n) => {\n  try {\n    /**\n     * Notify users this is an experimental command. We don't need to get them to approve first.\n     */\n    await notifyExperimentalCommand('plugin:init', { force: true });\n\n    /**\n     * Create the package // plugin\n     */\n    await init({\n      path: packagePath,\n      cwd,\n      silent,\n      debug,\n      template: PLUGIN_TEMPLATE,\n    });\n\n    logger.info(\"Don't forget to enable your plugin in your configuration files.\");\n  } catch (err) {\n    logger.error(\n      'There seems to be an unexpected error, try again with --debug for more information \\n'\n    );\n    if (err instanceof Error && err.stack) {\n      logger.log(\n        chalk.red(\n          boxen(err.stack, {\n            padding: 1,\n            align: 'left',\n          })\n        )\n      );\n    }\n    process.exit(1);\n  }\n};\n\nconst PACKAGE_NAME_REGEXP = /^(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)\\/)?[a-z0-9-~][a-z0-9-._~]*$/i;\n\ninterface PackageExport {\n  types?: string;\n  require: string;\n  import: string;\n  source: string;\n  default: string;\n}\n\ninterface PluginPackageJson {\n  name?: string;\n  description?: string;\n  version?: string;\n  keywords?: string[];\n  type: 'commonjs';\n  license?: string;\n  repository?: {\n    type: 'git';\n    url: string;\n  };\n  bugs?: {\n    url: string;\n  };\n  homepage?: string;\n  author?: string;\n  exports: {\n    './strapi-admin'?: PackageExport;\n    './strapi-server'?: PackageExport;\n    './package.json': `${string}.json`;\n  };\n  files: string[];\n  scripts: Record<string, string>;\n  dependencies: Record<string, string>;\n  devDependencies: Record<string, string>;\n  peerDependencies: Record<string, string>;\n  strapi: {\n    name?: string;\n    displayName?: string;\n    description?: string;\n    kind: 'plugin';\n  };\n}\n\nconst PLUGIN_TEMPLATE = defineTemplate(async ({ logger, gitConfig, packagePath }) => {\n  let repo: {\n    source?: string;\n    owner?: string;\n    name?: string;\n  };\n\n  const [packageFolder] = packagePath.split(path.sep).slice(-1);\n\n  return {\n    prompts: [\n      definePackageOption({\n        name: 'repo',\n        type: 'text',\n        message: 'git url',\n        validate(v) {\n          if (!v) {\n            return true;\n          }\n\n          try {\n            const result = gitUrlParse(v);\n\n            repo = { source: result.source, owner: result.owner, name: result.name };\n\n            return true;\n          } catch (err) {\n            return 'invalid git url';\n          }\n        },\n      }),\n      definePackageOption({\n        name: 'pkgName',\n        type: 'text',\n        message: 'plugin name',\n        initial: () => repo?.name ?? '',\n        validate(v) {\n          if (!v) {\n            return 'package name is required';\n          }\n\n          const match = PACKAGE_NAME_REGEXP.exec(v);\n\n          if (!match) {\n            return 'invalid package name';\n          }\n\n          return true;\n        },\n      }),\n      definePackageOption({\n        name: 'displayName',\n        type: 'text',\n        message: 'plugin display name',\n      }),\n      definePackageOption({\n        name: 'description',\n        type: 'text',\n        message: 'plugin description',\n      }),\n      definePackageOption({\n        name: 'authorName',\n        type: 'text',\n        message: 'plugin author name',\n        initial: gitConfig?.user?.name,\n      }),\n      definePackageOption({\n        name: 'authorEmail',\n        type: 'text',\n        message: 'plugin author email',\n        initial: gitConfig?.user?.email,\n      }),\n      definePackageOption({\n        name: 'license',\n        type: 'text',\n        message: 'plugin license',\n        initial: 'MIT',\n        validate(v) {\n          if (!v) {\n            return 'license is required';\n          }\n\n          return true;\n        },\n      }),\n      definePackageOption({\n        name: 'client-code',\n        type: 'confirm',\n        message: 'register with the admin panel?',\n        initial: true,\n      }),\n      definePackageOption({\n        name: 'server-code',\n        type: 'confirm',\n        message: 'register with the server?',\n        initial: true,\n      }),\n      definePackageFeature({\n        name: 'editorconfig',\n        initial: true,\n        optional: true,\n      }),\n      definePackageFeature({\n        name: 'eslint',\n        initial: true,\n        optional: true,\n      }),\n      definePackageFeature({\n        name: 'prettier',\n        initial: true,\n        optional: true,\n      }),\n      definePackageFeature({\n        name: 'typescript',\n        initial: true,\n        optional: true,\n      }),\n    ],\n    async getFiles(answers) {\n      const author: string[] = [];\n\n      const files: TemplateFile[] = [];\n\n      // package.json\n      const pkgJson: PluginPackageJson = {\n        version: '0.0.0',\n        keywords: [],\n        type: 'commonjs',\n        exports: {\n          './package.json': './package.json',\n        },\n        files: ['dist'],\n        scripts: {\n          build: 'strapi plugin:build',\n          watch: 'strapi plugin:watch',\n          'watch:link': 'strapi plugin:watch:link',\n          verify: 'strapi plugin:verify',\n        },\n        dependencies: {},\n        devDependencies: {\n          /**\n           * We set * as a default version, but further down\n           * we try to resolve each package to their latest\n           * version, failing that we leave the fallback of *.\n           */\n          '@strapi/strapi': '*',\n          prettier: '*',\n        },\n        peerDependencies: {\n          '@strapi/strapi': '^4.0.0',\n        },\n        strapi: {\n          kind: 'plugin',\n        },\n      };\n\n      if (Array.isArray(answers)) {\n        for (const ans of answers) {\n          const { name, answer } = ans;\n\n          switch (name) {\n            case 'pkgName': {\n              pkgJson.name = String(answer);\n              pkgJson.strapi.name = String(answer);\n              break;\n            }\n            case 'description': {\n              pkgJson.description = String(answer) ?? undefined;\n              pkgJson.strapi.description = String(answer) ?? undefined;\n              break;\n            }\n            case 'displayName': {\n              pkgJson.strapi.displayName = String(answer) ?? undefined;\n              break;\n            }\n            case 'authorName': {\n              author.push(String(answer));\n              break;\n            }\n            case 'authorEmail': {\n              if (answer) {\n                author.push(`<${answer}>`);\n              }\n              break;\n            }\n            case 'license': {\n              pkgJson.license = String(answer);\n              break;\n            }\n            case 'client-code': {\n              if (answer) {\n                pkgJson.exports['./strapi-admin'] = {\n                  source: './admin/src/index.js',\n                  import: './dist/admin/index.mjs',\n                  require: './dist/admin/index.js',\n                  default: './dist/admin/index.js',\n                };\n\n                pkgJson.dependencies = {\n                  ...pkgJson.dependencies,\n                  '@strapi/helper-plugin': '*',\n                  '@strapi/design-system': '*',\n                  '@strapi/icons': '*',\n                };\n\n                pkgJson.devDependencies = {\n                  ...pkgJson.devDependencies,\n                  react: '*',\n                  'react-dom': '*',\n                  'react-router-dom': '5.3.4',\n                  'styled-components': '5.3.3',\n                };\n\n                pkgJson.peerDependencies = {\n                  ...pkgJson.peerDependencies,\n                  react: '^17.0.0 || ^18.0.0',\n                  'react-dom': '^17.0.0 || ^18.0.0',\n                  'react-router-dom': '5.2.0',\n                  'styled-components': '5.2.1',\n                };\n              }\n\n              break;\n            }\n            case 'server-code': {\n              if (answer) {\n                pkgJson.exports['./strapi-server'] = {\n                  source: './server/src/index.js',\n                  import: './dist/server/index.mjs',\n                  require: './dist/server/index.js',\n                  default: './dist/server/index.js',\n                };\n\n                pkgJson.files.push('./strapi-server.js');\n\n                files.push({\n                  name: 'strapi-server.js',\n                  contents: outdent`\n                      'use strict';\n  \n                      module.exports = require('./dist/server');\n                  `,\n                });\n              }\n\n              break;\n            }\n            case 'typescript': {\n              const isTypescript = Boolean(answer);\n\n              if (isTypescript) {\n                if (isRecord(pkgJson.exports['./strapi-admin'])) {\n                  pkgJson.exports['./strapi-admin'].source = './admin/src/index.ts';\n\n                  pkgJson.exports['./strapi-admin'] = {\n                    types: './dist/admin/src/index.d.ts',\n                    ...pkgJson.exports['./strapi-admin'],\n                  };\n\n                  pkgJson.scripts = {\n                    ...pkgJson.scripts,\n                    'test:ts:front': 'run -T tsc -p admin/tsconfig.json',\n                  };\n\n                  pkgJson.devDependencies = {\n                    ...pkgJson.devDependencies,\n                    '@types/react': '*',\n                    '@types/react-dom': '*',\n                    '@types/react-router-dom': '5.3.3',\n                    '@types/styled-components': '5.1.32',\n                  };\n\n                  const { adminTsconfigFiles } = await import('./files/typescript');\n\n                  files.push(adminTsconfigFiles.tsconfigBuildFile, adminTsconfigFiles.tsconfigFile);\n                }\n\n                if (isRecord(pkgJson.exports['./strapi-server'])) {\n                  pkgJson.exports['./strapi-server'].source = './server/src/index.ts';\n\n                  pkgJson.exports['./strapi-server'] = {\n                    types: './dist/server/src/index.d.ts',\n                    ...pkgJson.exports['./strapi-server'],\n                  };\n\n                  pkgJson.scripts = {\n                    ...pkgJson.scripts,\n                    'test:ts:back': 'run -T tsc -p server/tsconfig.json',\n                  };\n\n                  const { serverTsconfigFiles } = await import('./files/typescript');\n\n                  files.push(\n                    serverTsconfigFiles.tsconfigBuildFile,\n                    serverTsconfigFiles.tsconfigFile\n                  );\n                }\n\n                pkgJson.devDependencies = {\n                  ...pkgJson.devDependencies,\n                  '@strapi/typescript-utils': '*',\n                  typescript: '*',\n                };\n              }\n\n              /**\n               * This is where we add all the source files regardless\n               * of whether they are typescript or javascript.\n               */\n              if (isRecord(pkgJson.exports['./strapi-admin'])) {\n                files.push({\n                  name: isTypescript ? 'admin/src/pluginId.ts' : 'admin/src/pluginId.js',\n                  contents: outdent`\n                    export const PLUGIN_ID = '${pkgJson.name!.replace(/^strapi-plugin-/i, '')}';\n                  `,\n                });\n\n                if (isTypescript) {\n                  const { adminTypescriptFiles } = await import('./files/admin');\n\n                  files.push(...adminTypescriptFiles);\n                } else {\n                  const { adminJavascriptFiles } = await import('./files/admin');\n\n                  files.push(...adminJavascriptFiles);\n                }\n              }\n\n              if (isRecord(pkgJson.exports['./strapi-server'])) {\n                if (isTypescript) {\n                  const { serverTypescriptFiles } = await import('./files/server');\n\n                  files.push(...serverTypescriptFiles(packageFolder));\n                } else {\n                  const { serverJavascriptFiles } = await import('./files/server');\n\n                  files.push(...serverJavascriptFiles(packageFolder));\n                }\n              }\n\n              break;\n            }\n            case 'eslint': {\n              if (answer) {\n                const { eslintIgnoreFile } = await import('./files/eslint');\n\n                files.push(eslintIgnoreFile);\n              }\n\n              break;\n            }\n            case 'prettier': {\n              if (answer) {\n                const { prettierFile, prettierIgnoreFile } = await import('./files/prettier');\n\n                files.push(prettierFile, prettierIgnoreFile);\n              }\n              break;\n            }\n            case 'editorconfig': {\n              if (answer) {\n                const { editorConfigFile } = await import('./files/editorConfig');\n\n                files.push(editorConfigFile);\n              }\n              break;\n            }\n            default:\n              break;\n          }\n        }\n      }\n\n      if (repo) {\n        pkgJson.repository = {\n          type: 'git',\n          url: `git+ssh://git@${repo.source}/${repo.owner}/${repo.name}.git`,\n        };\n        pkgJson.bugs = {\n          url: `https://${repo.source}/${repo.owner}/${repo.name}/issues`,\n        };\n        pkgJson.homepage = `https://${repo.source}/${repo.owner}/${repo.name}#readme`;\n      }\n\n      pkgJson.author = author.filter(Boolean).join(' ') ?? undefined;\n\n      try {\n        pkgJson.devDependencies = await resolveLatestVerisonOfDeps(pkgJson.devDependencies);\n        pkgJson.dependencies = await resolveLatestVerisonOfDeps(pkgJson.dependencies);\n        pkgJson.peerDependencies = await resolveLatestVerisonOfDeps(pkgJson.peerDependencies);\n      } catch (err) {\n        if (err instanceof Error) {\n          logger.error(err.message);\n        } else {\n          logger.error(err);\n        }\n      }\n\n      files.push({\n        name: 'package.json',\n        contents: outdent`\n            ${JSON.stringify(pkgJson, null, 2)}\n          `,\n      });\n\n      files.push({\n        name: 'README.md',\n        contents: outdent`\n            # ${pkgJson.name}\n\n            ${pkgJson.description ?? ''}\n        `,\n      });\n\n      files.push(gitIgnoreFile);\n\n      return files;\n    },\n  };\n});\n\nconst isRecord = (value: unknown): value is Record<string, unknown> =>\n  Boolean(value) && !Array.isArray(value) && typeof value === 'object';\n\nconst resolveLatestVerisonOfDeps = async (\n  deps: Record<string, string>\n): Promise<Record<string, string>> => {\n  const latestDeps: Record<string, string> = {};\n\n  for (const [name, version] of Object.entries(deps)) {\n    try {\n      const latestVersion = await getLatestVersion(name, version);\n      latestDeps[name] = latestVersion ? `^${latestVersion}` : '*';\n    } catch (err) {\n      latestDeps[name] = '*';\n    }\n  }\n\n  return latestDeps;\n};\n"],"names":["notifyExperimentalCommand","init","chalk","boxen","defineTemplate","path","definePackageOption","gitUrlParse","definePackageFeature","outdent","gitIgnoreFile","getLatestVersion"],"mappings":"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"}