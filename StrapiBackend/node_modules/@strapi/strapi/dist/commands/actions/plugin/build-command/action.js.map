{"version":3,"file":"action.js","sources":["../../../../../src/commands/actions/plugin/build-command/action.ts"],"sourcesContent":["import boxen from 'boxen';\nimport chalk from 'chalk';\nimport { BuildCLIOptions, ConfigBundle, build } from '@strapi/pack-up';\nimport { notifyExperimentalCommand } from '../../../utils/helpers';\nimport { Export, loadPkg, validatePkg } from '../../../utils/pkg';\nimport { CLIContext } from '../../../types';\n\ninterface ActionOptions extends BuildCLIOptions {\n  force?: boolean;\n}\n\nexport default async (\n  { force, ...opts }: ActionOptions,\n  _cmd: unknown,\n  { logger, cwd }: CLIContext\n) => {\n  try {\n    /**\n     * ALWAYS set production for using plugin build CLI.\n     */\n    process.env.NODE_ENV = 'production';\n    /**\n     * Notify users this is an experimental command and get them to approve first\n     * this can be opted out by setting the argument --force\n     */\n    await notifyExperimentalCommand('plugin:build', { force });\n\n    const pkg = await loadPkg({ cwd, logger });\n    const pkgJson = await validatePkg({ pkg });\n\n    if (!pkgJson.exports['./strapi-admin'] && !pkgJson.exports['./strapi-server']) {\n      throw new Error(\n        'You need to have either a strapi-admin or strapi-server export in your package.json'\n      );\n    }\n\n    const bundles: ConfigBundle[] = [];\n\n    if (pkgJson.exports['./strapi-admin']) {\n      const exp = pkgJson.exports['./strapi-admin'] as Export;\n\n      const bundle: ConfigBundle = {\n        source: exp.source,\n        import: exp.import,\n        require: exp.require,\n        runtime: 'web',\n      };\n\n      if (exp.types) {\n        bundle.types = exp.types;\n        // TODO: should this be sliced from the source path...?\n        bundle.tsconfig = './admin/tsconfig.build.json';\n      }\n\n      bundles.push(bundle);\n    }\n\n    if (pkgJson.exports['./strapi-server']) {\n      const exp = pkgJson.exports['./strapi-server'] as Export;\n\n      const bundle: ConfigBundle = {\n        source: exp.source,\n        import: exp.import,\n        require: exp.require,\n        runtime: 'node',\n      };\n\n      if (exp.types) {\n        bundle.types = exp.types;\n        // TODO: should this be sliced from the source path...?\n        bundle.tsconfig = './server/tsconfig.build.json';\n      }\n\n      bundles.push(bundle);\n    }\n\n    await build({\n      cwd,\n      configFile: false,\n      config: {\n        bundles,\n        dist: './dist',\n        /**\n         * ignore the exports map of a plugin, because we're streamlining the\n         * process and ensuring the server package and admin package are built\n         * with the correct runtime and their individual tsconfigs\n         */\n        exports: {},\n      },\n      ...opts,\n    });\n  } catch (err) {\n    logger.error(\n      'There seems to be an unexpected error, try again with --debug for more information \\n'\n    );\n    if (err instanceof Error && err.stack) {\n      console.log(\n        chalk.red(\n          boxen(err.stack, {\n            padding: 1,\n            align: 'left',\n          })\n        )\n      );\n    }\n    process.exit(1);\n  }\n};\n"],"names":["notifyExperimentalCommand","pkg","loadPkg","validatePkg","build","chalk","boxen"],"mappings":";;;;;;;;;AAWA,MAAA,SAAe,OACb,EAAE,OAAO,GAAG,KAAA,GACZ,MACA,EAAE,QAAQ,UACP;AACC,MAAA;AAIF,YAAQ,IAAI,WAAW;AAKvB,UAAMA,kCAA0B,gBAAgB,EAAE,MAAO,CAAA;AAEzD,UAAMC,QAAM,MAAMC,IAAA,QAAQ,EAAE,KAAK,OAAQ,CAAA;AACzC,UAAM,UAAU,MAAMC,IAAAA,YAAY,EAAEF,KAAAA,MAAK,CAAA;AAErC,QAAA,CAAC,QAAQ,QAAQ,gBAAgB,KAAK,CAAC,QAAQ,QAAQ,iBAAiB,GAAG;AAC7E,YAAM,IAAI;AAAA,QACR;AAAA,MAAA;AAAA,IAEJ;AAEA,UAAM,UAA0B,CAAA;AAE5B,QAAA,QAAQ,QAAQ,gBAAgB,GAAG;AAC/B,YAAA,MAAM,QAAQ,QAAQ,gBAAgB;AAE5C,YAAM,SAAuB;AAAA,QAC3B,QAAQ,IAAI;AAAA,QACZ,QAAQ,IAAI;AAAA,QACZ,SAAS,IAAI;AAAA,QACb,SAAS;AAAA,MAAA;AAGX,UAAI,IAAI,OAAO;AACb,eAAO,QAAQ,IAAI;AAEnB,eAAO,WAAW;AAAA,MACpB;AAEA,cAAQ,KAAK,MAAM;AAAA,IACrB;AAEI,QAAA,QAAQ,QAAQ,iBAAiB,GAAG;AAChC,YAAA,MAAM,QAAQ,QAAQ,iBAAiB;AAE7C,YAAM,SAAuB;AAAA,QAC3B,QAAQ,IAAI;AAAA,QACZ,QAAQ,IAAI;AAAA,QACZ,SAAS,IAAI;AAAA,QACb,SAAS;AAAA,MAAA;AAGX,UAAI,IAAI,OAAO;AACb,eAAO,QAAQ,IAAI;AAEnB,eAAO,WAAW;AAAA,MACpB;AAEA,cAAQ,KAAK,MAAM;AAAA,IACrB;AAEA,UAAMG,aAAM;AAAA,MACV;AAAA,MACA,YAAY;AAAA,MACZ,QAAQ;AAAA,QACN;AAAA,QACA,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMN,SAAS,CAAC;AAAA,MACZ;AAAA,MACA,GAAG;AAAA,IAAA,CACJ;AAAA,WACM,KAAK;AACL,WAAA;AAAA,MACL;AAAA,IAAA;AAEE,QAAA,eAAe,SAAS,IAAI,OAAO;AAC7B,cAAA;AAAA,QACNC,eAAAA,QAAM;AAAA,UACJC,eAAA,QAAM,IAAI,OAAO;AAAA,YACf,SAAS;AAAA,YACT,OAAO;AAAA,UAAA,CACR;AAAA,QACH;AAAA,MAAA;AAAA,IAEJ;AACA,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;;"}