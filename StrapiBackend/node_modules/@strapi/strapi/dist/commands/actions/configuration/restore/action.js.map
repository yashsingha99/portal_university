{"version":3,"file":"action.js","sources":["../../../../../src/commands/actions/configuration/restore/action.ts"],"sourcesContent":["import fs from 'fs';\nimport _ from 'lodash';\nimport type { Database } from '@strapi/database';\n\nimport strapi from '../../../../Strapi';\n\ntype Strategy = 'replace' | 'merge' | 'keep';\n\ninterface CmdOptions {\n  file?: string;\n  strategy?: Strategy;\n}\n\n/**\n * Will restore configurations. It reads from a file or stdin\n */\nexport default async ({ file: filePath, strategy = 'replace' }: CmdOptions) => {\n  const input = filePath ? fs.readFileSync(filePath) : await readStdin();\n\n  const appContext = await strapi.compile();\n  const app = await strapi(appContext).load();\n\n  let dataToImport;\n  try {\n    dataToImport = JSON.parse(_.toString(input));\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new Error(`Invalid input data: ${error.message}. Expected a valid JSON array.`);\n    }\n\n    throw error;\n  }\n\n  if (!Array.isArray(dataToImport)) {\n    throw new Error(`Invalid input data. Expected a valid JSON array.`);\n  }\n\n  if (!app.db) {\n    throw new Error('Cannot import configuration without a database connection.');\n  }\n\n  const importer = createImporter(app.db, strategy);\n\n  for (const config of dataToImport) {\n    await importer.import(config);\n  }\n\n  console.log(\n    `Successfully imported configuration with ${strategy} strategy. Statistics: ${importer.printStatistics()}.`\n  );\n\n  process.exit(0);\n};\n\nconst readStdin = () => {\n  const { stdin } = process;\n  let result = '';\n\n  if (stdin.isTTY) return Promise.resolve(result);\n\n  return new Promise((resolve, reject) => {\n    stdin.setEncoding('utf8');\n    stdin.on('readable', () => {\n      let chunk;\n      // eslint-disable-next-line no-cond-assign\n      while ((chunk = stdin.read())) {\n        result += chunk;\n      }\n    });\n\n    stdin.on('end', () => {\n      resolve(result);\n    });\n\n    stdin.on('error', reject);\n  });\n};\n\nconst createImporter = (db: Database, strategy?: Strategy) => {\n  switch (strategy) {\n    case 'replace':\n      return createReplaceImporter(db);\n    case 'merge':\n      return createMergeImporter(db);\n    case 'keep':\n      return createKeepImporter(db);\n    default:\n      throw new Error(`No importer available for strategy \"${strategy}\"`);\n  }\n};\n\n/**\n * Replace importer. Will replace the keys that already exist and create the new ones\n */\nconst createReplaceImporter = (db: Database) => {\n  const stats = {\n    created: 0,\n    replaced: 0,\n  };\n\n  return {\n    printStatistics() {\n      return `${stats.created} created, ${stats.replaced} replaced`;\n    },\n\n    async import(conf: Record<string, unknown>) {\n      const matching = await db.query('strapi::core-store').count({ where: { key: conf.key } });\n      if (matching > 0) {\n        stats.replaced += 1;\n        await db.query('strapi::core-store').update({\n          where: { key: conf.key },\n          data: conf,\n        });\n      } else {\n        stats.created += 1;\n        await db.query('strapi::core-store').create({ data: conf });\n      }\n    },\n  };\n};\n\n/**\n * Merge importer. Will merge the keys that already exist with their new value and create the new ones\n */\nconst createMergeImporter = (db: Database) => {\n  const stats = {\n    created: 0,\n    merged: 0,\n  };\n\n  return {\n    printStatistics() {\n      return `${stats.created} created, ${stats.merged} merged`;\n    },\n\n    async import(conf: Record<string, unknown>) {\n      const existingConf = await db\n        .query('strapi::core-store')\n        .findOne({ where: { key: conf.key } });\n\n      if (existingConf) {\n        stats.merged += 1;\n        await db.query('strapi::core-store').update({\n          where: { key: conf.key },\n          data: _.merge(existingConf, conf),\n        });\n      } else {\n        stats.created += 1;\n        await db.query('strapi::core-store').create({ data: conf });\n      }\n    },\n  };\n};\n\n/**\n * Merge importer. Will keep the keys that already exist without changing them and create the new ones\n */\nconst createKeepImporter = (db: Database) => {\n  const stats = {\n    created: 0,\n    untouched: 0,\n  };\n\n  return {\n    printStatistics() {\n      return `${stats.created} created, ${stats.untouched} untouched`;\n    },\n\n    async import(conf: Record<string, unknown>) {\n      const matching = await db.query('strapi::core-store').count({ where: { key: conf.key } });\n      if (matching > 0) {\n        stats.untouched += 1;\n        // if configuration already exists do not overwrite it\n        return;\n      }\n\n      stats.created += 1;\n      await db.query('strapi::core-store').create({ data: conf });\n    },\n  };\n};\n"],"names":["fs","strapi","_"],"mappings":"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"}