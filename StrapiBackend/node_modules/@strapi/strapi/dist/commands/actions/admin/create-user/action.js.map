{"version":3,"file":"action.js","sources":["../../../../../src/commands/actions/admin/create-user/action.ts"],"sourcesContent":["import { yup } from '@strapi/utils';\nimport _ from 'lodash';\nimport inquirer from 'inquirer';\nimport strapi from '../../../../Strapi';\n\ninterface CmdOptions {\n  email?: string;\n  password?: string;\n  firstname?: string;\n  lastname?: string;\n}\n\nconst emailValidator = yup.string().email('Invalid email address').lowercase();\n\nconst passwordValidator = yup\n  .string()\n  .min(8, 'Password must be at least 8 characters long')\n  .matches(/[a-z]/, 'Password must contain at least one lowercase character')\n  .matches(/[A-Z]/, 'Password must contain at least one uppercase character')\n  .matches(/\\d/, 'Password must contain at least one number');\n\nconst adminCreateSchema = yup.object().shape({\n  email: emailValidator,\n  password: passwordValidator,\n  firstname: yup.string().trim().required('First name is required'),\n  lastname: yup.string(),\n});\n\ninterface Answers {\n  email: string;\n  password: string;\n  firstname: string;\n  lastname: string;\n  confirm: boolean;\n}\n\n/**\n * It's not an observable, in reality this is\n * `ReadOnlyArray<inquirer.DistinctQuestion<Answers>>`\n * but then the logic of the validate function needs to change.\n */\n// eslint-disable-next-line rxjs/finnish\nconst promptQuestions: inquirer.QuestionCollection<Answers> = [\n  {\n    type: 'input',\n    name: 'email',\n    message: 'Admin email?',\n    async validate(value: string) {\n      const validEmail = await emailValidator.validate(value);\n      return validEmail === value || validEmail;\n    },\n  },\n  {\n    type: 'password',\n    name: 'password',\n    message: 'Admin password?',\n    async validate(value: string) {\n      const validPassword = await passwordValidator.validate(value);\n      return validPassword === value || validPassword;\n    },\n  },\n  { type: 'input', name: 'firstname', message: 'First name?' },\n  { type: 'input', name: 'lastname', message: 'Last name?' },\n  {\n    type: 'confirm',\n    name: 'confirm',\n    message: 'Do you really want to create a new admin?',\n  },\n];\n\n/**\n * Create new admin user\n */\nexport default async (cmdOptions: CmdOptions = {}) => {\n  let { email, password, firstname, lastname } = cmdOptions;\n\n  if (\n    _.isEmpty(email) &&\n    _.isEmpty(password) &&\n    _.isEmpty(firstname) &&\n    _.isEmpty(lastname) &&\n    process.stdin.isTTY\n  ) {\n    const inquiry = await inquirer.prompt(promptQuestions);\n\n    if (!inquiry.confirm) {\n      process.exit(0);\n    }\n\n    ({ email, password, firstname, lastname } = inquiry);\n  }\n\n  try {\n    await adminCreateSchema.validate({ email, password, firstname, lastname });\n  } catch (err) {\n    if (err instanceof yup.ValidationError) {\n      console.error(err.errors[0]);\n    }\n\n    process.exit(1);\n  }\n\n  return createAdmin({ email, password, firstname, lastname });\n};\n\nasync function createAdmin({ email, password, firstname, lastname }: CmdOptions) {\n  const appContext = await strapi.compile();\n  const app = await strapi(appContext).load();\n\n  const user = await app.admin.services.user.exists({ email });\n\n  if (user) {\n    console.error(`User with email \"${email}\" already exists`);\n    process.exit(1);\n  }\n\n  const superAdminRole = await app.admin.services.role.getSuperAdmin();\n\n  await app.admin.services.user.create({\n    email,\n    firstname,\n    lastname,\n    isActive: true,\n    roles: [superAdminRole.id],\n    ...(password && { password, registrationToken: null }),\n  });\n\n  console.log(`Successfully created new admin`);\n  process.exit(0);\n}\n"],"names":["yup","_","inquirer","strapi"],"mappings":";;;;;;;;AAYA,MAAM,iBAAiBA,YAAI,IAAA,SAAS,MAAM,uBAAuB,EAAE;AAEnE,MAAM,oBAAoBA,YACvB,IAAA,SACA,IAAI,GAAG,6CAA6C,EACpD,QAAQ,SAAS,wDAAwD,EACzE,QAAQ,SAAS,wDAAwD,EACzE,QAAQ,MAAM,2CAA2C;AAE5D,MAAM,oBAAoBA,YAAA,IAAI,OAAO,EAAE,MAAM;AAAA,EAC3C,OAAO;AAAA,EACP,UAAU;AAAA,EACV,WAAWA,YAAI,IAAA,OAAA,EAAS,KAAK,EAAE,SAAS,wBAAwB;AAAA,EAChE,UAAUA,gBAAI,OAAO;AACvB,CAAC;AAgBD,MAAM,kBAAwD;AAAA,EAC5D;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,MAAM,SAAS,OAAe;AAC5B,YAAM,aAAa,MAAM,eAAe,SAAS,KAAK;AACtD,aAAO,eAAe,SAAS;AAAA,IACjC;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,MAAM,SAAS,OAAe;AAC5B,YAAM,gBAAgB,MAAM,kBAAkB,SAAS,KAAK;AAC5D,aAAO,kBAAkB,SAAS;AAAA,IACpC;AAAA,EACF;AAAA,EACA,EAAE,MAAM,SAAS,MAAM,aAAa,SAAS,cAAc;AAAA,EAC3D,EAAE,MAAM,SAAS,MAAM,YAAY,SAAS,aAAa;AAAA,EACzD;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AACF;AAKA,MAAA,SAAe,OAAO,aAAyB,CAAA,MAAO;AACpD,MAAI,EAAE,OAAO,UAAU,WAAW,aAAa;AAE/C,MACEC,WAAAA,QAAE,QAAQ,KAAK,KACfA,WAAAA,QAAE,QAAQ,QAAQ,KAClBA,WAAA,QAAE,QAAQ,SAAS,KACnBA,WAAAA,QAAE,QAAQ,QAAQ,KAClB,QAAQ,MAAM,OACd;AACA,UAAM,UAAU,MAAMC,kBAAAA,QAAS,OAAO,eAAe;AAEjD,QAAA,CAAC,QAAQ,SAAS;AACpB,cAAQ,KAAK,CAAC;AAAA,IAChB;AAEA,KAAC,EAAE,OAAO,UAAU,WAAW,aAAa;AAAA,EAC9C;AAEI,MAAA;AACF,UAAM,kBAAkB,SAAS,EAAE,OAAO,UAAU,WAAW,UAAU;AAAA,WAClE,KAAK;AACR,QAAA,eAAeF,gBAAI,iBAAiB;AACtC,cAAQ,MAAM,IAAI,OAAO,CAAC,CAAC;AAAA,IAC7B;AAEA,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEA,SAAO,YAAY,EAAE,OAAO,UAAU,WAAW,UAAU;AAC7D;AAEA,eAAe,YAAY,EAAE,OAAO,UAAU,WAAW,YAAwB;AACzE,QAAA,aAAa,MAAMG,OAAO;AAChC,QAAM,MAAM,MAAMA,OAAO,UAAU,EAAE,KAAK;AAEpC,QAAA,OAAO,MAAM,IAAI,MAAM,SAAS,KAAK,OAAO,EAAE,MAAA,CAAO;AAE3D,MAAI,MAAM;AACA,YAAA,MAAM,oBAAoB,KAAK,kBAAkB;AACzD,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEA,QAAM,iBAAiB,MAAM,IAAI,MAAM,SAAS,KAAK;AAErD,QAAM,IAAI,MAAM,SAAS,KAAK,OAAO;AAAA,IACnC;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV,OAAO,CAAC,eAAe,EAAE;AAAA,IACzB,GAAI,YAAY,EAAE,UAAU,mBAAmB,KAAK;AAAA,EAAA,CACrD;AAED,UAAQ,IAAI,gCAAgC;AAC5C,UAAQ,KAAK,CAAC;AAChB;;"}