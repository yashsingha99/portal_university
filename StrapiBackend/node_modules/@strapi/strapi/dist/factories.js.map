{"version":3,"file":"factories.js","sources":["../src/factories.ts"],"sourcesContent":["import { pipe, omit, pick } from 'lodash/fp';\nimport type { Strapi, Common, CoreApi, Utils } from '@strapi/types';\n\nimport { createController } from './core-api/controller';\nimport { createService } from './core-api/service';\nimport { createRoutes } from './core-api/routes';\n\nconst symbols = {\n  CustomController: Symbol('StrapiCustomCoreController'),\n} as const;\n\ntype WithStrapiCallback<T> = T | (<S extends { strapi: Strapi }>(params: S) => T);\n\n// Content type is proxied to allow for dynamic content type updates\nconst getContentTypeProxy = (strapi: Strapi, uid: Common.UID.ContentType) => {\n  return new Proxy(strapi.contentType(uid), {\n    get(target, prop) {\n      const contentType = strapi.contentType(uid);\n      if (prop in contentType) {\n        return contentType[prop as keyof typeof contentType];\n      }\n    },\n  });\n};\n\nconst createCoreController = <\n  TUID extends Common.UID.ContentType,\n  TController extends CoreApi.Controller.Extendable<TUID>\n>(\n  uid: TUID,\n  cfg?: WithStrapiCallback<Utils.PartialWithThis<CoreApi.Controller.Extendable<TUID> & TController>>\n) => {\n  return ({ strapi }: { strapi: Strapi }): TController & CoreApi.Controller.ContentType<TUID> => {\n    const baseController = createController({ contentType: getContentTypeProxy(strapi, uid) });\n\n    const userCtrl = typeof cfg === 'function' ? cfg({ strapi }) : cfg ?? ({} as any);\n\n    for (const methodName of Object.keys(baseController) as Array<keyof typeof baseController>) {\n      if (userCtrl[methodName] === undefined) {\n        userCtrl[methodName] = baseController[methodName];\n      }\n    }\n\n    Object.setPrototypeOf(userCtrl, baseController);\n\n    const isCustom = typeof cfg !== 'undefined';\n    if (isCustom) {\n      Object.defineProperty(userCtrl, symbols.CustomController, {\n        writable: false,\n        configurable: false,\n        enumerable: false,\n      });\n    }\n\n    return userCtrl;\n  };\n};\n\nfunction createCoreService<\n  TUID extends Common.UID.ContentType,\n  TService extends CoreApi.Service.Extendable<TUID>\n>(\n  uid: TUID,\n  cfg?: WithStrapiCallback<Utils.PartialWithThis<CoreApi.Service.Extendable<TUID> & TService>>\n) {\n  return ({ strapi }: { strapi: Strapi }): TService & CoreApi.Service.ContentType<TUID> => {\n    const baseService = createService({ contentType: getContentTypeProxy(strapi, uid) });\n\n    const userService = typeof cfg === 'function' ? cfg({ strapi }) : cfg ?? ({} as any);\n\n    for (const methodName of Object.keys(baseService) as Array<keyof typeof baseService>) {\n      if (userService[methodName] === undefined) {\n        userService[methodName] = baseService[methodName];\n      }\n    }\n\n    Object.setPrototypeOf(userService, baseService);\n    return userService;\n  };\n}\n\nfunction createCoreRouter<T extends Common.UID.ContentType>(\n  uid: T,\n  cfg?: CoreApi.Router.RouterConfig<T>\n): CoreApi.Router.Router {\n  const { prefix, config = {}, only, except, type = 'content-api' } = cfg ?? {};\n  let routes: CoreApi.Router.Route[];\n\n  return {\n    type,\n    prefix,\n    get routes() {\n      if (!routes) {\n        const contentType = strapi.contentType(uid);\n\n        const defaultRoutes = createRoutes({ contentType });\n        const keys = Object.keys(defaultRoutes) as Array<keyof typeof defaultRoutes>;\n\n        keys.forEach((routeName) => {\n          const defaultRoute = defaultRoutes[routeName];\n\n          Object.assign(defaultRoute.config, config[routeName] || {});\n        });\n\n        const selectedRoutes = pipe(\n          (routes) => (except ? omit(except, routes) : routes),\n          (routes) => (only ? pick(only, routes) : routes)\n        )(defaultRoutes);\n\n        routes = Object.values(selectedRoutes);\n      }\n\n      return routes;\n    },\n  };\n}\n\nconst isCustomController = <T extends Common.Controller>(controller: T): boolean => {\n  return symbols.CustomController in controller;\n};\n\nexport { createCoreController, createCoreService, createCoreRouter, isCustomController };\n"],"names":["strapi","createController","createService","createRoutes","pipe","routes","omit","pick"],"mappings":";;;;;;AAOA,MAAM,UAAU;AAAA,EACd,kBAAkB,OAAO,4BAA4B;AACvD;AAKA,MAAM,sBAAsB,CAACA,SAAgB,QAAgC;AAC3E,SAAO,IAAI,MAAMA,QAAO,YAAY,GAAG,GAAG;AAAA,IACxC,IAAI,QAAQ,MAAM;AACV,YAAA,cAAcA,QAAO,YAAY,GAAG;AAC1C,UAAI,QAAQ,aAAa;AACvB,eAAO,YAAY,IAAgC;AAAA,MACrD;AAAA,IACF;AAAA,EAAA,CACD;AACH;AAEM,MAAA,uBAAuB,CAI3B,KACA,QACG;AACH,SAAO,CAAC,EAAE,QAAAA,cAAqF;AACvF,UAAA,iBAAiBC,uBAAiB,EAAE,aAAa,oBAAoBD,SAAQ,GAAG,GAAG;AAEnF,UAAA,WAAW,OAAO,QAAQ,aAAa,IAAI,EAAE,QAAAA,QAAQ,CAAA,IAAI,OAAQ;AAEvE,eAAW,cAAc,OAAO,KAAK,cAAc,GAAyC;AACtF,UAAA,SAAS,UAAU,MAAM,QAAW;AAC7B,iBAAA,UAAU,IAAI,eAAe,UAAU;AAAA,MAClD;AAAA,IACF;AAEO,WAAA,eAAe,UAAU,cAAc;AAExC,UAAA,WAAW,OAAO,QAAQ;AAChC,QAAI,UAAU;AACL,aAAA,eAAe,UAAU,QAAQ,kBAAkB;AAAA,QACxD,UAAU;AAAA,QACV,cAAc;AAAA,QACd,YAAY;AAAA,MAAA,CACb;AAAA,IACH;AAEO,WAAA;AAAA,EAAA;AAEX;AAEA,SAAS,kBAIP,KACA,KACA;AACA,SAAO,CAAC,EAAE,QAAAA,cAA+E;AACjF,UAAA,cAAcE,sBAAc,EAAE,aAAa,oBAAoBF,SAAQ,GAAG,GAAG;AAE7E,UAAA,cAAc,OAAO,QAAQ,aAAa,IAAI,EAAE,QAAAA,QAAQ,CAAA,IAAI,OAAQ;AAE1E,eAAW,cAAc,OAAO,KAAK,WAAW,GAAsC;AAChF,UAAA,YAAY,UAAU,MAAM,QAAW;AAC7B,oBAAA,UAAU,IAAI,YAAY,UAAU;AAAA,MAClD;AAAA,IACF;AAEO,WAAA,eAAe,aAAa,WAAW;AACvC,WAAA;AAAA,EAAA;AAEX;AAEA,SAAS,iBACP,KACA,KACuB;AACjB,QAAA,EAAE,QAAQ,SAAS,CAAA,GAAI,MAAM,QAAQ,OAAO,cAAA,IAAkB,OAAO;AACvE,MAAA;AAEG,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,IAAI,SAAS;AACX,UAAI,CAAC,QAAQ;AACL,cAAA,cAAc,OAAO,YAAY,GAAG;AAE1C,cAAM,gBAAgBG,QAAAA,aAAa,EAAE,YAAa,CAAA;AAC5C,cAAA,OAAO,OAAO,KAAK,aAAa;AAEjC,aAAA,QAAQ,CAAC,cAAc;AACpB,gBAAA,eAAe,cAAc,SAAS;AAE5C,iBAAO,OAAO,aAAa,QAAQ,OAAO,SAAS,KAAK,CAAA,CAAE;AAAA,QAAA,CAC3D;AAED,cAAM,iBAAiBC,EAAA;AAAA,UACrB,CAACC,YAAY,SAASC,EAAAA,KAAK,QAAQD,OAAM,IAAIA;AAAAA,UAC7C,CAACA,YAAY,OAAOE,EAAAA,KAAK,MAAMF,OAAM,IAAIA;AAAAA,UACzC,aAAa;AAEN,iBAAA,OAAO,OAAO,cAAc;AAAA,MACvC;AAEO,aAAA;AAAA,IACT;AAAA,EAAA;AAEJ;AAEM,MAAA,qBAAqB,CAA8B,eAA2B;AAClF,SAAO,QAAQ,oBAAoB;AACrC;;;;;"}