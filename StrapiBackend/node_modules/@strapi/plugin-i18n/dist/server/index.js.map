{"version":3,"file":"index.js","sources":["../../server/src/utils/index.ts","../../server/src/bootstrap.ts","../../server/src/controllers/validate-locale-creation.ts","../../server/src/graphql.ts","../../server/src/constants/index.ts","../../server/src/migrations/content-type/enable/index.ts","../../server/src/migrations/content-type/disable/index.ts","../../server/src/register.ts","../../server/src/content-types/locale/index.ts","../../server/src/content-types/index.ts","../../server/src/services/permissions/actions.ts","../../server/src/services/permissions/sections-builder.ts","../../server/src/services/permissions/engine.ts","../../server/src/services/permissions.ts","../../server/src/services/metrics.ts","../../server/src/services/localizations.ts","../../server/src/services/locales.ts","../../server/src/services/iso-locales.ts","../../server/src/services/entity-service-decorator.ts","../../server/src/services/core-api.ts","../../server/src/services/content-types.ts","../../server/src/services/index.ts","../../server/src/routes/admin.ts","../../server/src/routes/content-api.ts","../../server/src/routes/index.ts","../../server/src/validation/locales.ts","../../server/src/domain/locale.ts","../../server/src/controllers/locales.ts","../../server/src/validation/content-types.ts","../../server/src/controllers/content-types.ts","../../server/src/controllers/iso-locales.ts","../../server/src/controllers/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { LocaleService } from '../services/locales';\nimport type { PermissionsService } from '../services/permissions';\nimport type { ContentTypesService } from '../services/content-types';\nimport type { MetricsService } from '../services/metrics';\nimport type { EntityServiceDecoratorService } from '../services/entity-service-decorator';\nimport type { CoreApiService } from '../services/core-api';\nimport type { ISOLocalesService } from '../services/iso-locales';\nimport type { LocalizationsService } from '../services/localizations';\n\ntype S = {\n  permissions: PermissionsService;\n  metrics: MetricsService;\n  locales: LocaleService;\n  localizations: LocalizationsService;\n  ['iso-locales']: ISOLocalesService;\n  ['content-types']: ContentTypesService;\n  ['entity-service-decorator']: EntityServiceDecoratorService;\n  ['core-api']: CoreApiService;\n};\n\nconst getCoreStore = () => {\n  return strapi.store({ type: 'plugin', name: 'i18n' });\n};\n\n// retrieve a local service\nconst getService = <T extends keyof S>(name: T): ReturnType<S[T]> => {\n  return strapi.plugin('i18n').service(name);\n};\n\nexport { getService, getCoreStore };\n","import type { Strapi } from '@strapi/types';\n\nimport { getService } from './utils';\n\nconst registerModelsHooks = () => {\n  const i18nModelUIDs = Object.values(strapi.contentTypes)\n    .filter((contentType) => getService('content-types').isLocalizedContentType(contentType))\n    .map((contentType) => contentType.uid);\n\n  if (i18nModelUIDs.length > 0) {\n    // TODO V5 : to remove ?\n    // Should this code exist? It's putting business logic on the query engine\n    // whereas it should maybe stay on the entity service layer ?\n    strapi.db.lifecycles.subscribe({\n      models: i18nModelUIDs,\n      async beforeCreate(event) {\n        await getService('localizations').assignDefaultLocaleToEntries(event.params.data);\n      },\n      async beforeCreateMany(event) {\n        await getService('localizations').assignDefaultLocaleToEntries(event.params.data);\n      },\n    });\n  }\n\n  strapi.db.lifecycles.subscribe({\n    models: ['plugin::i18n.locale'],\n\n    async afterCreate() {\n      await getService('permissions').actions.syncSuperAdminPermissionsWithLocales();\n    },\n\n    async afterDelete() {\n      await getService('permissions').actions.syncSuperAdminPermissionsWithLocales();\n    },\n  });\n};\n\nexport default async ({ strapi }: { strapi: Strapi }) => {\n  const { sendDidInitializeEvent } = getService('metrics');\n  const { decorator } = getService('entity-service-decorator');\n  const { initDefaultLocale } = getService('locales');\n  const { sectionsBuilder, actions, engine } = getService('permissions');\n\n  // Entity Service\n  (strapi.entityService as any).decorate(decorator);\n\n  // Data\n  await initDefaultLocale();\n\n  // Sections Builder\n  sectionsBuilder.registerLocalesPropertyHandler();\n\n  // Actions\n  await actions.registerI18nActions();\n  actions.registerI18nActionsHooks();\n  actions.updateActionsProperties();\n\n  // Engine/Permissions\n  engine.registerI18nPermissionsHandlers();\n\n  // Hooks & Models\n  registerModelsHooks();\n\n  sendDidInitializeEvent();\n};\n","import { get } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport type { Common, Schema } from '@strapi/types';\nimport { getService } from '../utils';\n\nconst { ApplicationError } = errors;\n\nconst validateLocaleCreation: Common.MiddlewareHandler = async (ctx, next) => {\n  const { model } = ctx.params;\n  const { query, body } = ctx.request;\n\n  const {\n    getValidLocale,\n    getNewLocalizationsFrom,\n    isLocalizedContentType,\n    getAndValidateRelatedEntity,\n    fillNonLocalizedAttributes,\n  } = getService('content-types');\n\n  const modelDef = strapi.getModel(model) as Schema.ContentType;\n\n  if (!isLocalizedContentType(modelDef)) {\n    return next();\n  }\n\n  const locale = get('locale', query);\n  const relatedEntityId = get('relatedEntityId', query);\n  // cleanup to avoid creating duplicates in singletypes\n  ctx.request.query = {};\n\n  let entityLocale;\n  try {\n    entityLocale = await getValidLocale(locale);\n  } catch (e) {\n    throw new ApplicationError(\"This locale doesn't exist\");\n  }\n\n  body.locale = entityLocale;\n\n  if (modelDef.kind === 'singleType') {\n    const entity = await strapi.entityService.findMany(modelDef.uid, {\n      locale: entityLocale,\n    } as any);\n\n    ctx.request.query.locale = body.locale;\n\n    // updating\n    if (entity) {\n      return next();\n    }\n  }\n\n  let relatedEntity;\n  try {\n    relatedEntity = await getAndValidateRelatedEntity(relatedEntityId, model, entityLocale);\n  } catch (e) {\n    throw new ApplicationError(\n      \"The related entity doesn't exist or the entity already exists in this locale\"\n    );\n  }\n\n  fillNonLocalizedAttributes(body, relatedEntity, { model });\n  const localizations = await getNewLocalizationsFrom(relatedEntity);\n  body.localizations = localizations;\n\n  return next();\n};\n\nexport default validateLocaleCreation;\n","import { prop, propEq, identity, merge } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport type { Strapi } from '@strapi/types';\n\nconst { ValidationError } = errors;\n\nconst LOCALE_SCALAR_TYPENAME = 'I18NLocaleCode';\nconst LOCALE_ARG_PLUGIN_NAME = 'I18NLocaleArg';\n\nconst getLocalizedTypesFromRegistry = ({ strapi, typeRegistry }: any) => {\n  const { KINDS } = strapi.plugin('graphql').service('constants');\n  const { isLocalizedContentType } = strapi.plugin('i18n').service('content-types');\n\n  return typeRegistry.where(\n    ({ config }: any) => config.kind === KINDS.type && isLocalizedContentType(config.contentType)\n  );\n};\n\nexport default ({ strapi }: { strapi: Strapi }) => ({\n  register() {\n    const { service: getGraphQLService } = strapi.plugin('graphql');\n    const { service: getI18NService } = strapi.plugin('i18n');\n\n    const { isLocalizedContentType } = getI18NService('content-types');\n\n    const extensionService = getGraphQLService('extension');\n\n    const getCreateLocalizationMutationType = (contentType: any) => {\n      const { getTypeName } = getGraphQLService('utils').naming;\n\n      return `create${getTypeName(contentType)}Localization`;\n    };\n\n    extensionService.shadowCRUD('plugin::i18n.locale').disableMutations();\n\n    // Disable unwanted fields for localized content types\n    Object.entries(strapi.contentTypes).forEach(([uid, ct]) => {\n      if (isLocalizedContentType(ct)) {\n        // Disable locale field in localized inputs\n        extensionService.shadowCRUD(uid).field('locale').disableInput();\n\n        // Disable localizations field in localized inputs\n        extensionService.shadowCRUD(uid).field('localizations').disableInput();\n      }\n    });\n\n    extensionService.use(({ nexus, typeRegistry }: any) => {\n      const i18nLocaleArgPlugin = getI18nLocaleArgPlugin({ nexus, typeRegistry });\n      const i18nLocaleScalar = getLocaleScalar({ nexus });\n      const {\n        mutations: createLocalizationMutations,\n        resolversConfig: createLocalizationResolversConfig,\n      } = getCreateLocalizationMutations({ nexus, typeRegistry });\n\n      return {\n        plugins: [i18nLocaleArgPlugin],\n        types: [i18nLocaleScalar, createLocalizationMutations],\n\n        resolversConfig: {\n          // Auth for createLocalization mutations\n          ...createLocalizationResolversConfig,\n          // locale arg transformation for localized createEntity mutations\n          ...getLocalizedCreateMutationsResolversConfigs({ typeRegistry }),\n\n          // Modify the default scope associated to find and findOne locale queries to match the actual action name\n          'Query.i18NLocale': { auth: { scope: 'plugin::i18n.locales.listLocales' } },\n          'Query.i18NLocales': { auth: { scope: 'plugin::i18n.locales.listLocales' } },\n        },\n      };\n    });\n\n    const getLocaleScalar = ({ nexus }: any) => {\n      const locales = getI18NService('iso-locales').getIsoLocales();\n\n      return nexus.scalarType({\n        name: LOCALE_SCALAR_TYPENAME,\n\n        description: 'A string used to identify an i18n locale',\n\n        serialize: identity,\n        parseValue: identity,\n\n        parseLiteral(ast: any) {\n          if (ast.kind !== 'StringValue') {\n            throw new ValidationError('Locale cannot represent non string type');\n          }\n\n          const isValidLocale = ast.value === 'all' || locales.find(propEq('code', ast.value));\n\n          if (!isValidLocale) {\n            throw new ValidationError('Unknown locale supplied');\n          }\n\n          return ast.value;\n        },\n      });\n    };\n\n    const getCreateLocalizationMutations = ({ nexus, typeRegistry }: any) => {\n      const localizedContentTypes = getLocalizedTypesFromRegistry({ strapi, typeRegistry }).map(\n        prop('config.contentType')\n      );\n\n      const createLocalizationComponents = localizedContentTypes.map((ct: any) =>\n        getCreateLocalizationComponents(ct, { nexus })\n      );\n\n      // Extract & merge each resolverConfig into a single object\n      const resolversConfig = createLocalizationComponents\n        .map(prop('resolverConfig'))\n        .reduce(merge, {});\n\n      const mutations = createLocalizationComponents.map(prop('mutation'));\n\n      return { mutations, resolversConfig };\n    };\n\n    const getCreateLocalizationComponents = (contentType: any, { nexus }: any) => {\n      const { getEntityResponseName, getContentTypeInputName } = getGraphQLService('utils').naming;\n      const { createCreateLocalizationHandler } = getI18NService('core-api');\n\n      const responseType = getEntityResponseName(contentType);\n      const mutationName = getCreateLocalizationMutationType(contentType);\n\n      const resolverHandler = createCreateLocalizationHandler(contentType);\n\n      const mutation = nexus.extendType({\n        type: 'Mutation',\n\n        definition(t: any) {\n          t.field(mutationName, {\n            type: responseType,\n\n            // The locale arg will be automatically added through the i18n graphql extension\n            args: {\n              id: 'ID',\n              data: getContentTypeInputName(contentType),\n            },\n\n            async resolve(parent: any, args: any) {\n              const { id, locale, data } = args;\n\n              const ctx = {\n                id,\n                data: { ...data, locale },\n              };\n\n              const value = await resolverHandler(ctx);\n\n              return { value, info: { args, resourceUID: contentType.uid } };\n            },\n          });\n        },\n      });\n\n      const resolverConfig = {\n        [`Mutation.${mutationName}`]: {\n          auth: {\n            scope: [`${contentType.uid}.createLocalization`],\n          },\n        },\n      };\n\n      return { mutation, resolverConfig };\n    };\n\n    const getLocalizedCreateMutationsResolversConfigs = ({ typeRegistry }: any) => {\n      const localizedCreateMutationsNames = getLocalizedTypesFromRegistry({\n        strapi,\n        typeRegistry,\n      })\n        .map(prop('config.contentType'))\n        .map(getGraphQLService('utils').naming.getCreateMutationTypeName);\n\n      return localizedCreateMutationsNames.reduce(\n        (acc: any, mutationName: any) => ({\n          ...acc,\n\n          [`Mutation.${mutationName}`]: {\n            middlewares: [\n              // Set data's locale using args' locale\n              (resolve: any, parent: any, args: any, context: any, info: any) => {\n                args.data.locale = args.locale;\n\n                return resolve(parent, args, context, info);\n              },\n            ],\n          },\n        }),\n        {}\n      );\n    };\n\n    const getI18nLocaleArgPlugin = ({ nexus, typeRegistry }: any) => {\n      const { isLocalizedContentType } = getI18NService('content-types');\n\n      const addLocaleArg = (config: any) => {\n        const { parentType } = config;\n\n        // Only target queries or mutations\n        if (parentType !== 'Query' && parentType !== 'Mutation') {\n          return;\n        }\n\n        const registryType = typeRegistry.get(config.type);\n\n        if (!registryType) {\n          return;\n        }\n\n        const { contentType } = registryType.config;\n\n        // Ignore non-localized content types\n        if (!isLocalizedContentType(contentType)) {\n          return;\n        }\n\n        config.args.locale = nexus.arg({ type: LOCALE_SCALAR_TYPENAME });\n      };\n\n      return nexus.plugin({\n        name: LOCALE_ARG_PLUGIN_NAME,\n\n        onAddOutputField(config: any) {\n          // Add the locale arg to the queries on localized CTs\n          addLocaleArg(config);\n        },\n      });\n    };\n  },\n});\n","import isoLocales from './iso-locales.json';\n\n/**\n * Returns the default locale based either on env var or english\n * @returns {string}\n */\nconst getInitLocale = () => {\n  const envLocaleCode = process.env.STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE;\n\n  if (envLocaleCode) {\n    const matchingLocale = isoLocales.find(({ code }) => code === envLocaleCode);\n\n    if (!matchingLocale) {\n      throw new Error(\n        'Unknown locale code provided in the environment variable STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE'\n      );\n    }\n\n    return { ...matchingLocale };\n  }\n\n  return {\n    code: 'en',\n    name: 'English (en)',\n  };\n};\n\nconst DEFAULT_LOCALE = getInitLocale();\n\nexport { isoLocales, DEFAULT_LOCALE, getInitLocale };\n","import { getService } from '../../../utils';\nimport { DEFAULT_LOCALE } from '../../../constants';\n\n// if i18N enabled set default locale\nexport default async ({ oldContentTypes, contentTypes }: any) => {\n  const { isLocalizedContentType } = getService('content-types');\n  const { getDefaultLocale } = getService('locales');\n\n  if (!oldContentTypes) {\n    return;\n  }\n\n  for (const uid in contentTypes) {\n    if (!oldContentTypes[uid]) {\n      continue;\n    }\n\n    const oldContentType = oldContentTypes[uid];\n    const contentType = contentTypes[uid];\n\n    if (!isLocalizedContentType(oldContentType) && isLocalizedContentType(contentType)) {\n      const defaultLocale = (await getDefaultLocale()) || DEFAULT_LOCALE.code;\n\n      await strapi.db\n        .queryBuilder(uid)\n        .update({ locale: defaultLocale })\n        .where({ locale: null })\n        .execute();\n    }\n  }\n};\n","import { getService } from '../../../utils';\nimport { DEFAULT_LOCALE } from '../../../constants';\n\n// Disable i18n on CT -> Delete all entities that are not in the default locale\nexport default async ({ oldContentTypes, contentTypes }: any) => {\n  const { isLocalizedContentType } = getService('content-types');\n  const { getDefaultLocale } = getService('locales');\n\n  if (!oldContentTypes) {\n    return;\n  }\n\n  for (const uid in contentTypes) {\n    if (!oldContentTypes[uid]) {\n      continue;\n    }\n\n    const oldContentType = oldContentTypes[uid];\n    const contentType = contentTypes[uid];\n\n    // if i18N is disabled remove non default locales before sync\n    if (isLocalizedContentType(oldContentType) && !isLocalizedContentType(contentType)) {\n      const defaultLocale = (await getDefaultLocale()) || DEFAULT_LOCALE.code;\n\n      await strapi.db\n        .queryBuilder(uid)\n        .delete()\n        .where({ locale: { $ne: defaultLocale } })\n        .execute();\n    }\n  }\n};\n","import _ from 'lodash';\nimport type { Strapi } from '@strapi/types';\n\nimport validateLocaleCreation from './controllers/validate-locale-creation';\nimport { getService } from './utils';\nimport graphqlProvider from './graphql';\n\nimport enableContentType from './migrations/content-type/enable';\nimport disableContentType from './migrations/content-type/disable';\n\nexport default ({ strapi }: { strapi: Strapi }) => {\n  extendLocalizedContentTypes(strapi);\n  addContentManagerLocaleMiddleware(strapi);\n  addContentTypeSyncHooks(strapi);\n};\n\n/**\n * Match urls for model creation\n *  /content-manager/collection-types/api::category.category/\n *  /content-manager/collection-types/api::category.category\n *\n * And not match:\n *  /content-manager/collection-types/api::category.category/1\n *  /content-manager/collection-types/api::category.category/1/actions/publish\n */\nconst isUrlForCreation = (url: string) => {\n  if (!url) return false;\n\n  // Remove any query params\n  // /content-manager/collection-types/api::category.category/?locale=en\n  const path = url.split('?')[0];\n\n  // Split path and remove empty strings\n  // [ 'content-manager', 'collection-types', 'api::category.category' ]\n  const splitUrl = path.split('/').filter(Boolean);\n\n  // Get the last element of the array\n  // api::category.category / 1 / publish\n\n  const model = splitUrl[splitUrl.length - 1];\n\n  // If the model contains :: it means it's a uid\n  return model.includes('::');\n};\n\n/**\n * Adds middleware on CM creation routes to use i18n locale passed in a specific param\n * @param {Strapi} strapi\n */\nconst addContentManagerLocaleMiddleware = (strapi: Strapi) => {\n  strapi.server.router.use('/content-manager/collection-types/:model', (ctx, next) => {\n    if (ctx.method === 'POST' && isUrlForCreation(ctx.originalUrl)) {\n      return validateLocaleCreation(ctx, next);\n    }\n\n    return next();\n  });\n\n  strapi.server.router.use('/content-manager/single-types/:model', (ctx, next) => {\n    if (ctx.method === 'PUT' && isUrlForCreation(ctx.originalUrl)) {\n      return validateLocaleCreation(ctx, next);\n    }\n\n    return next();\n  });\n};\n\n/**\n * Adds hooks to migration content types locales on enable/disable of I18N\n * @param {Strapi} strapi\n */\nconst addContentTypeSyncHooks = (strapi: Strapi) => {\n  strapi.hook('strapi::content-types.beforeSync').register(disableContentType);\n  strapi.hook('strapi::content-types.afterSync').register(enableContentType);\n};\n\n/**\n * Adds locale and localization fields to localized content types\n * @param {Strapi} strapi\n */\nconst extendLocalizedContentTypes = (strapi: Strapi) => {\n  const contentTypeService = getService('content-types');\n  const coreApiService = getService('core-api');\n\n  Object.values(strapi.contentTypes).forEach((contentType) => {\n    if (contentTypeService.isLocalizedContentType(contentType)) {\n      const { attributes } = contentType;\n\n      _.set(attributes, 'localizations', {\n        writable: true,\n        private: false,\n        configurable: false,\n        visible: false,\n        type: 'relation',\n        relation: 'oneToMany',\n        target: contentType.uid,\n      });\n\n      _.set(attributes, 'locale', {\n        writable: true,\n        private: false,\n        configurable: false,\n        visible: false,\n        type: 'string',\n      });\n\n      coreApiService.addCreateLocalizationAction(contentType);\n    }\n  });\n\n  if (strapi.plugin('graphql')) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    graphqlProvider({ strapi }).register();\n  }\n};\n","import schema from './schema.json';\n\nexport default {\n  schema,\n};\n","import locale from './locale';\n\nexport default {\n  locale,\n};\n","import { capitalize, isArray, getOr, prop } from 'lodash/fp';\nimport { getService } from '../../utils';\n\nconst actions = ['create', 'read', 'update', 'delete'].map((uid) => ({\n  section: 'settings',\n  category: 'Internationalization',\n  subCategory: 'Locales',\n  pluginName: 'i18n',\n  displayName: capitalize(uid),\n  uid: `locale.${uid}`,\n}));\n\nconst addLocalesPropertyIfNeeded = ({ value: action }: any) => {\n  const {\n    section,\n    options: { applyToProperties },\n  } = action;\n\n  // Only add the locales property to contentTypes' actions\n  if (section !== 'contentTypes') {\n    return;\n  }\n\n  // If the 'locales' property is already declared within the applyToProperties array, then ignore the next steps\n  if (isArray(applyToProperties) && applyToProperties.includes('locales')) {\n    return;\n  }\n\n  // Add the 'locales' property to the applyToProperties array (create it if necessary)\n  action.options.applyToProperties = isArray(applyToProperties)\n    ? applyToProperties.concat('locales')\n    : ['locales'];\n};\n\nconst shouldApplyLocalesPropertyToSubject = ({ property, subject }: any) => {\n  if (property === 'locales') {\n    const model = strapi.getModel(subject);\n\n    return getService('content-types').isLocalizedContentType(model);\n  }\n\n  return true;\n};\n\nconst addAllLocalesToPermissions = async (permissions: any) => {\n  const { actionProvider } = strapi.admin.services.permission;\n  const { find: findAllLocales } = getService('locales');\n\n  const allLocales = await findAllLocales();\n  const allLocalesCode = allLocales.map(prop('code'));\n\n  return Promise.all(\n    permissions.map(async (permission: any) => {\n      const { action, subject } = permission;\n\n      const appliesToLocalesProperty = await actionProvider.appliesToProperty(\n        'locales',\n        action,\n        subject\n      );\n\n      if (!appliesToLocalesProperty) {\n        return permission;\n      }\n\n      const oldPermissionProperties = getOr({}, 'properties', permission);\n\n      return { ...permission, properties: { ...oldPermissionProperties, locales: allLocalesCode } };\n    })\n  );\n};\n\nconst syncSuperAdminPermissionsWithLocales = async () => {\n  const roleService = strapi.admin.services.role;\n  const permissionService = strapi.admin.services.permission;\n\n  const superAdminRole = await roleService.getSuperAdmin();\n\n  if (!superAdminRole) {\n    return;\n  }\n\n  const superAdminPermissions = await permissionService.findMany({\n    where: {\n      role: {\n        id: superAdminRole.id,\n      },\n    },\n  });\n\n  const newSuperAdminPermissions = await addAllLocalesToPermissions(superAdminPermissions);\n\n  await roleService.assignPermissions(superAdminRole.id, newSuperAdminPermissions);\n};\n\nconst registerI18nActions = async () => {\n  const { actionProvider } = strapi.admin.services.permission;\n\n  await actionProvider.registerMany(actions);\n};\n\nconst registerI18nActionsHooks = () => {\n  const { actionProvider } = strapi.admin.services.permission;\n  const { hooks } = strapi.admin.services.role;\n\n  actionProvider.hooks.appliesPropertyToSubject.register(shouldApplyLocalesPropertyToSubject);\n  hooks.willResetSuperAdminPermissions.register(addAllLocalesToPermissions);\n};\n\nconst updateActionsProperties = () => {\n  const { actionProvider } = strapi.admin.services.permission;\n\n  // Register the transformation for every new action\n  actionProvider.hooks.willRegister.register(addLocalesPropertyIfNeeded);\n\n  // Handle already registered actions\n  actionProvider.values().forEach((action: any) => addLocalesPropertyIfNeeded({ value: action }));\n};\n\nexport default {\n  actions,\n  registerI18nActions,\n  registerI18nActionsHooks,\n  updateActionsProperties,\n  syncSuperAdminPermissionsWithLocales,\n};\n","import { isEmpty } from 'lodash/fp';\n\nimport { getService } from '../../utils';\n\n/**\n * Handler for the permissions layout (sections builder)\n * Adds the locales property to the subjects\n * @param {Action} action\n * @param {ContentTypesSection} section\n * @return {Promise<void>}\n */\nconst localesPropertyHandler = async ({ action, section }: any) => {\n  const { actionProvider } = strapi.admin.services.permission;\n\n  const locales = await getService('locales').find();\n\n  // Do not add the locales property if there is none registered\n  if (isEmpty(locales)) {\n    return;\n  }\n\n  for (const subject of section.subjects) {\n    const applies = await actionProvider.appliesToProperty('locales', action.actionId, subject.uid);\n    const hasLocalesProperty = subject.properties.find(\n      (property: any) => property.value === 'locales'\n    );\n\n    if (applies && !hasLocalesProperty) {\n      subject.properties.push({\n        label: 'Locales',\n        value: 'locales',\n        children: locales.map(({ name, code }: any) => ({ label: name || code, value: code })),\n      });\n    }\n  }\n};\n\nconst registerLocalesPropertyHandler = () => {\n  const { sectionsBuilder } = strapi.admin.services.permission;\n\n  sectionsBuilder.addHandler('singleTypes', localesPropertyHandler);\n  sectionsBuilder.addHandler('collectionTypes', localesPropertyHandler);\n};\n\nexport default {\n  localesPropertyHandler,\n  registerLocalesPropertyHandler,\n};\n","import { getService } from '../../utils';\n\n/**\n * @typedef {object} WillRegisterPermissionContext\n * @property {Permission} permission\n * @property {object} user\n * @property {object} condition\n */\n\n/**\n * Locales property handler for the permission engine\n * Add the has-locale-access condition if the locales property is defined\n * @param {WillRegisterPermissionContext} context\n */\nconst willRegisterPermission = (context: any) => {\n  const { permission, condition, user } = context;\n  const { subject, properties } = permission;\n\n  const isSuperAdmin = strapi.admin.services.role.hasSuperAdminRole(user);\n\n  if (isSuperAdmin) {\n    return;\n  }\n\n  const { locales } = properties || {};\n  const { isLocalizedContentType } = getService('content-types');\n\n  // If there is no subject defined, ignore the permission\n  if (!subject) {\n    return;\n  }\n\n  const ct = strapi.contentTypes[subject];\n\n  // If the subject exists but isn't localized, ignore the permission\n  if (!isLocalizedContentType(ct)) {\n    return;\n  }\n\n  // If the subject is localized but the locales property is null (access to all locales), ignore the permission\n  if (locales === null) {\n    return;\n  }\n\n  condition.and({\n    locale: {\n      $in: locales || [],\n    },\n  });\n};\n\nconst registerI18nPermissionsHandlers = () => {\n  const { engine } = strapi.admin.services.permission;\n\n  engine.hooks['before-register.permission'].register(willRegisterPermission);\n};\n\nexport default {\n  willRegisterPermission,\n  registerI18nPermissionsHandlers,\n};\n","import i18nActionsService from './permissions/actions';\nimport sectionsBuilderService from './permissions/sections-builder';\nimport engineService from './permissions/engine';\n\nconst permissions = () => ({\n  actions: i18nActionsService,\n  sectionsBuilder: sectionsBuilderService,\n  engine: engineService,\n});\n\ntype PermissionsService = typeof permissions;\n\nexport default permissions;\nexport type { PermissionsService };\n","import { reduce } from 'lodash/fp';\nimport { getService } from '../utils';\n\nconst sendDidInitializeEvent = async () => {\n  const { isLocalizedContentType } = getService('content-types');\n\n  // TODO: V5: This event should be renamed numberOfContentTypes in V5 as the name is already taken to describe the number of content types using i18n.\n  const numberOfContentTypes = reduce(\n    (sum, contentType) => (isLocalizedContentType(contentType) ? sum + 1 : sum),\n    0\n  )(strapi.contentTypes as any);\n\n  await strapi.telemetry.send('didInitializeI18n', { groupProperties: { numberOfContentTypes } });\n};\n\nconst sendDidUpdateI18nLocalesEvent = async () => {\n  const numberOfLocales = await getService('locales').count();\n\n  await strapi.telemetry.send('didUpdateI18nLocales', {\n    groupProperties: { numberOfLocales },\n  });\n};\n\nconst metrics = () => ({\n  sendDidInitializeEvent,\n  sendDidUpdateI18nLocalesEvent,\n});\n\ntype MetricsService = typeof metrics;\n\nexport default metrics;\nexport type { MetricsService };\n","import { prop, isNil, isEmpty, isArray } from 'lodash/fp';\n\nimport { mapAsync } from '@strapi/utils';\nimport { getService } from '../utils';\n\nconst isDialectMySQL = () => strapi.db.dialect.client === 'mysql';\n\n/**\n * Adds the default locale to an object if it isn't defined yet\n * @param {Object} data a data object before being persisted into db\n */\nconst assignDefaultLocaleToEntries = async (data: any) => {\n  const { getDefaultLocale } = getService('locales');\n\n  if (isArray(data) && data.some((entry) => !entry.locale)) {\n    const defaultLocale = await getDefaultLocale();\n    data.forEach((entry) => {\n      entry.locale = entry.locale || defaultLocale;\n    });\n  } else if (!isArray(data) && isNil(data.locale)) {\n    data.locale = await getDefaultLocale();\n  }\n};\n\n/**\n * Synchronize related localizations from a root one\n * @param {Object} entry entry to update\n * @param {Object} options\n * @param {Object} options.model corresponding model\n */\nconst syncLocalizations = async (entry: any, { model }: any) => {\n  if (Array.isArray(entry?.localizations)) {\n    const newLocalizations = [entry.id, ...entry.localizations.map(prop('id'))];\n\n    const updateLocalization = (id: any) => {\n      const localizations = newLocalizations.filter((localizationId) => localizationId !== id);\n\n      return strapi.query(model.uid).update({ where: { id }, data: { localizations } });\n    };\n\n    // MySQL/MariaDB can cause deadlocks here if concurrency higher than 1\n    // TODO: use a transaction to avoid deadlocks\n    await mapAsync(\n      entry.localizations,\n      (localization: any) => updateLocalization(localization.id),\n      {\n        concurrency: isDialectMySQL() && !strapi.db.inTransaction() ? 1 : Infinity,\n      }\n    );\n  }\n};\n\n/**\n * Update non localized fields of all the related localizations of an entry with the entry values\n * @param {Object} entry entry to update\n * @param {Object} options\n * @param {Object} options.model corresponding model\n */\nconst syncNonLocalizedAttributes = async (entry: any, { model }: any) => {\n  const { copyNonLocalizedAttributes } = getService('content-types');\n\n  if (Array.isArray(entry?.localizations)) {\n    const nonLocalizedAttributes = copyNonLocalizedAttributes(model, entry);\n\n    if (isEmpty(nonLocalizedAttributes)) {\n      return;\n    }\n\n    const updateLocalization = (id: any) => {\n      return strapi.entityService.update(model.uid, id, { data: nonLocalizedAttributes });\n    };\n\n    // MySQL/MariaDB can cause deadlocks here if concurrency higher than 1\n    // TODO: use a transaction to avoid deadlocks\n    await mapAsync(\n      entry.localizations,\n      (localization: any) => updateLocalization(localization.id),\n      {\n        concurrency: isDialectMySQL() && !strapi.db.inTransaction() ? 1 : Infinity,\n      }\n    );\n  }\n};\n\nconst localizations = () => ({\n  assignDefaultLocaleToEntries,\n  syncLocalizations,\n  syncNonLocalizedAttributes,\n});\n\ntype LocalizationsService = typeof localizations;\n\nexport default localizations;\nexport type { LocalizationsService };\n","import { isNil } from 'lodash/fp';\nimport { DEFAULT_LOCALE } from '../constants';\nimport { getService, getCoreStore } from '../utils';\n\nconst find = (params: any = {}) => strapi.query('plugin::i18n.locale').findMany({ where: params });\n\nconst findById = (id: any) => strapi.query('plugin::i18n.locale').findOne({ where: { id } });\n\nconst findByCode = (code: any) => strapi.query('plugin::i18n.locale').findOne({ where: { code } });\n\nconst count = (params: any = {}) => strapi.query('plugin::i18n.locale').count({ where: params });\n\nconst create = async (locale: any) => {\n  const result = await strapi.query('plugin::i18n.locale').create({ data: locale });\n\n  getService('metrics').sendDidUpdateI18nLocalesEvent();\n\n  return result;\n};\n\nconst update = async (params: any, updates: any) => {\n  const result = await strapi.query('plugin::i18n.locale').update({ where: params, data: updates });\n\n  getService('metrics').sendDidUpdateI18nLocalesEvent();\n\n  return result;\n};\n\nconst deleteFn = async ({ id }: any) => {\n  const localeToDelete = await findById(id);\n\n  if (localeToDelete) {\n    await deleteAllLocalizedEntriesFor({ locale: localeToDelete.code });\n    const result = await strapi.query('plugin::i18n.locale').delete({ where: { id } });\n\n    getService('metrics').sendDidUpdateI18nLocalesEvent();\n\n    return result;\n  }\n\n  return localeToDelete;\n};\n\nconst setDefaultLocale = ({ code }: any) =>\n  getCoreStore().set({ key: 'default_locale', value: code });\n\nconst getDefaultLocale = () => getCoreStore().get({ key: 'default_locale' });\n\nconst setIsDefault = async (locales: any) => {\n  if (isNil(locales)) {\n    return locales;\n  }\n\n  const actualDefault = await getDefaultLocale();\n\n  if (Array.isArray(locales)) {\n    return locales.map((locale) => ({ ...locale, isDefault: actualDefault === locale.code }));\n  }\n  // single locale\n  return { ...locales, isDefault: actualDefault === locales.code };\n};\n\nconst initDefaultLocale = async () => {\n  const existingLocalesNb = await strapi.query('plugin::i18n.locale').count();\n  if (existingLocalesNb === 0) {\n    await create(DEFAULT_LOCALE);\n    await setDefaultLocale({ code: DEFAULT_LOCALE.code });\n  }\n};\n\nconst deleteAllLocalizedEntriesFor = async ({ locale }: any) => {\n  const { isLocalizedContentType } = getService('content-types');\n\n  const localizedModels = Object.values(strapi.contentTypes).filter(isLocalizedContentType);\n\n  for (const model of localizedModels) {\n    // FIXME: delete many content & their associations\n    await strapi.query(model.uid).deleteMany({ where: { locale } });\n  }\n};\n\nconst locales = () => ({\n  find,\n  findById,\n  findByCode,\n  create,\n  update,\n  count,\n  setDefaultLocale,\n  getDefaultLocale,\n  setIsDefault,\n  delete: deleteFn,\n  initDefaultLocale,\n});\n\ntype LocaleService = typeof locales;\n\nexport default locales;\nexport type { LocaleService };\n","import { isoLocales } from '../constants';\n\nconst getIsoLocales = () => isoLocales;\n\nconst isoLocalesService = () => ({\n  getIsoLocales,\n});\n\ntype ISOLocalesService = typeof isoLocalesService;\n\nexport default isoLocalesService;\nexport type { ISOLocalesService };\n","import { has, get, omit, isArray } from 'lodash/fp';\nimport { errors, convertQueryParams } from '@strapi/utils';\nimport type { Schema } from '@strapi/types';\n\nimport { getService } from '../utils';\n\nconst { transformParamsToQuery } = convertQueryParams;\nconst { ApplicationError } = errors;\n\nconst LOCALE_QUERY_FILTER = 'locale';\nconst SINGLE_ENTRY_ACTIONS = ['findOne', 'update', 'delete'];\nconst BULK_ACTIONS = ['delete'];\n\nconst paramsContain = (key: any, params: any) => {\n  return (\n    has(key, params.filters) ||\n    (isArray(params.filters) && params.filters.some((clause: any) => has(key, clause))) ||\n    (isArray(get('$and', params.filters)) &&\n      params.filters.$and.some((clause: any) => has(key, clause)))\n  );\n};\n\n/**\n * Adds default locale or replaces locale by locale in query params\n * @param {object} params - query params\n * @param {object} ctx\n */\nconst wrapParams = async (params: any = {}, ctx: any = {}) => {\n  const { action } = ctx;\n\n  if (has(LOCALE_QUERY_FILTER, params)) {\n    if (params[LOCALE_QUERY_FILTER] === 'all') {\n      return omit(LOCALE_QUERY_FILTER, params);\n    }\n\n    return {\n      ...omit(LOCALE_QUERY_FILTER, params),\n      filters: {\n        $and: [{ locale: params[LOCALE_QUERY_FILTER] }].concat(params.filters || []),\n      },\n    };\n  }\n\n  const entityDefinedById = paramsContain('id', params) && SINGLE_ENTRY_ACTIONS.includes(action);\n  const entitiesDefinedByIds = paramsContain('id.$in', params) && BULK_ACTIONS.includes(action);\n\n  if (entityDefinedById || entitiesDefinedByIds) {\n    return params;\n  }\n\n  const { getDefaultLocale } = getService('locales');\n\n  return {\n    ...params,\n    filters: {\n      $and: [{ locale: await getDefaultLocale() }].concat(params.filters || []),\n    },\n  };\n};\n\n/**\n * Assigns a valid locale or the default one if not define\n * @param {object} data\n */\nconst assignValidLocale = async (data: any) => {\n  const { getValidLocale } = getService('content-types');\n\n  if (!data) {\n    return;\n  }\n\n  try {\n    data.locale = await getValidLocale(data.locale);\n  } catch (e) {\n    throw new ApplicationError(\"This locale doesn't exist\");\n  }\n};\n\n/**\n * Decorates the entity service with I18N business logic\n * @param {object} service - entity service\n */\nconst decorator = (service: any) => ({\n  /**\n   * Wraps result\n   * @param {object} result - result object of query\n   * @param {object} ctx - Query context\n   * @param {object} ctx.model - Model that is being used\n   */\n  async wrapResult(result = {}, ctx = {}) {\n    return service.wrapResult.call(this, result, ctx);\n  },\n\n  /**\n   * Wraps query options. In particular will add default locale to query params\n   * @param {object} params - Query options object (params, data, files, populate)\n   * @param {object} ctx - Query context\n   * @param {object} ctx.model - Model that is being used\n   */\n  async wrapParams(params: any = {}, ctx: any = {}) {\n    const wrappedParams = await service.wrapParams.call(this, params, ctx);\n\n    const model = strapi.getModel(ctx.uid);\n\n    const { isLocalizedContentType } = getService('content-types');\n\n    if (!isLocalizedContentType(model)) {\n      return wrappedParams;\n    }\n\n    return wrapParams(wrappedParams, ctx);\n  },\n\n  /**\n   * Creates an entry & make links between it and its related localizations\n   * @param {string} uid - Model uid\n   * @param {object} opts - Query options object (params, data, files, populate)\n   */\n  async create(uid: any, opts: any = {}) {\n    const model = strapi.getModel(uid);\n\n    const { syncLocalizations, syncNonLocalizedAttributes } = getService('localizations');\n    const { isLocalizedContentType } = getService('content-types');\n\n    if (!isLocalizedContentType(model)) {\n      return service.create.call(this, uid, opts);\n    }\n\n    const { data } = opts;\n    await assignValidLocale(data);\n\n    const entry = await service.create.call(this, uid, opts);\n\n    await syncLocalizations(entry, { model });\n    await syncNonLocalizedAttributes(entry, { model });\n    return entry;\n  },\n\n  /**\n   * Updates an entry & update related localizations fields\n   * @param {string} uid\n   * @param {string} entityId\n   * @param {object} opts - Query options object (params, data, files, populate)\n   */\n  async update(uid: any, entityId: any, opts: any = {}) {\n    const model = strapi.getModel(uid);\n\n    const { syncNonLocalizedAttributes } = getService('localizations');\n    const { isLocalizedContentType } = getService('content-types');\n\n    if (!isLocalizedContentType(model)) {\n      return service.update.call(this, uid, entityId, opts);\n    }\n\n    const { data, ...restOptions } = opts;\n\n    const entry = await service.update.call(this, uid, entityId, {\n      ...restOptions,\n      data: omit(['locale', 'localizations'], data),\n    });\n\n    await syncNonLocalizedAttributes(entry, { model });\n    return entry;\n  },\n\n  /**\n   * Find an entry or several if fetching all locales\n   * @param {string} uid - Model uid\n   * @param {object} opts - Query options object (params, data, files, populate)\n   */\n  async findMany(uid: any, opts: any) {\n    const model = strapi.getModel(uid) as Schema.ContentType;\n\n    const { isLocalizedContentType } = getService('content-types');\n\n    if (!isLocalizedContentType(model)) {\n      return service.findMany.call(this, uid, opts);\n    }\n\n    const { kind } = model;\n\n    if (kind === 'singleType') {\n      if (opts[LOCALE_QUERY_FILTER] === 'all') {\n        // TODO Fix so this won't break lower lying find many wrappers\n        const wrappedParams = await this.wrapParams(opts, { uid, action: 'findMany' });\n        const query = transformParamsToQuery(uid, wrappedParams);\n        const entities = await strapi.db.query(uid).findMany(query);\n        return this.wrapResult(entities, { uid, action: 'findMany' });\n      }\n\n      // This one gets transformed into a findOne on a lower layer\n      return service.findMany.call(this, uid, opts);\n    }\n\n    return service.findMany.call(this, uid, opts);\n  },\n});\n\nconst entityServiceDecorator = () => ({\n  decorator,\n  wrapParams,\n});\n\ntype EntityServiceDecoratorService = typeof entityServiceDecorator;\n\nexport default entityServiceDecorator;\nexport type { EntityServiceDecoratorService };\n","import _ from 'lodash';\nimport { prop, pick, reduce, map, keys, toPath, isNil } from 'lodash/fp';\nimport utils from '@strapi/utils';\nimport { getService } from '../utils';\n\nconst { contentTypes, parseMultipartData, sanitize } = utils;\nconst { ApplicationError, NotFoundError } = utils.errors;\n\nconst { getContentTypeRoutePrefix, isSingleType, getWritableAttributes } = contentTypes;\n\n/**\n * Returns all locales for an entry\n * @param {object} entry\n * @returns {string[]}\n */\nconst getAllLocales = (entry: any) => {\n  return [entry.locale, ...map(prop('locale'), entry.localizations)];\n};\n\n/**\n * Returns all localizations ids for an entry\n * @param {object} entry\n * @returns {any[]}\n */\nconst getAllLocalizationsIds = (entry: any) => {\n  return [entry.id, ...map(prop('id'), entry.localizations)];\n};\n\n/**\n * Returns a sanitizer object with a data & a file sanitizer for a content type\n * @param {object} contentType\n * @returns {{\n *    sanitizeInput(data: object): object,\n *    sanitizeInputFiles(files: object): object\n * }}\n */\nconst createSanitizer = (contentType: any) => {\n  /**\n   * Returns the writable attributes of a content type in the localization routes\n   * @returns {string[]}\n   */\n  const getAllowedAttributes = () => {\n    return getWritableAttributes(contentType).filter(\n      (attributeName) => !['locale', 'localizations'].includes(attributeName)\n    );\n  };\n\n  /**\n   * Sanitizes uploaded files to keep only writable ones\n   * @param {object} files - input files to sanitize\n   * @returns {object}\n   */\n  const sanitizeInputFiles = (files: any) => {\n    const allowedFields = getAllowedAttributes();\n    return reduce(\n      (acc, keyPath) => {\n        const [rootKey] = toPath(keyPath);\n        if (allowedFields.includes(rootKey)) {\n          acc[keyPath] = files[keyPath];\n        }\n\n        return acc;\n      },\n      {} as any,\n      keys(files)\n    );\n  };\n\n  /**\n   * Sanitizes input data to keep only writable attributes\n   * @param {object} data - input data to sanitize\n   * @returns {object}\n   */\n  const sanitizeInput = (data: any) => {\n    return pick(getAllowedAttributes(), data);\n  };\n\n  return { sanitizeInput, sanitizeInputFiles };\n};\n\n/**\n * Returns a handler to handle localizations creation in the core api\n * @param {object} contentType\n * @returns {(object) => void}\n */\nconst createLocalizationHandler = (contentType: any) => {\n  const handler = createCreateLocalizationHandler(contentType);\n\n  return (ctx: any = {}) => {\n    const { id } = ctx.params;\n    const { data, files } = parseMultipartData(ctx);\n\n    return handler({ id, data, files });\n  };\n};\n\nconst createCreateLocalizationHandler =\n  (contentType: any) =>\n  async (args: any = {}) => {\n    const { copyNonLocalizedAttributes } = getService('content-types');\n\n    const { sanitizeInput, sanitizeInputFiles } = createSanitizer(contentType);\n\n    const entry = isSingleType(contentType)\n      ? await strapi.query(contentType.uid).findOne({ populate: ['localizations'] })\n      : await strapi\n          .query(contentType.uid)\n          .findOne({ where: { id: args.id }, populate: ['localizations'] });\n\n    if (!entry) {\n      throw new NotFoundError();\n    }\n\n    const { data, files } = args;\n\n    const { findByCode } = getService('locales');\n\n    if (isNil(data.locale)) {\n      throw new ApplicationError('locale is missing');\n    }\n\n    const matchingLocale = await findByCode(data.locale);\n    if (!matchingLocale) {\n      throw new ApplicationError('locale is invalid');\n    }\n\n    const usedLocales = getAllLocales(entry);\n    if (usedLocales.includes(data.locale)) {\n      throw new ApplicationError('locale is already used');\n    }\n\n    const sanitizedData = {\n      ...copyNonLocalizedAttributes(contentType, entry),\n      ...sanitizeInput(data),\n      locale: data.locale,\n      localizations: getAllLocalizationsIds(entry),\n    };\n\n    const sanitizedFiles = sanitizeInputFiles(files);\n\n    const newEntry = await strapi.entityService.create(contentType.uid, {\n      data: sanitizedData,\n      files: sanitizedFiles,\n      populate: ['localizations'],\n    });\n\n    return sanitize.contentAPI.output(newEntry, strapi.getModel(contentType.uid));\n  };\n\n/**\n * Returns a route config to handle localizations creation in the core api\n * @param {object} contentType\n * @returns {{ method: string, path: string, handler: string, config: { policies: string[] }}}\n */\nconst createLocalizationRoute = (contentType: any) => {\n  const { modelName } = contentType;\n\n  const routePrefix = getContentTypeRoutePrefix(contentType);\n  const routePath = isSingleType(contentType)\n    ? `/${routePrefix}/localizations`\n    : `/${routePrefix}/:id/localizations`;\n\n  return {\n    method: 'POST',\n    path: routePath,\n    handler: `${modelName}.createLocalization`,\n    config: {\n      policies: [],\n    },\n  };\n};\n\n/**\n * Adds a route & an action to the core api controller of a content type to allow creating new localizations\n * @param {object} contentType\n */\nconst addCreateLocalizationAction = (contentType: any) => {\n  const { modelName, apiName } = contentType;\n\n  // in case we add i18N to a content type that is not in an api\n  if (!apiName) {\n    return;\n  }\n\n  const localizationRoute: any = createLocalizationRoute(contentType);\n\n  strapi.api[apiName].routes[modelName].routes.push(localizationRoute);\n\n  strapi.container.get('controllers').extend(`api::${apiName}.${modelName}`, (controller: any) => {\n    return Object.assign(controller, {\n      createLocalization: createLocalizationHandler(contentType),\n    });\n  });\n};\n\nconst mergeCustomizer = (dest: any, src: any) => {\n  if (typeof dest === 'string') {\n    return `${dest}\\n${src}`;\n  }\n};\n\n/**\n * Add a graphql schema to the plugin's global graphl schema to be processed\n * @param {object} schema\n */\nconst addGraphqlSchema = (schema: any) => {\n  _.mergeWith(strapi.config.get('plugin.i18n.schema.graphql'), schema, mergeCustomizer);\n};\n\n/**\n * Add localization mutation & filters to use with the graphql plugin\n * @param {object} contentType\n */\nconst addGraphqlLocalizationAction = (contentType: any) => {\n  const { globalId, modelName } = contentType;\n\n  if (!strapi.plugins.graphql) {\n    return;\n  }\n\n  const { toSingular, toPlural } = strapi.plugin('graphql').service('naming');\n\n  // We use a string instead of an enum as the locales can be changed in the admin\n  // NOTE: We could use a custom scalar so the validation becomes dynamic\n  const localeArgs = {\n    args: {\n      locale: 'String',\n    },\n  };\n\n  // add locale arguments in the existing queries\n  if (isSingleType(contentType)) {\n    const queryName = toSingular(modelName);\n    const mutationSuffix = _.upperFirst(queryName);\n\n    addGraphqlSchema({\n      resolver: {\n        Query: {\n          [queryName]: localeArgs,\n        },\n        Mutation: {\n          [`update${mutationSuffix}`]: localeArgs,\n          [`delete${mutationSuffix}`]: localeArgs,\n        },\n      },\n    });\n  } else {\n    const queryName = toPlural(modelName);\n\n    addGraphqlSchema({\n      resolver: {\n        Query: {\n          [queryName]: localeArgs,\n          [`${queryName}Connection`]: localeArgs,\n        },\n      },\n    });\n  }\n\n  // add new mutation to create a localization\n  const typeName = globalId;\n\n  const capitalizedName = _.upperFirst(toSingular(modelName));\n  const mutationName = `create${capitalizedName}Localization`;\n  const mutationDef = `${mutationName}(input: update${capitalizedName}Input!): ${typeName}!`;\n  const actionName = `${contentType.uid}.createLocalization`;\n\n  addGraphqlSchema({\n    mutation: mutationDef,\n    resolver: {\n      Mutation: {\n        [mutationName]: {\n          resolver: actionName,\n        },\n      },\n    },\n  });\n};\n\nconst coreApi = () => ({\n  addCreateLocalizationAction,\n  addGraphqlLocalizationAction,\n  createSanitizer,\n  createCreateLocalizationHandler,\n});\n\ntype CoreApiService = typeof coreApi;\n\nexport default coreApi;\nexport { CoreApiService };\n","import _ from 'lodash';\nimport { pick, pipe, has, prop, isNil, cloneDeep, isArray, difference } from 'lodash/fp';\nimport { errors, contentTypes as contentTypeUtils } from '@strapi/utils';\nimport { getService } from '../utils';\n\nconst { isRelationalAttribute, getVisibleAttributes, isTypedAttribute, getScalarAttributes } =\n  contentTypeUtils;\nconst { ApplicationError } = errors;\n\nconst hasLocalizedOption = (modelOrAttribute: any) => {\n  return prop('pluginOptions.i18n.localized', modelOrAttribute) === true;\n};\n\nconst getValidLocale = async (locale: any) => {\n  const localesService = getService('locales');\n\n  if (isNil(locale)) {\n    return localesService.getDefaultLocale();\n  }\n\n  const foundLocale = await localesService.findByCode(locale);\n  if (!foundLocale) {\n    throw new ApplicationError('Locale not found');\n  }\n\n  return locale;\n};\n\n/**\n * Get the related entity used for entity creation\n * @param {Object} relatedEntity related entity\n * @returns {id[]} related entity\n */\nconst getNewLocalizationsFrom = async (relatedEntity: any) => {\n  if (relatedEntity) {\n    return [relatedEntity.id, ...relatedEntity.localizations.map(prop('id'))];\n  }\n\n  return [];\n};\n\n/**\n * Get the related entity used for entity creation\n * @param {id} relatedEntityId related entity id\n * @param {string} model corresponding model\n * @param {string} locale locale of the entity to create\n * @returns {Object} related entity\n */\nconst getAndValidateRelatedEntity = async (relatedEntityId: any, model: any, locale: any) => {\n  const { kind } = strapi.getModel(model) as any;\n  let relatedEntity;\n\n  if (kind === 'singleType') {\n    relatedEntity = await strapi.query(model).findOne({ populate: ['localizations'] });\n  } else if (relatedEntityId) {\n    relatedEntity = await strapi\n      .query(model)\n      .findOne({ where: { id: relatedEntityId }, populate: ['localizations'] });\n  }\n\n  if (relatedEntityId && !relatedEntity) {\n    throw new ApplicationError(\"The related entity doesn't exist\");\n  }\n\n  if (\n    relatedEntity &&\n    (relatedEntity.locale === locale ||\n      relatedEntity.localizations.map(prop('locale')).includes(locale))\n  ) {\n    throw new ApplicationError('The entity already exists in this locale');\n  }\n\n  return relatedEntity;\n};\n\n/**\n * Returns whether an attribute is localized or not\n * @param {*} attribute\n * @returns\n */\nconst isLocalizedAttribute = (attribute: any) => {\n  return (\n    hasLocalizedOption(attribute) ||\n    isRelationalAttribute(attribute) ||\n    isTypedAttribute(attribute, 'uid')\n  );\n};\n\n/**\n * Returns whether a model is localized or not\n * @param {*} model\n * @returns\n */\nconst isLocalizedContentType = (model: any) => {\n  return hasLocalizedOption(model);\n};\n\n/**\n * Returns the list of attribute names that are not localized\n * @param {object} model\n * @returns {string[]}\n */\nconst getNonLocalizedAttributes = (model: any) => {\n  return getVisibleAttributes(model).filter(\n    (attrName) => !isLocalizedAttribute(model.attributes[attrName])\n  );\n};\n\nconst removeId = (value: any) => {\n  if (typeof value === 'object' && has('id', value)) {\n    delete value.id;\n  }\n};\n\nconst removeIds = (model: any) => (entry: any) => removeIdsMut(model, cloneDeep(entry));\n\nconst removeIdsMut = (model: any, entry: any) => {\n  if (isNil(entry)) {\n    return entry;\n  }\n\n  removeId(entry);\n\n  _.forEach(model.attributes, (attr, attrName) => {\n    const value = entry[attrName];\n    if (attr.type === 'dynamiczone' && isArray(value)) {\n      value.forEach((compo) => {\n        if (has('__component', compo)) {\n          const model = strapi.components[compo.__component];\n          removeIdsMut(model, compo);\n        }\n      });\n    } else if (attr.type === 'component') {\n      const model = strapi.components[attr.component];\n      if (isArray(value)) {\n        value.forEach((compo) => removeIdsMut(model, compo));\n      } else {\n        removeIdsMut(model, value);\n      }\n    }\n  });\n\n  return entry;\n};\n\n/**\n * Returns a copy of an entry picking only its non localized attributes\n * @param {object} model\n * @param {object} entry\n * @returns {object}\n */\nconst copyNonLocalizedAttributes = (model: any, entry: any) => {\n  const nonLocalizedAttributes = getNonLocalizedAttributes(model);\n\n  return pipe(pick(nonLocalizedAttributes), removeIds(model))(entry);\n};\n\n/**\n * Returns the list of attribute names that are localized\n * @param {object} model\n * @returns {string[]}\n */\nconst getLocalizedAttributes = (model: any) => {\n  return getVisibleAttributes(model).filter((attrName) =>\n    isLocalizedAttribute(model.attributes[attrName])\n  );\n};\n\n/**\n * Fill non localized fields of an entry if there are nil\n * @param {Object} entry entry to fill\n * @param {Object} relatedEntry values used to fill\n * @param {Object} options\n * @param {Object} options.model corresponding model\n */\nconst fillNonLocalizedAttributes = (entry: any, relatedEntry: any, { model }: any) => {\n  if (isNil(relatedEntry)) {\n    return;\n  }\n\n  const modelDef = strapi.getModel(model);\n  const relatedEntryCopy = copyNonLocalizedAttributes(modelDef, relatedEntry);\n\n  _.forEach(relatedEntryCopy, (value, field) => {\n    if (isNil(entry[field])) {\n      entry[field] = value;\n    }\n  });\n};\n\n/**\n * build the populate param to\n * @param {String} modelUID uid of the model, could be of a content-type or a component\n */\nconst getNestedPopulateOfNonLocalizedAttributes = (modelUID: any) => {\n  const schema = strapi.getModel(modelUID);\n  const scalarAttributes = getScalarAttributes(schema);\n  const nonLocalizedAttributes = getNonLocalizedAttributes(schema);\n  const currentAttributesToPopulate = difference(nonLocalizedAttributes, scalarAttributes);\n  const attributesToPopulate = [...currentAttributesToPopulate];\n\n  for (const attrName of currentAttributesToPopulate) {\n    const attr = schema.attributes[attrName];\n    if (attr.type === 'component') {\n      const nestedPopulate = getNestedPopulateOfNonLocalizedAttributes(attr.component).map(\n        (nestedAttr) => `${attrName}.${nestedAttr}`\n      );\n      attributesToPopulate.push(...nestedPopulate);\n    } else if (attr.type === 'dynamiczone') {\n      attr.components.forEach((componentName) => {\n        const nestedPopulate = getNestedPopulateOfNonLocalizedAttributes(componentName).map(\n          (nestedAttr) => `${attrName}.${nestedAttr}`\n        );\n        attributesToPopulate.push(...nestedPopulate);\n      });\n    }\n  }\n\n  return attributesToPopulate;\n};\n\nconst contentTypes = () => ({\n  isLocalizedContentType,\n  getValidLocale,\n  getNewLocalizationsFrom,\n  getLocalizedAttributes,\n  getNonLocalizedAttributes,\n  copyNonLocalizedAttributes,\n  getAndValidateRelatedEntity,\n  fillNonLocalizedAttributes,\n  getNestedPopulateOfNonLocalizedAttributes,\n});\n\ntype ContentTypesService = typeof contentTypes;\n\nexport default contentTypes;\nexport { ContentTypesService };\n","import permissions from './permissions';\nimport metrics from './metrics';\nimport localizations from './localizations';\nimport locales from './locales';\nimport isoLocales from './iso-locales';\nimport entityServiceDecorator from './entity-service-decorator';\nimport coreApi from './core-api';\nimport contentTypes from './content-types';\n\nexport default {\n  permissions,\n  metrics,\n  localizations,\n  locales,\n  'iso-locales': isoLocales,\n  'entity-service-decorator': entityServiceDecorator,\n  'core-api': coreApi,\n  'content-types': contentTypes,\n};\n","export default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/iso-locales',\n      handler: 'iso-locales.listIsoLocales',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::i18n.locale.read'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/locales',\n      handler: 'locales.listLocales',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/locales',\n      handler: 'locales.createLocale',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::i18n.locale.create'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/locales/:id',\n      handler: 'locales.updateLocale',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::i18n.locale.update'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'DELETE',\n      path: '/locales/:id',\n      handler: 'locales.deleteLocale',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::i18n.locale.delete'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/content-manager/actions/get-non-localized-fields',\n      handler: 'content-types.getNonLocalizedAttributes',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n  ],\n};\n","export default {\n  type: 'content-api',\n  routes: [\n    {\n      method: 'GET',\n      path: '/locales',\n      handler: 'locales.listLocales',\n    },\n  ],\n};\n","import admin from './admin';\nimport contentApi from './content-api';\n\nexport default {\n  admin,\n  'content-api': contentApi,\n};\n","import { prop } from 'lodash/fp';\nimport { yup, validateYupSchema } from '@strapi/utils';\n\nimport { isoLocales } from '../constants';\n\nconst allowedLocaleCodes = isoLocales.map(prop('code'));\n\nconst createLocaleSchema = yup\n  .object()\n  .shape({\n    name: yup.string().max(50).nullable(),\n    code: yup.string().oneOf(allowedLocaleCodes).required(),\n    isDefault: yup.boolean().required(),\n  })\n  .noUnknown();\n\nconst updateLocaleSchema = yup\n  .object()\n  .shape({\n    name: yup.string().min(1).max(50).nullable(),\n    isDefault: yup.boolean(),\n  })\n  .noUnknown();\n\nconst validateCreateLocaleInput = validateYupSchema(createLocaleSchema);\nconst validateUpdateLocaleInput = validateYupSchema(updateLocaleSchema);\n\nexport { validateCreateLocaleInput, validateUpdateLocaleInput };\n","const formatLocale = (locale: { name: string; code: string; isDefault: boolean }) => {\n  return {\n    ...locale,\n    name: locale.name || null,\n  };\n};\n\nexport { formatLocale };\n","import * as utils from '@strapi/utils';\nimport { pick } from 'lodash/fp';\nimport type { Common } from '@strapi/types';\nimport { getService } from '../utils';\nimport { validateCreateLocaleInput, validateUpdateLocaleInput } from '../validation/locales';\nimport { formatLocale } from '../domain/locale';\n\nconst { setCreatorFields, sanitize } = utils;\nconst { ApplicationError } = utils.errors;\n\nconst sanitizeLocale = (locale: any) => {\n  const model = strapi.getModel('plugin::i18n.locale');\n\n  return sanitize.contentAPI.output(locale, model);\n};\n\nconst controller: Common.Controller = {\n  async listLocales(ctx) {\n    const localesService = getService('locales');\n\n    const locales = await localesService.find();\n    const sanitizedLocales = await sanitizeLocale(locales);\n\n    ctx.body = await localesService.setIsDefault(sanitizedLocales);\n  },\n\n  async createLocale(ctx) {\n    const { user } = ctx.state;\n    const { body } = ctx.request;\n    const { isDefault, ...localeToCreate } = body;\n\n    await validateCreateLocaleInput(body);\n\n    const localesService = getService('locales');\n\n    const existingLocale = await localesService.findByCode(body.code);\n    if (existingLocale) {\n      throw new ApplicationError('This locale already exists');\n    }\n\n    const localeToPersist = setCreatorFields({ user })(formatLocale(localeToCreate));\n\n    const locale = await localesService.create(localeToPersist);\n\n    if (isDefault) {\n      await localesService.setDefaultLocale(locale);\n    }\n\n    const sanitizedLocale = await sanitizeLocale(locale);\n\n    ctx.body = await localesService.setIsDefault(sanitizedLocale);\n  },\n\n  async updateLocale(ctx) {\n    const { user } = ctx.state;\n    const { id } = ctx.params;\n    const { body } = ctx.request;\n    const { isDefault, ...updates } = body;\n\n    await validateUpdateLocaleInput(body);\n\n    const localesService = getService('locales');\n\n    const existingLocale = await localesService.findById(id);\n    if (!existingLocale) {\n      return ctx.notFound('locale.notFound');\n    }\n\n    const allowedParams = ['name'];\n    const cleanUpdates = setCreatorFields({ user, isEdition: true })(pick(allowedParams, updates));\n\n    const updatedLocale = await localesService.update({ id }, cleanUpdates);\n\n    if (isDefault) {\n      await localesService.setDefaultLocale(updatedLocale);\n    }\n\n    const sanitizedLocale = await sanitizeLocale(updatedLocale);\n\n    ctx.body = await localesService.setIsDefault(sanitizedLocale);\n  },\n\n  async deleteLocale(ctx) {\n    const { id } = ctx.params;\n\n    const localesService = getService('locales');\n\n    const existingLocale = await localesService.findById(id);\n    if (!existingLocale) {\n      return ctx.notFound('locale.notFound');\n    }\n\n    const defaultLocaleCode = await localesService.getDefaultLocale();\n    if (existingLocale.code === defaultLocaleCode) {\n      throw new ApplicationError('Cannot delete the default locale');\n    }\n\n    await localesService.delete({ id });\n\n    const sanitizedLocale = await sanitizeLocale(existingLocale);\n\n    ctx.body = await localesService.setIsDefault(sanitizedLocale);\n  },\n};\n\nexport default controller;\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nimport { get } from 'lodash/fp';\n\nconst validateGetNonLocalizedAttributesSchema = yup\n  .object()\n  .shape({\n    model: yup.string().required(),\n    id: yup.mixed().when('model', {\n      is: (model: any) => get('kind', strapi.contentType(model)) === 'singleType',\n      then: yup.strapiID().nullable(),\n      otherwise: yup.strapiID().required(),\n    }),\n    locale: yup.string().required(),\n  })\n  .noUnknown()\n  .required();\n\nconst validateGetNonLocalizedAttributesInput = validateYupSchema(\n  validateGetNonLocalizedAttributesSchema\n);\n\nexport { validateGetNonLocalizedAttributesInput };\n","import { pick, uniq, prop, getOr, flatten, pipe, map } from 'lodash/fp';\nimport { contentTypes as contentTypesUtils, errors } from '@strapi/utils';\nimport type { Common } from '@strapi/types';\nimport { getService } from '../utils';\nimport { validateGetNonLocalizedAttributesInput } from '../validation/content-types';\n\nconst { ApplicationError } = errors;\n\nconst { PUBLISHED_AT_ATTRIBUTE } = contentTypesUtils.constants;\n\nconst getLocalesProperty = getOr<string[]>([], 'properties.locales');\nconst getFieldsProperty = prop('properties.fields');\n\nconst getFirstLevelPath = map((path: string) => path.split('.')[0]);\n\nconst controller = {\n  async getNonLocalizedAttributes(ctx) {\n    const { user } = ctx.state;\n    const { model, id, locale } = ctx.request.body;\n\n    await validateGetNonLocalizedAttributesInput({ model, id, locale });\n\n    const {\n      copyNonLocalizedAttributes,\n      isLocalizedContentType,\n      getNestedPopulateOfNonLocalizedAttributes,\n    } = getService('content-types');\n\n    const {\n      default: { READ_ACTION, CREATE_ACTION },\n    } = strapi.admin.services.constants;\n\n    const modelDef = strapi.contentType(model);\n    const attributesToPopulate = getNestedPopulateOfNonLocalizedAttributes(model);\n\n    if (!isLocalizedContentType(modelDef)) {\n      throw new ApplicationError('model.not.localized');\n    }\n\n    const params = modelDef.kind === 'singleType' ? {} : { id };\n\n    const entity = await strapi\n      .query(model)\n      .findOne({ where: params, populate: [...attributesToPopulate, 'localizations'] });\n\n    if (!entity) {\n      return ctx.notFound();\n    }\n\n    const permissions = await strapi.admin.services.permission.findMany({\n      where: {\n        action: [READ_ACTION, CREATE_ACTION],\n        subject: model,\n        role: {\n          id: user.roles.map(prop('id')),\n        },\n      },\n    });\n\n    const localePermissions = permissions\n      .filter((perm: any) => getLocalesProperty(perm).includes(locale))\n      .map(getFieldsProperty);\n\n    const permittedFields = pipe(flatten, getFirstLevelPath, uniq)(localePermissions);\n\n    const nonLocalizedFields = copyNonLocalizedAttributes(modelDef, entity);\n    const sanitizedNonLocalizedFields = pick(permittedFields, nonLocalizedFields);\n\n    ctx.body = {\n      nonLocalizedFields: sanitizedNonLocalizedFields,\n      localizations: entity.localizations.concat(\n        pick(['id', 'locale', PUBLISHED_AT_ATTRIBUTE], entity)\n      ),\n    };\n  },\n} satisfies Common.Controller;\n\nexport default controller;\n","import type { Common } from '@strapi/types';\nimport { getService } from '../utils';\n\nconst controller: Common.Controller = {\n  listIsoLocales(ctx) {\n    const isoLocalesService = getService('iso-locales');\n\n    ctx.body = isoLocalesService.getIsoLocales();\n  },\n};\n\nexport default controller;\n","import locales from './locales';\nimport contentTypes from './content-types';\nimport isoLocales from './iso-locales';\n\nexport default {\n  locales,\n  'iso-locales': isoLocales,\n  'content-types': contentTypes,\n};\n","import bootstrap from './bootstrap';\nimport register from './register';\nimport contentTypes from './content-types';\nimport services from './services';\nimport routes from './routes';\nimport controllers from './controllers';\n\nexport default () => ({\n  register,\n  bootstrap,\n  routes,\n  controllers,\n  contentTypes,\n  services,\n});\n"],"names":["strapi","sendDidInitializeEvent","decorator","initDefaultLocale","actions","ApplicationError","errors","getValidLocale","getNewLocalizationsFrom","isLocalizedContentType","getAndValidateRelatedEntity","fillNonLocalizedAttributes","locale","get","localizations","locales","identity","propEq","prop","merge","createCreateLocalizationHandler","info","contentTypes","getDefaultLocale","attributes","_","capitalize","isArray","permissions","getOr","isEmpty","reduce","isNil","mapAsync","copyNonLocalizedAttributes","convertQueryParams","has","omit","syncLocalizations","syncNonLocalizedAttributes","sanitize","utils","map","toPath","keys","pick","findByCode","controller","schema","contentTypeUtils","cloneDeep","model","pipe","difference","isoLocales","yup","validateYupSchema","contentTypesUtils","getNestedPopulateOfNonLocalizedAttributes","flatten","uniq","isoLocalesService"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAM,eAAe,MAAM;AACzB,SAAO,OAAO,MAAM,EAAE,MAAM,UAAU,MAAM,QAAQ;AACtD;AAGA,MAAM,aAAa,CAAoB,SAA8B;AACnE,SAAO,OAAO,OAAO,MAAM,EAAE,QAAQ,IAAI;AAC3C;ACvBA,MAAM,sBAAsB,MAAM;AAC1B,QAAA,gBAAgB,OAAO,OAAO,OAAO,YAAY,EACpD,OAAO,CAAC,gBAAgB,WAAW,eAAe,EAAE,uBAAuB,WAAW,CAAC,EACvF,IAAI,CAAC,gBAAgB,YAAY,GAAG;AAEnC,MAAA,cAAc,SAAS,GAAG;AAIrB,WAAA,GAAG,WAAW,UAAU;AAAA,MAC7B,QAAQ;AAAA,MACR,MAAM,aAAa,OAAO;AACxB,cAAM,WAAW,eAAe,EAAE,6BAA6B,MAAM,OAAO,IAAI;AAAA,MAClF;AAAA,MACA,MAAM,iBAAiB,OAAO;AAC5B,cAAM,WAAW,eAAe,EAAE,6BAA6B,MAAM,OAAO,IAAI;AAAA,MAClF;AAAA,IAAA,CACD;AAAA,EACH;AAEO,SAAA,GAAG,WAAW,UAAU;AAAA,IAC7B,QAAQ,CAAC,qBAAqB;AAAA,IAE9B,MAAM,cAAc;AAClB,YAAM,WAAW,aAAa,EAAE,QAAQ,qCAAqC;AAAA,IAC/E;AAAA,IAEA,MAAM,cAAc;AAClB,YAAM,WAAW,aAAa,EAAE,QAAQ,qCAAqC;AAAA,IAC/E;AAAA,EAAA,CACD;AACH;AAEA,MAAA,YAAe,OAAO,EAAE,QAAAA,cAAiC;AACvD,QAAM,EAAE,wBAAAC,wBAAA,IAA2B,WAAW,SAAS;AACvD,QAAM,EAAE,WAAAC,WAAA,IAAc,WAAW,0BAA0B;AAC3D,QAAM,EAAE,mBAAAC,mBAAA,IAAsB,WAAW,SAAS;AAClD,QAAM,EAAE,iBAAiB,SAAAC,UAAS,OAAO,IAAI,WAAW,aAAa;AAGpEJ,UAAO,cAAsB,SAASE,UAAS;AAGhD,QAAMC,mBAAkB;AAGxB,kBAAgB,+BAA+B;AAG/C,QAAMC,SAAQ;AACd,EAAAA,SAAQ,yBAAyB;AACjC,EAAAA,SAAQ,wBAAwB;AAGhC,SAAO,gCAAgC;AAGnB;AAEG,EAAAH;AACzB;AC3DA,MAAM,EAAEI,kBAAAA,mBAAqB,IAAAC;AAE7B,MAAM,yBAAmD,OAAO,KAAK,SAAS;AACtE,QAAA,EAAE,MAAM,IAAI,IAAI;AACtB,QAAM,EAAE,OAAO,SAAS,IAAI;AAEtB,QAAA;AAAA,IACJ,gBAAAC;AAAA,IACA,yBAAAC;AAAA,IACA,wBAAAC;AAAA,IACA,6BAAAC;AAAA,IACA,4BAAAC;AAAA,EAAA,IACE,WAAW,eAAe;AAExB,QAAA,WAAW,OAAO,SAAS,KAAK;AAElC,MAAA,CAACF,wBAAuB,QAAQ,GAAG;AACrC,WAAO,KAAK;AAAA,EACd;AAEM,QAAAG,UAASC,GAAAA,IAAI,UAAU,KAAK;AAC5B,QAAA,kBAAkBA,GAAAA,IAAI,mBAAmB,KAAK;AAEhD,MAAA,QAAQ,QAAQ;AAEhB,MAAA;AACA,MAAA;AACa,mBAAA,MAAMN,gBAAeK,OAAM;AAAA,WACnC,GAAG;AACJ,UAAA,IAAIP,mBAAiB,2BAA2B;AAAA,EACxD;AAEA,OAAK,SAAS;AAEV,MAAA,SAAS,SAAS,cAAc;AAClC,UAAM,SAAS,MAAM,OAAO,cAAc,SAAS,SAAS,KAAK;AAAA,MAC/D,QAAQ;AAAA,IAAA,CACF;AAEJ,QAAA,QAAQ,MAAM,SAAS,KAAK;AAGhC,QAAI,QAAQ;AACV,aAAO,KAAK;AAAA,IACd;AAAA,EACF;AAEI,MAAA;AACA,MAAA;AACF,oBAAgB,MAAMK,6BAA4B,iBAAiB,OAAO,YAAY;AAAA,WAC/E,GAAG;AACV,UAAM,IAAIL;AAAAA,MACR;AAAA,IAAA;AAAA,EAEJ;AAEA,EAAAM,4BAA2B,MAAM,eAAe,EAAE,MAAO,CAAA;AACnD,QAAAG,iBAAgB,MAAMN,yBAAwB,aAAa;AACjE,OAAK,gBAAgBM;AAErB,SAAO,KAAK;AACd;AC9DA,MAAM,EAAE,gBAAoB,IAAAR;AAE5B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAE/B,MAAM,gCAAgC,CAAC,EAAE,QAAAN,SAAQ,mBAAwB;AACjE,QAAA,EAAE,MAAU,IAAAA,QAAO,OAAO,SAAS,EAAE,QAAQ,WAAW;AACxD,QAAA,EAAE,wBAAAS,wBAA2B,IAAAT,QAAO,OAAO,MAAM,EAAE,QAAQ,eAAe;AAEhF,SAAO,aAAa;AAAA,IAClB,CAAC,EAAE,aAAkB,OAAO,SAAS,MAAM,QAAQS,wBAAuB,OAAO,WAAW;AAAA,EAAA;AAEhG;AAEA,MAAA,kBAAe,CAAC,EAAE,QAAAT,QAAA,OAAkC;AAAA,EAClD,WAAW;AACT,UAAM,EAAE,SAAS,kBAAA,IAAsBA,QAAO,OAAO,SAAS;AAC9D,UAAM,EAAE,SAAS,eAAA,IAAmBA,QAAO,OAAO,MAAM;AAExD,UAAM,EAAE,wBAAAS,wBAAA,IAA2B,eAAe,eAAe;AAE3D,UAAA,mBAAmB,kBAAkB,WAAW;AAEhD,UAAA,oCAAoC,CAAC,gBAAqB;AAC9D,YAAM,EAAE,YAAgB,IAAA,kBAAkB,OAAO,EAAE;AAE5C,aAAA,SAAS,YAAY,WAAW,CAAC;AAAA,IAAA;AAGzB,qBAAA,WAAW,qBAAqB,EAAE,iBAAiB;AAG7D,WAAA,QAAQT,QAAO,YAAY,EAAE,QAAQ,CAAC,CAAC,KAAK,EAAE,MAAM;AACrD,UAAAS,wBAAuB,EAAE,GAAG;AAE9B,yBAAiB,WAAW,GAAG,EAAE,MAAM,QAAQ,EAAE;AAGjD,yBAAiB,WAAW,GAAG,EAAE,MAAM,eAAe,EAAE;MAC1D;AAAA,IAAA,CACD;AAED,qBAAiB,IAAI,CAAC,EAAE,OAAO,mBAAwB;AACrD,YAAM,sBAAsB,uBAAuB,EAAE,OAAO,aAAc,CAAA;AAC1E,YAAM,mBAAmB,gBAAgB,EAAE,MAAO,CAAA;AAC5C,YAAA;AAAA,QACJ,WAAW;AAAA,QACX,iBAAiB;AAAA,MACf,IAAA,+BAA+B,EAAE,OAAO,aAAc,CAAA;AAEnD,aAAA;AAAA,QACL,SAAS,CAAC,mBAAmB;AAAA,QAC7B,OAAO,CAAC,kBAAkB,2BAA2B;AAAA,QAErD,iBAAiB;AAAA;AAAA,UAEf,GAAG;AAAA;AAAA,UAEH,GAAG,4CAA4C,EAAE,cAAc;AAAA;AAAA,UAG/D,oBAAoB,EAAE,MAAM,EAAE,OAAO,qCAAqC;AAAA,UAC1E,qBAAqB,EAAE,MAAM,EAAE,OAAO,qCAAqC;AAAA,QAC7E;AAAA,MAAA;AAAA,IACF,CACD;AAED,UAAM,kBAAkB,CAAC,EAAE,YAAiB;AAC1C,YAAMM,WAAU,eAAe,aAAa,EAAE,cAAc;AAE5D,aAAO,MAAM,WAAW;AAAA,QACtB,MAAM;AAAA,QAEN,aAAa;AAAA,QAEb,WAAWC,GAAA;AAAA,QACX,YAAYA,GAAA;AAAA,QAEZ,aAAa,KAAU;AACjB,cAAA,IAAI,SAAS,eAAe;AACxB,kBAAA,IAAI,gBAAgB,yCAAyC;AAAA,UACrE;AAEM,gBAAA,gBAAgB,IAAI,UAAU,SAASD,SAAQ,KAAKE,GAAAA,OAAO,QAAQ,IAAI,KAAK,CAAC;AAEnF,cAAI,CAAC,eAAe;AACZ,kBAAA,IAAI,gBAAgB,yBAAyB;AAAA,UACrD;AAEA,iBAAO,IAAI;AAAA,QACb;AAAA,MAAA,CACD;AAAA,IAAA;AAGH,UAAM,iCAAiC,CAAC,EAAE,OAAO,mBAAwB;AACvE,YAAM,wBAAwB,8BAA8B,EAAE,QAAAjB,SAAQ,aAAA,CAAc,EAAE;AAAA,QACpFkB,GAAAA,KAAK,oBAAoB;AAAA,MAAA;AAG3B,YAAM,+BAA+B,sBAAsB;AAAA,QAAI,CAAC,OAC9D,gCAAgC,IAAI,EAAE,OAAO;AAAA,MAAA;AAIzC,YAAA,kBAAkB,6BACrB,IAAIA,GAAK,KAAA,gBAAgB,CAAC,EAC1B,OAAOC,UAAO,CAAA,CAAE;AAEnB,YAAM,YAAY,6BAA6B,IAAID,GAAAA,KAAK,UAAU,CAAC;AAE5D,aAAA,EAAE,WAAW;IAAgB;AAGtC,UAAM,kCAAkC,CAAC,aAAkB,EAAE,YAAiB;AAC5E,YAAM,EAAE,uBAAuB,wBAAA,IAA4B,kBAAkB,OAAO,EAAE;AACtF,YAAM,EAAE,iCAAAE,iCAAA,IAAoC,eAAe,UAAU;AAE/D,YAAA,eAAe,sBAAsB,WAAW;AAChD,YAAA,eAAe,kCAAkC,WAAW;AAE5D,YAAA,kBAAkBA,iCAAgC,WAAW;AAE7D,YAAA,WAAW,MAAM,WAAW;AAAA,QAChC,MAAM;AAAA,QAEN,WAAW,GAAQ;AACjB,YAAE,MAAM,cAAc;AAAA,YACpB,MAAM;AAAA;AAAA,YAGN,MAAM;AAAA,cACJ,IAAI;AAAA,cACJ,MAAM,wBAAwB,WAAW;AAAA,YAC3C;AAAA,YAEA,MAAM,QAAQ,QAAa,MAAW;AACpC,oBAAM,EAAE,IAAI,QAAAR,SAAQ,KAAA,IAAS;AAE7B,oBAAM,MAAM;AAAA,gBACV;AAAA,gBACA,MAAM,EAAE,GAAG,MAAM,QAAAA,QAAO;AAAA,cAAA;AAGpB,oBAAA,QAAQ,MAAM,gBAAgB,GAAG;AAEhC,qBAAA,EAAE,OAAO,MAAM,EAAE,MAAM,aAAa,YAAY;YACzD;AAAA,UAAA,CACD;AAAA,QACH;AAAA,MAAA,CACD;AAED,YAAM,iBAAiB;AAAA,QACrB,CAAC,YAAY,YAAY,EAAE,GAAG;AAAA,UAC5B,MAAM;AAAA,YACJ,OAAO,CAAC,GAAG,YAAY,GAAG,qBAAqB;AAAA,UACjD;AAAA,QACF;AAAA,MAAA;AAGK,aAAA,EAAE,UAAU;IAAe;AAGpC,UAAM,8CAA8C,CAAC,EAAE,mBAAwB;AAC7E,YAAM,gCAAgC,8BAA8B;AAAA,QAClE,QAAAZ;AAAA,QACA;AAAA,MACD,CAAA,EACE,IAAIkB,QAAK,oBAAoB,CAAC,EAC9B,IAAI,kBAAkB,OAAO,EAAE,OAAO,yBAAyB;AAElE,aAAO,8BAA8B;AAAA,QACnC,CAAC,KAAU,kBAAuB;AAAA,UAChC,GAAG;AAAA,UAEH,CAAC,YAAY,YAAY,EAAE,GAAG;AAAA,YAC5B,aAAa;AAAA;AAAA,cAEX,CAAC,SAAc,QAAa,MAAW,SAAcG,UAAc;AAC5D,qBAAA,KAAK,SAAS,KAAK;AAExB,uBAAO,QAAQ,QAAQ,MAAM,SAASA,KAAI;AAAA,cAC5C;AAAA,YACF;AAAA,UACF;AAAA,QAAA;AAAA,QAEF,CAAC;AAAA,MAAA;AAAA,IACH;AAGF,UAAM,yBAAyB,CAAC,EAAE,OAAO,mBAAwB;AAC/D,YAAM,EAAE,wBAAAZ,yBAAuB,IAAI,eAAe,eAAe;AAE3D,YAAA,eAAe,CAAC,WAAgB;AAC9B,cAAA,EAAE,WAAe,IAAA;AAGnB,YAAA,eAAe,WAAW,eAAe,YAAY;AACvD;AAAA,QACF;AAEA,cAAM,eAAe,aAAa,IAAI,OAAO,IAAI;AAEjD,YAAI,CAAC,cAAc;AACjB;AAAA,QACF;AAEM,cAAA,EAAE,YAAY,IAAI,aAAa;AAGjC,YAAA,CAACA,yBAAuB,WAAW,GAAG;AACxC;AAAA,QACF;AAEA,eAAO,KAAK,SAAS,MAAM,IAAI,EAAE,MAAM,wBAAwB;AAAA,MAAA;AAGjE,aAAO,MAAM,OAAO;AAAA,QAClB,MAAM;AAAA,QAEN,iBAAiB,QAAa;AAE5B,uBAAa,MAAM;AAAA,QACrhOA,MAAM,gBAAgB,MAAM;AACpB,QAAA,gBAAgB,QAAQ,IAAI;AAElC,MAAI,eAAe;AACX,UAAA,iBAAiB,WAAW,KAAK,CAAC,EAAE,WAAW,SAAS,aAAa;AAE3E,QAAI,CAAC,gBAAgB;AACnB,YAAM,IAAI;AAAA,QACR;AAAA,MAAA;AAAA,IAEJ;AAEO,WAAA,EAAE,GAAG;EACd;AAEO,SAAA;AAAA,IACL,MAAM;AAAA,IACN,MAAM;AAAA,EAAA;AAEV;AAEA,MAAM,iBAAiB,cAAc;ACvBrC,MAAA,oBAAe,OAAO,EAAE,iBAAiB,cAAAa,oBAAwB;AAC/D,QAAM,EAAE,wBAAAb,wBAAA,IAA2B,WAAW,eAAe;AAC7D,QAAM,EAAE,kBAAAc,kBAAA,IAAqB,WAAW,SAAS;AAEjD,MAAI,CAAC,iBAAiB;AACpB;AAAA,EACF;AAEA,aAAW,OAAOD,eAAc;AAC1B,QAAA,CAAC,gBAAgB,GAAG,GAAG;AACzB;AAAA,IACF;AAEM,UAAA,iBAAiB,gBAAgB,GAAG;AACpC,UAAA,cAAcA,cAAa,GAAG;AAEpC,QAAI,CAACb,wBAAuB,cAAc,KAAKA,wBAAuB,WAAW,GAAG;AAClF,YAAM,gBAAiB,MAAMc,uBAAuB,eAAe;AAEnE,YAAM,OAAO,GACV,aAAa,GAAG,EAChB,OAAO,EAAE,QAAQ,cAAc,CAAC,EAChC,MAAM,EAAE,QAAQ,KAAM,CAAA,EACtB;IACL;AAAA,EACF;AACF;AC1BA,MAAA,qBAAe,OAAO,EAAE,iBAAiB,cAAAD,oBAAwB;AAC/D,QAAM,EAAE,wBAAAb,wBAAA,IAA2B,WAAW,eAAe;AAC7D,QAAM,EAAE,kBAAAc,kBAAA,IAAqB,WAAW,SAAS;AAEjD,MAAI,CAAC,iBAAiB;AACpB;AAAA,EACF;AAEA,aAAW,OAAOD,eAAc;AAC1B,QAAA,CAAC,gBAAgB,GAAG,GAAG;AACzB;AAAA,IACF;AAEM,UAAA,iBAAiB,gBAAgB,GAAG;AACpC,UAAA,cAAcA,cAAa,GAAG;AAGpC,QAAIb,wBAAuB,cAAc,KAAK,CAACA,wBAAuB,WAAW,GAAG;AAClF,YAAM,gBAAiB,MAAMc,uBAAuB,eAAe;AAEnE,YAAM,OAAO,GACV,aAAa,GAAG,EAChB,SACA,MAAM,EAAE,QAAQ,EAAE,KAAK,cAAgB,EAAA,CAAC,EACxC,QAAQ;AAAA,IACb;AAAA,EACF;AACF;ACrBA,MAAA,WAAe,CAAC,EAAE,QAAAvB,QAAA,MAAiC;AACjD,8BAA4BA,OAAM;AAClC,oCAAkCA,OAAM;AACxC,0BAAwBA,OAAM;AAChC;AAWA,MAAM,mBAAmB,CAAC,QAAgB;AACxC,MAAI,CAAC;AAAY,WAAA;AAIjB,QAAM,OAAO,IAAI,MAAM,GAAG,EAAE,CAAC;AAI7B,QAAM,WAAW,KAAK,MAAM,GAAG,EAAE,OAAO,OAAO;AAK/C,QAAM,QAAQ,SAAS,SAAS,SAAS,CAAC;AAGnC,SAAA,MAAM,SAAS,IAAI;AAC5B;AAMA,MAAM,oCAAoC,CAACA,YAAmB;AAC5D,EAAAA,QAAO,OAAO,OAAO,IAAI,4CAA4C,CAAC,KAAK,SAAS;AAClF,QAAI,IAAI,WAAW,UAAU,iBAAiB,IAAI,WAAW,GAAG;AACvD,aAAA,uBAAuB,KAAK,IAAI;AAAA,IACzC;AAEA,WAAO,KAAK;AAAA,EAAA,CACb;AAED,EAAAA,QAAO,OAAO,OAAO,IAAI,wCAAwC,CAAC,KAAK,SAAS;AAC9E,QAAI,IAAI,WAAW,SAAS,iBAAiB,IAAI,WAAW,GAAG;AACtD,aAAA,uBAAuB,KAAK,IAAI;AAAA,IACzC;AAEA,WAAO,KAAK;AAAA,EAAA,CACb;AACH;AAMA,MAAM,0BAA0B,CAACA,YAAmB;AAClD,EAAAA,QAAO,KAAK,kCAAkC,EAAE,SAAS,kBAAkB;AAC3E,EAAAA,QAAO,KAAK,iCAAiC,EAAE,SAAS,iBAAiB;AAC3E;AAMA,MAAM,8BAA8B,CAACA,YAAmB;AAChD,QAAA,qBAAqB,WAAW,eAAe;AAC/C,QAAA,iBAAiB,WAAW,UAAU;AAE5C,SAAO,OAAOA,QAAO,YAAY,EAAE,QAAQ,CAAC,gBAAgB;AACtD,QAAA,mBAAmB,uBAAuB,WAAW,GAAG;AACpD,YAAA,EAAE,YAAAwB,YAAe,IAAA;AAErBC,yBAAA,IAAID,aAAY,iBAAiB;AAAA,QACjC,UAAU;AAAA,QACV,SAAS;AAAA,QACT,cAAc;AAAA,QACd,SAAS;AAAA,QACT,MAAM;AAAA,QACN,UAAU;AAAA,QACV,QAAQ,YAAY;AAAA,MAAA,CACrB;AAECC,yBAAA,IAAID,aAAY,UAAU;AAAA,QAC1B,UAAU;AAAA,QACV,SAAS;AAAA,QACT,cAAc;AAAA,QACd,SAAS;AAAA,QACT,MAAM;AAAA,MAAA,CACP;AAED,qBAAe,4BAA4B,WAAW;AAAA,IACxD;AAAA,EAAA,CACD;AAEG,MAAAxB,QAAO,OAAO,SAAS,GAAG;AAE5B,oBAAgB,EAAE,QAAAA,SAAQ,EAAE,SAAS;AAAA,EACvC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChHA,MAAe,SAAA;AAAA,EACb;AACF;ACFA,MAAe,iBAAA;AAAA,EACb;AACF;ACDA,MAAM,UAAU,CAAC,UAAU,QAAQ,UAAU,QAAQ,EAAE,IAAI,CAAC,SAAS;AAAA,EACnE,SAAS;AAAA,EACT,UAAU;AAAA,EACV,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,aAAa0B,cAAW,GAAG;AAAA,EAC3B,KAAK,UAAU,GAAG;AACpB,EAAE;AAEF,MAAM,6BAA6B,CAAC,EAAE,OAAO,aAAkB;AACvD,QAAA;AAAA,IACJ;AAAA,IACA,SAAS,EAAE,kBAAkB;AAAA,EAC3B,IAAA;AAGJ,MAAI,YAAY,gBAAgB;AAC9B;AAAA,EACF;AAGA,MAAIC,GAAAA,QAAQ,iBAAiB,KAAK,kBAAkB,SAAS,SAAS,GAAG;AACvE;AAAA,EACF;AAGO,SAAA,QAAQ,oBAAoBA,GAAAA,QAAQ,iBAAiB,IACxD,kBAAkB,OAAO,SAAS,IAClC,CAAC,SAAS;AAChB;AAEA,MAAM,sCAAsC,CAAC,EAAE,UAAU,cAAmB;AAC1E,MAAI,aAAa,WAAW;AACpB,UAAA,QAAQ,OAAO,SAAS,OAAO;AAErC,WAAO,WAAW,eAAe,EAAE,uBAAuB,KAAK;AAAA,EACjE;AAEO,SAAA;AACT;AAEA,MAAM,6BAA6B,OAAOC,iBAAqB;AAC7D,QAAM,EAAE,eAAA,IAAmB,OAAO,MAAM,SAAS;AACjD,QAAM,EAAE,MAAM,eAAe,IAAI,WAAW,SAAS;AAE/C,QAAA,aAAa,MAAM;AACzB,QAAM,iBAAiB,WAAW,IAAIV,GAAAA,KAAK,MAAM,CAAC;AAElD,SAAO,QAAQ;AAAA,IACbU,aAAY,IAAI,OAAO,eAAoB;AACnC,YAAA,EAAE,QAAQ,QAAY,IAAA;AAEtB,YAAA,2BAA2B,MAAM,eAAe;AAAA,QACpD;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAGF,UAAI,CAAC,0BAA0B;AACtB,eAAA;AAAA,MACT;AAEA,YAAM,0BAA0BC,GAAA,MAAM,CAAC,GAAG,cAAc,UAAU;AAE3D,aAAA,EAAE,GAAG,YAAY,YAAY,EAAE,GAAG,yBAAyB,SAAS,eAAA;IAAiB,CAC7F;AAAA,EAAA;AAEL;AAEA,MAAM,uCAAuC,YAAY;AACjD,QAAA,cAAc,OAAO,MAAM,SAAS;AACpC,QAAA,oBAAoB,OAAO,MAAM,SAAS;AAE1C,QAAA,iBAAiB,MAAM,YAAY;AAEzC,MAAI,CAAC,gBAAgB;AACnB;AAAA,EACF;AAEM,QAAA,wBAAwB,MAAM,kBAAkB,SAAS;AAAA,IAC7D,OAAO;AAAA,MACL,MAAM;AAAA,QACJ,IAAI,eAAe;AAAA,MACrB;AAAA,IACF;AAAA,EAAA,CACD;AAEK,QAAA,2BAA2B,MAAM,2BAA2B,qBAAqB;AAEvF,QAAM,YAAY,kBAAkB,eAAe,IAAI,wBAAwB;AACjF;AAEA,MAAM,sBAAsB,YAAY;AACtC,QAAM,EAAE,eAAA,IAAmB,OAAO,MAAM,SAAS;AAE3C,QAAA,eAAe,aAAa,OAAO;AAC3C;AAEA,MAAM,2BAA2B,MAAM;AACrC,QAAM,EAAE,eAAA,IAAmB,OAAO,MAAM,SAAS;AACjD,QAAM,EAAE,MAAA,IAAU,OAAO,MAAM,SAAS;AAEzB,iBAAA,MAAM,yBAAyB,SAAS,mCAAmC;AACpF,QAAA,+BAA+B,SAAS,0BAA0B;AAC1E;AAEA,MAAM,0BAA0B,MAAM;AACpC,QAAM,EAAE,eAAA,IAAmB,OAAO,MAAM,SAAS;AAGlC,iBAAA,MAAM,aAAa,SAAS,0BAA0B;AAGtD,iBAAA,SAAS,QAAQ,CAAC,WAAgB,2BAA2B,EAAE,OAAO,OAAQ,CAAA,CAAC;AAChG;AAEA,MAAe,qBAAA;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AClHA,MAAM,yBAAyB,OAAO,EAAE,QAAQ,cAAmB;AACjE,QAAM,EAAE,eAAA,IAAmB,OAAO,MAAM,SAAS;AAEjD,QAAMd,WAAU,MAAM,WAAW,SAAS,EAAE,KAAK;AAG7C,MAAAe,GAAAA,QAAQf,QAAO,GAAG;AACpB;AAAA,EACF;AAEW,aAAA,WAAW,QAAQ,UAAU;AAChC,UAAA,UAAU,MAAM,eAAe,kBAAkB,WAAW,OAAO,UAAU,QAAQ,GAAG;AACxF,UAAA,qBAAqB,QAAQ,WAAW;AAAA,MAC5C,CAAC,aAAkB,SAAS,UAAU;AAAA,IAAA;AAGpC,QAAA,WAAW,CAAC,oBAAoB;AAClC,cAAQ,WAAW,KAAK;AAAA,QACtB,OAAO;AAAA,QACP,OAAO;AAAA,QACP,UAAUA,SAAQ,IAAI,CAAC,EAAE,MAAM,KAAA,OAAiB,EAAE,OAAO,QAAQ,MAAM,OAAO,KAAO,EAAA;AAAA,MAAA,CACtF;AAAA,IACH;AAAA,EACF;AACF;AAEA,MAAM,iCAAiC,MAAM;AAC3C,QAAM,EAAE,gBAAA,IAAoB,OAAO,MAAM,SAAS;AAElC,kBAAA,WAAW,eAAe,sBAAsB;AAChD,kBAAA,WAAW,mBAAmB,sBAAsB;AACtE;AAEA,MAAe,yBAAA;AAAA,EACb;AAAA,EACA;AACF;ACjCA,MAAM,yBAAyB,CAAC,YAAiB;AAC/C,QAAM,EAAE,YAAY,WAAW,KAAA,IAAS;AAClC,QAAA,EAAE,SAAS,WAAe,IAAA;AAEhC,QAAM,eAAe,OAAO,MAAM,SAAS,KAAK,kBAAkB,IAAI;AAEtE,MAAI,cAAc;AAChB;AAAA,EACF;AAEA,QAAM,EAAE,SAAAA,SAAA,IAAY,cAAc;AAClC,QAAM,EAAE,wBAAAN,wBAAA,IAA2B,WAAW,eAAe;AAG7D,MAAI,CAAC,SAAS;AACZ;AAAA,EACF;AAEM,QAAA,KAAK,OAAO,aAAa,OAAO;AAGlC,MAAA,CAACA,wBAAuB,EAAE,GAAG;AAC/B;AAAA,EACF;AAGA,MAAIM,aAAY,MAAM;AACpB;AAAA,EACF;AAEA,YAAU,IAAI;AAAA,IACZ,QAAQ;AAAA,MACN,KAAKA,YAAW,CAAC;AAAA,IACnB;AAAA,EAAA,CACD;AACH;AAEA,MAAM,kCAAkC,MAAM;AAC5C,QAAM,EAAE,OAAA,IAAW,OAAO,MAAM,SAAS;AAEzC,SAAO,MAAM,4BAA4B,EAAE,SAAS,sBAAsB;AAC5E;AAEA,MAAe,gBAAA;AAAA,EACb;AAAA,EACA;AACF;ACxDA,MAAM,cAAc,OAAO;AAAA,EACzB,SAAS;AAAA,EACT,iBAAiB;AAAA,EACjB,QAAQ;AACV;ACLA,MAAM,yBAAyB,YAAY;AACzC,QAAM,EAAE,wBAAAN,wBAAA,IAA2B,WAAW,eAAe;AAG7D,QAAM,uBAAuBsB,GAAA;AAAA,IAC3B,CAAC,KAAK,gBAAiBtB,wBAAuB,WAAW,IAAI,MAAM,IAAI;AAAA,IACvE;AAAA,EAAA,EACA,OAAO,YAAmB;AAEtB,QAAA,OAAO,UAAU,KAAK,qBAAqB,EAAE,iBAAiB,EAAE,qBAAqB,EAAA,CAAG;AAChG;AAEA,MAAM,gCAAgC,YAAY;AAChD,QAAM,kBAAkB,MAAM,WAAW,SAAS,EAAE,MAAM;AAEpD,QAAA,OAAO,UAAU,KAAK,wBAAwB;AAAA,IAClD,iBAAiB,EAAE,gBAAgB;AAAA,EAAA,CACpC;AACH;AAEA,MAAM,UAAU,OAAO;AAAA,EACrB;AAAA,EACA;AACF;ACrBA,MAAM,iBAAiB,MAAM,OAAO,GAAG,QAAQ,WAAW;AAM1D,MAAM,+BAA+B,OAAO,SAAc;AACxD,QAAM,EAAE,kBAAAc,kBAAA,IAAqB,WAAW,SAAS;AAE7C,MAAAI,GAAA,QAAQ,IAAI,KAAK,KAAK,KAAK,CAAC,UAAU,CAAC,MAAM,MAAM,GAAG;AAClD,UAAA,gBAAgB,MAAMJ;AACvB,SAAA,QAAQ,CAAC,UAAU;AAChB,YAAA,SAAS,MAAM,UAAU;AAAA,IAAA,CAChC;AAAA,EAAA,WACQ,CAACI,GAAAA,QAAQ,IAAI,KAAKK,GAAAA,MAAM,KAAK,MAAM,GAAG;AAC1C,SAAA,SAAS,MAAMT;EACtB;AACF;AAQA,MAAM,oBAAoB,OAAO,OAAY,EAAE,YAAiB;AAC9D,MAAI,MAAM,QAAQ,OAAO,aAAa,GAAG;AACjC,UAAA,mBAAmB,CAAC,MAAM,IAAI,GAAG,MAAM,cAAc,IAAIL,GAAAA,KAAK,IAAI,CAAC,CAAC;AAEpE,UAAA,qBAAqB,CAAC,OAAY;AACtC,YAAMJ,iBAAgB,iBAAiB,OAAO,CAAC,mBAAmB,mBAAmB,EAAE;AAEvF,aAAO,OAAO,MAAM,MAAM,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,GAAA,GAAM,MAAM,EAAE,eAAAA,eAAAA,EAAiB,CAAA;AAAA,IAAA;AAK5E,UAAAmB,MAAA;AAAA,MACJ,MAAM;AAAA,MACN,CAAC,iBAAsB,mBAAmB,aAAa,EAAE;AAAA,MACzD;AAAA,QACE,aAAa,oBAAoB,CAAC,OAAO,GAAG,cAAA,IAAkB,IAAI;AAAA,MACpE;AAAA,IAAA;AAAA,EAEJ;AACF;AAQA,MAAM,6BAA6B,OAAO,OAAY,EAAE,YAAiB;AACvE,QAAM,EAAE,4BAAAC,4BAAA,IAA+B,WAAW,eAAe;AAEjE,MAAI,MAAM,QAAQ,OAAO,aAAa,GAAG;AACjC,UAAA,yBAAyBA,4BAA2B,OAAO,KAAK;AAElE,QAAAJ,GAAAA,QAAQ,sBAAsB,GAAG;AACnC;AAAA,IACF;AAEM,UAAA,qBAAqB,CAAC,OAAY;AAC/B,aAAA,OAAO,cAAc,OAAO,MAAM,KAAK,IAAI,EAAE,MAAM,uBAAA,CAAwB;AAAA,IAAA;AAK9E,UAAAG,MAAA;AAAA,MACJ,MAAM;AAAA,MACN,CAAC,iBAAsB,mBAAmB,aAAa,EAAE;AAAA,MACzD;AAAA,QACE,aAAa,oBAAoB,CAAC,OAAO,GAAG,cAAA,IAAkB,IAAI;AAAA,MACpE;AAAA,IAAA;AAAA,EAEJ;AACF;AAEA,MAAM,gBAAgB,OAAO;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AACF;ACpFA,MAAM,OAAO,CAAC,SAAc,CAAO,MAAA,OAAO,MAAM,qBAAqB,EAAE,SAAS,EAAE,OAAO,OAAQ,CAAA;AAEjG,MAAM,WAAW,CAAC,OAAY,OAAO,MAAM,qBAAqB,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAA,EAAM,CAAA;AAE3F,MAAM,aAAa,CAAC,SAAc,OAAO,MAAM,qBAAqB,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAA,EAAQ,CAAA;AAEjG,MAAM,QAAQ,CAAC,SAAc,CAAO,MAAA,OAAO,MAAM,qBAAqB,EAAE,MAAM,EAAE,OAAO,OAAQ,CAAA;AAE/F,MAAM,SAAS,OAAOrB,YAAgB;AAC9B,QAAA,SAAS,MAAM,OAAO,MAAM,qBAAqB,EAAE,OAAO,EAAE,MAAMA,QAAA,CAAQ;AAErE,aAAA,SAAS,EAAE;AAEf,SAAA;AACT;AAEA,MAAM,SAAS,OAAO,QAAa,YAAiB;AAClD,QAAM,SAAS,MAAM,OAAO,MAAM,qBAAqB,EAAE,OAAO,EAAE,OAAO,QAAQ,MAAM,QAAS,CAAA;AAErF,aAAA,SAAS,EAAE;AAEf,SAAA;AACT;AAEA,MAAM,WAAW,OAAO,EAAE,SAAc;AAChC,QAAA,iBAAiB,MAAM,SAAS,EAAE;AAExC,MAAI,gBAAgB;AAClB,UAAM,6BAA6B,EAAE,QAAQ,eAAe,KAAM,CAAA;AAClE,UAAM,SAAS,MAAM,OAAO,MAAM,qBAAqB,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,EAAG,CAAA;AAEtE,eAAA,SAAS,EAAE;AAEf,WAAA;AAAA,EACT;AAEO,SAAA;AACT;AAEA,MAAM,mBAAmB,CAAC,EAAE,KAC1B,MAAA,aAAA,EAAe,IAAI,EAAE,KAAK,kBAAkB,OAAO,KAAM,CAAA;AAE3D,MAAM,mBAAmB,MAAM,eAAe,IAAI,EAAE,KAAK,kBAAkB;AAE3E,MAAM,eAAe,OAAOG,aAAiB;AACvC,MAAAiB,GAAAA,MAAMjB,QAAO,GAAG;AACXA,WAAAA;AAAAA,EACT;AAEM,QAAA,gBAAgB,MAAM;AAExB,MAAA,MAAM,QAAQA,QAAO,GAAG;AACnBA,WAAAA,SAAQ,IAAI,CAACH,aAAY,EAAE,GAAGA,SAAQ,WAAW,kBAAkBA,QAAO,KAAA,EAAO;AAAA,EAC1F;AAEA,SAAO,EAAE,GAAGG,UAAS,WAAW,kBAAkBA,SAAQ;AAC5D;AAEA,MAAM,oBAAoB,YAAY;AACpC,QAAM,oBAAoB,MAAM,OAAO,MAAM,qBAAqB,EAAE;AACpE,MAAI,sBAAsB,GAAG;AAC3B,UAAM,OAAO,cAAc;AAC3B,UAAM,iBAAiB,EAAE,MAAM,eAAe,KAAM,CAAA;AAAA,EACtD;AACF;AAEA,MAAM,+BAA+B,OAAO,EAAE,QAAAH,cAAkB;AAC9D,QAAM,EAAE,wBAAAH,wBAAA,IAA2B,WAAW,eAAe;AAE7D,QAAM,kBAAkB,OAAO,OAAO,OAAO,YAAY,EAAE,OAAOA,uBAAsB;AAExF,aAAW,SAAS,iBAAiB;AAE7B,UAAA,OAAO,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,OAAO,EAAE,QAAAG,QAAO,EAAA,CAAG;AAAA,EAChE;AACF;AAEA,MAAM,UAAU,OAAO;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR;AACF;AC3FA,MAAM,gBAAgB,MAAM;AAE5B,MAAM,oBAAoB,OAAO;AAAA,EAC/B;AACF;ACAA,MAAM,EAAE,uBAA2B,IAAAuB;AACnC,MAAM,EAAE9B,kBAAAA,mBAAqB,IAAAC;AAE7B,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB,CAAC,WAAW,UAAU,QAAQ;AAC3D,MAAM,eAAe,CAAC,QAAQ;AAE9B,MAAM,gBAAgB,CAAC,KAAU,WAAgB;AAC/C,SACE8B,GAAAA,IAAI,KAAK,OAAO,OAAO,KACtBT,GAAQ,QAAA,OAAO,OAAO,KAAK,OAAO,QAAQ,KAAK,CAAC,WAAgBS,GAAAA,IAAI,KAAK,MAAM,CAAC,KAChFT,WAAQd,GAAI,IAAA,QAAQ,OAAO,OAAO,CAAC,KAClC,OAAO,QAAQ,KAAK,KAAK,CAAC,WAAgBuB,GAAI,IAAA,KAAK,MAAM,CAAC;AAEhE;AAOA,MAAM,aAAa,OAAO,SAAc,IAAI,MAAW,CAAA,MAAO;AACtD,QAAA,EAAE,OAAW,IAAA;AAEf,MAAAA,GAAA,IAAI,qBAAqB,MAAM,GAAG;AAChC,QAAA,OAAO,mBAAmB,MAAM,OAAO;AAClC,aAAAC,GAAA,KAAK,qBAAqB,MAAM;AAAA,IACzC;AAEO,WAAA;AAAA,MACL,GAAGA,GAAK,KAAA,qBAAqB,MAAM;AAAA,MACnC,SAAS;AAAA,QACP,MAAM,CAAC,EAAE,QAAQ,OAAO,mBAAmB,GAAG,EAAE,OAAO,OAAO,WAAW,EAAE;AAAA,MAC7E;AAAA,IAAA;AAAA,EAEJ;AAEA,QAAM,oBAAoB,cAAc,MAAM,MAAM,KAAK,qBAAqB,SAAS,MAAM;AAC7F,QAAM,uBAAuB,cAAc,UAAU,MAAM,KAAK,aAAa,SAAS,MAAM;AAE5F,MAAI,qBAAqB,sBAAsB;AACtC,WAAA;AAAA,EACT;AAEA,QAAM,EAAE,kBAAAd,kBAAA,IAAqB,WAAW,SAAS;AAE1C,SAAA;AAAA,IACL,GAAG;AAAA,IACH,SAAS;AAAA,MACP,MAAM,CAAC,EAAE,QAAQ,MAAMA,kBAAA,GAAoB,EAAE,OAAO,OAAO,WAAW,EAAE;AAAA,IAC1E;AAAA,EAAA;AAEJ;AAMA,MAAM,oBAAoB,OAAO,SAAc;AAC7C,QAAM,EAAE,gBAAAhB,gBAAA,IAAmB,WAAW,eAAe;AAErD,MAAI,CAAC,MAAM;AACT;AAAA,EACF;AAEI,MAAA;AACF,SAAK,SAAS,MAAMA,gBAAe,KAAK,MAAM;AAAA,WACvC,GAAG;AACJ,UAAA,IAAIF,mBAAiB,2BAA2B;AAAA,EACxD;AACF;AAMA,MAAM,YAAY,CAAC,aAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnC,MAAM,WAAW,SAAS,IAAI,MAAM,CAAA,GAAI;AACtC,WAAO,QAAQ,WAAW,KAAK,MAAM,QAAQ,GAAG;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,WAAW,SAAc,IAAI,MAAW,CAAA,GAAI;AAChD,UAAM,gBAAgB,MAAM,QAAQ,WAAW,KAAK,MAAM,QAAQ,GAAG;AAErE,UAAM,QAAQ,OAAO,SAAS,IAAI,GAAG;AAErC,UAAM,EAAE,wBAAAI,wBAAA,IAA2B,WAAW,eAAe;AAEzD,QAAA,CAACA,wBAAuB,KAAK,GAAG;AAC3B,aAAA;AAAA,IACT;AAEO,WAAA,WAAW,eAAe,GAAG;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,OAAO,KAAU,OAAY,IAAI;AAC/B,UAAA,QAAQ,OAAO,SAAS,GAAG;AAEjC,UAAM,EAAE,mBAAA6B,oBAAmB,4BAAAC,4BAA2B,IAAI,WAAW,eAAe;AACpF,UAAM,EAAE,wBAAA9B,wBAAA,IAA2B,WAAW,eAAe;AAEzD,QAAA,CAACA,wBAAuB,KAAK,GAAG;AAClC,aAAO,QAAQ,OAAO,KAAK,MAAM,KAAK,IAAI;AAAA,IAC5C;AAEM,UAAA,EAAE,KAAS,IAAA;AACjB,UAAM,kBAAkB,IAAI;AAE5B,UAAM,QAAQ,MAAM,QAAQ,OAAO,KAAK,MAAM,KAAK,IAAI;AAEvD,UAAM6B,mBAAkB,OAAO,EAAE,MAAO,CAAA;AACxC,UAAMC,4BAA2B,OAAO,EAAE,MAAO,CAAA;AAC1C,WAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,OAAO,KAAU,UAAe,OAAY,CAAA,GAAI;AAC9C,UAAA,QAAQ,OAAO,SAAS,GAAG;AAEjC,UAAM,EAAE,4BAAAA,4BAAA,IAA+B,WAAW,eAAe;AACjE,UAAM,EAAE,wBAAA9B,wBAAA,IAA2B,WAAW,eAAe;AAEzD,QAAA,CAACA,wBAAuB,KAAK,GAAG;AAClC,aAAO,QAAQ,OAAO,KAAK,MAAM,KAAK,UAAU,IAAI;AAAA,IACtD;AAEA,UAAM,EAAE,MAAM,GAAG,YAAA,IAAgB;AAEjC,UAAM,QAAQ,MAAM,QAAQ,OAAO,KAAK,MAAM,KAAK,UAAU;AAAA,MAC3D,GAAG;AAAA,MACH,MAAM4B,GAAAA,KAAK,CAAC,UAAU,eAAe,GAAG,IAAI;AAAA,IAAA,CAC7C;AAED,UAAME,4BAA2B,OAAO,EAAE,MAAO,CAAA;AAC1C,WAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,SAAS,KAAU,MAAW;AAC5B,UAAA,QAAQ,OAAO,SAAS,GAAG;AAEjC,UAAM,EAAE,wBAAA9B,wBAAA,IAA2B,WAAW,eAAe;AAEzD,QAAA,CAACA,wBAAuB,KAAK,GAAG;AAClC,aAAO,QAAQ,SAAS,KAAK,MAAM,KAAK,IAAI;AAAA,IAC9C;AAEM,UAAA,EAAE,KAAS,IAAA;AAEjB,QAAI,SAAS,cAAc;AACrB,UAAA,KAAK,mBAAmB,MAAM,OAAO;AAEjC,cAAA,gBAAgB,MAAM,KAAK,WAAW,MAAM,EAAE,KAAK,QAAQ,WAAA,CAAY;AACvE,cAAA,QAAQ,uBAAuB,KAAK,aAAa;AACjD,cAAA,WAAW,MAAM,OAAO,GAAG,MAAM,GAAG,EAAE,SAAS,KAAK;AAC1D,eAAO,KAAK,WAAW,UAAU,EAAE,KAAK,QAAQ,YAAY;AAAA,MAC9D;AAGA,aAAO,QAAQ,SAAS,KAAK,MAAM,KAAK,IAAI;AAAA,IAC9C;AAEA,WAAO,QAAQ,SAAS,KAAK,MAAM,KAAK,IAAI;AAAA,EAC9C;AACF;AAEA,MAAM,yBAAyB,OAAO;AAAA,EACpC;AAAA,EACA;AACF;ACpMA,MAAM,EAAA,cAAEa,gBAAc,8BAAoBkB,WAAA,IAAaC,iBAAAA;AACvD,MAAM,EAAA,kBAAEpC,oBAAkB,kBAAkBoC,iBAAAA,QAAM;AAElD,MAAM,EAAE,2BAA2B,cAAc,sBAAA,IAA0BnB;AAO3E,MAAM,gBAAgB,CAAC,UAAe;AAC7B,SAAA,CAAC,MAAM,QAAQ,GAAGoB,GAAA,IAAIxB,QAAK,QAAQ,GAAG,MAAM,aAAa,CAAC;AACnE;AAOA,MAAM,yBAAyB,CAAC,UAAe;AACtC,SAAA,CAAC,MAAM,IAAI,GAAGwB,GAAA,IAAIxB,QAAK,IAAI,GAAG,MAAM,aAAa,CAAC;AAC3D;AAUA,MAAM,kBAAkB,CAAC,gBAAqB;AAK5C,QAAM,uBAAuB,MAAM;AAC1B,WAAA,sBAAsB,WAAW,EAAE;AAAA,MACxC,CAAC,kBAAkB,CAAC,CAAC,UAAU,eAAe,EAAE,SAAS,aAAa;AAAA,IAAA;AAAA,EACxE;AAQI,QAAA,qBAAqB,CAAC,UAAe;AACzC,UAAM,gBAAgB;AACf,WAAAa,GAAA;AAAA,MACL,CAAC,KAAK,YAAY;AAChB,cAAM,CAAC,OAAO,IAAIY,GAAA,OAAO,OAAO;AAC5B,YAAA,cAAc,SAAS,OAAO,GAAG;AAC/B,cAAA,OAAO,IAAI,MAAM,OAAO;AAAA,QAC9B;AAEO,eAAA;AAAA,MACT;AAAA,MACA,CAAC;AAAA,MACDC,GAAAA,KAAK,KAAK;AAAA,IAAA;AAAA,EACZ;AAQI,QAAA,gBAAgB,CAAC,SAAc;AAC5B,WAAAC,QAAK,wBAAwB,IAAI;AAAA,EAAA;AAGnC,SAAA,EAAE,eAAe;AAC1B;AAOA,MAAM,4BAA4B,CAAC,gBAAqB;AAChD,QAAA,UAAU,gCAAgC,WAAW;AAEpD,SAAA,CAAC,MAAW,OAAO;AAClB,UAAA,EAAE,GAAG,IAAI,IAAI;AACnB,UAAM,EAAE,MAAM,MAAM,IAAI,mBAAmB,GAAG;AAE9C,WAAO,QAAQ,EAAE,IAAI,MAAM,MAAO,CAAA;AAAA,EAAA;AAEtC;AAEA,MAAM,kCACJ,CAAC,gBACD,OAAO,OAAY,CAAA,MAAO;AACxB,QAAM,EAAE,4BAAAX,4BAAA,IAA+B,WAAW,eAAe;AAEjE,QAAM,EAAE,eAAe,mBAAmB,IAAI,gBAAgB,WAAW;AAEzE,QAAM,QAAQ,aAAa,WAAW,IAClC,MAAM,OAAO,MAAM,YAAY,GAAG,EAAE,QAAQ,EAAE,UAAU,CAAC,eAAe,GAAG,IAC3E,MAAM,OACH,MAAM,YAAY,GAAG,EACrB,QAAQ,EAAE,OAAO,EAAE,IAAI,KAAK,MAAM,UAAU,CAAC,eAAe,EAAG,CAAA;AAEtE,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,cAAc;AAAA,EAC1B;AAEM,QAAA,EAAE,MAAM,MAAU,IAAA;AAExB,QAAM,EAAE,YAAAY,YAAA,IAAe,WAAW,SAAS;AAEvC,MAAAd,GAAA,MAAM,KAAK,MAAM,GAAG;AAChB,UAAA,IAAI3B,mBAAiB,mBAAmB;AAAA,EAChD;AAEA,QAAM,iBAAiB,MAAMyC,YAAW,KAAK,MAAM;AACnD,MAAI,CAAC,gBAAgB;AACb,UAAA,IAAIzC,mBAAiB,mBAAmB;AAAA,EAChD;AAEM,QAAA,cAAc,cAAc,KAAK;AACvC,MAAI,YAAY,SAAS,KAAK,MAAM,GAAG;AAC/B,UAAA,IAAIA,mBAAiB,wBAAwB;AAAA,EACrD;AAEA,QAAM,gBAAgB;AAAA,IACpB,GAAG6B,4BAA2B,aAAa,KAAK;AAAA,IAChD,GAAG,cAAc,IAAI;AAAA,IACrB,QAAQ,KAAK;AAAA,IACb,eAAe,uBAAuB,KAAK;AAAA,EAAA;AAGvC,QAAA,iBAAiB,mBAAmB,KAAK;AAE/C,QAAM,WAAW,MAAM,OAAO,cAAc,OAAO,YAAY,KAAK;AAAA,IAClE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,UAAU,CAAC,eAAe;AAAA,EAAA,CAC3B;AAEM,SAAAM,WAAS,WAAW,OAAO,UAAU,OAAO,SAAS,YAAY,GAAG,CAAC;AAC9E;AAOF,MAAM,0BAA0B,CAAC,gBAAqB;AAC9C,QAAA,EAAE,UAAc,IAAA;AAEhB,QAAA,cAAc,0BAA0B,WAAW;AACnD,QAAA,YAAY,aAAa,WAAW,IACtC,IAAI,WAAW,mBACf,IAAI,WAAW;AAEZ,SAAA;AAAA,IACL,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS,GAAG,SAAS;AAAA,IACrB,QAAQ;AAAA,MACN,UAAU,CAAC;AAAA,IACb;AAAA,EAAA;AAEJ;AAMA,MAAM,8BAA8B,CAAC,gBAAqB;AAClD,QAAA,EAAE,WAAW,QAAY,IAAA;AAG/B,MAAI,CAAC,SAAS;AACZ;AAAA,EACF;AAEM,QAAA,oBAAyB,wBAAwB,WAAW;AAE3D,SAAA,IAAI,OAAO,EAAE,OAAO,SAAS,EAAE,OAAO,KAAK,iBAAiB;AAE5D,SAAA,UAAU,IAAI,aAAa,EAAE,OAAO,QAAQ,OAAO,IAAI,SAAS,IAAI,CAACO,gBAAoB;AACvF,WAAA,OAAO,OAAOA,aAAY;AAAA,MAC/B,oBAAoB,0BAA0B,WAAW;AAAA,IAAA,CAC1D;AAAA,EAAA,CACF;AACH;AAEA,MAAM,kBAAkB,CAAC,MAAW,QAAa;AAC3C,MAAA,OAAO,SAAS,UAAU;AAC5B,WAAO,GAAG,IAAI;AAAA,EAAK,GAAG;AAAA,EACxB;AACF;AAMA,MAAM,mBAAmB,CAACC,YAAgB;AACxCvB,qBAAE,UAAU,OAAO,OAAO,IAAI,4BAA4B,GAAGuB,SAAQ,eAAe;AACtF;AAMA,MAAM,+BAA+B,CAAC,gBAAqB;AACnD,QAAA,EAAE,UAAU,UAAc,IAAA;AAE5B,MAAA,CAAC,OAAO,QAAQ,SAAS;AAC3B;AAAA,EACF;AAEM,QAAA,EAAE,YAAY,SAAS,IAAI,OAAO,OAAO,SAAS,EAAE,QAAQ,QAAQ;AAI1E,QAAM,aAAa;AAAA,IACjB,MAAM;AAAA,MACJ,QAAQ;AAAA,IACV;AAAA,EAAA;AAIE,MAAA,aAAa,WAAW,GAAG;AACvB,UAAA,YAAY,WAAW,SAAS;AAChC,UAAA,iBAAiBvB,WAAAA,QAAE,WAAW,SAAS;AAE5B,qBAAA;AAAA,MACf,UAAU;AAAA,QACR,OAAO;AAAA,UACL,CAAC,SAAS,GAAG;AAAA,QACf;AAAA,QACA,UAAU;AAAA,UACR,CAAC,SAAS,cAAc,EAAE,GAAG;AAAA,UAC7B,CAAC,SAAS,cAAc,EAAE,GAAG;AAAA,QAC/B;AAAA,MACF;AAAA,IAAA,CACD;AAAA,EAAA,OACI;AACC,UAAA,YAAY,SAAS,SAAS;AAEnB,qBAAA;AAAA,MACf,UAAU;AAAA,QACR,OAAO;AAAA,UACL,CAAC,SAAS,GAAG;AAAA,UACb,CAAC,GAAG,SAAS,YAAY,GAAG;AAAA,QAC9B;AAAA,MACF;AAAA,IAAA,CACD;AAAA,EACH;AAGA,QAAM,WAAW;AAEjB,QAAM,kBAAkBA,WAAAA,QAAE,WAAW,WAAW,SAAS,CAAC;AACpD,QAAA,eAAe,SAAS,eAAe;AAC7C,QAAM,cAAc,GAAG,YAAY,iBAAiB,eAAe,YAAY,QAAQ;AACjF,QAAA,aAAa,GAAG,YAAY,GAAG;AAEpB,mBAAA;AAAA,IACf,UAAU;AAAA,IACV,UAAU;AAAA,MACR,UAAU;AAAA,QACR,CAAC,YAAY,GAAG;AAAA,UACd,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,IACF;AAAA,EAAA,CACD;AACH;AAEA,MAAM,UAAU,OAAO;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;ACvRA,MAAM,EAAE,uBAAuB,sBAAsB,kBAAkB,wBACrEwB,MAAAA;AACF,MAAM,EAAE5C,kBAAAA,mBAAqB,IAAAC;AAE7B,MAAM,qBAAqB,CAAC,qBAA0B;AAC7C,SAAAY,QAAK,gCAAgC,gBAAgB,MAAM;AACpE;AAEA,MAAM,iBAAiB,OAAON,YAAgB;AACtC,QAAA,iBAAiB,WAAW,SAAS;AAEvC,MAAAoB,GAAAA,MAAMpB,OAAM,GAAG;AACjB,WAAO,eAAe;EACxB;AAEA,QAAM,cAAc,MAAM,eAAe,WAAWA,OAAM;AAC1D,MAAI,CAAC,aAAa;AACV,UAAA,IAAIP,mBAAiB,kBAAkB;AAAA,EAC/C;AAEO,SAAAO;AACT;AAOA,MAAM,0BAA0B,OAAO,kBAAuB;AAC5D,MAAI,eAAe;AACV,WAAA,CAAC,cAAc,IAAI,GAAG,cAAc,cAAc,IAAIM,GAAA,KAAK,IAAI,CAAC,CAAC;AAAA,EAC1E;AAEA,SAAO;AACT;AASA,MAAM,8BAA8B,OAAO,iBAAsB,OAAYN,YAAgB;AAC3F,QAAM,EAAE,KAAS,IAAA,OAAO,SAAS,KAAK;AAClC,MAAA;AAEJ,MAAI,SAAS,cAAc;AACT,oBAAA,MAAM,OAAO,MAAM,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,eAAe,EAAA,CAAG;AAAA,aACxE,iBAAiB;AAC1B,oBAAgB,MAAM,OACnB,MAAM,KAAK,EACX,QAAQ,EAAE,OAAO,EAAE,IAAI,mBAAmB,UAAU,CAAC,eAAe,EAAG,CAAA;AAAA,EAC5E;AAEI,MAAA,mBAAmB,CAAC,eAAe;AAC/B,UAAA,IAAIP,mBAAiB,kCAAkC;AAAA,EAC/D;AAEA,MACE,kBACC,cAAc,WAAWO,WACxB,cAAc,cAAc,IAAIM,GAAAA,KAAK,QAAQ,CAAC,EAAE,SAASN,OAAM,IACjE;AACM,UAAA,IAAIP,mBAAiB,0CAA0C;AAAA,EACvE;AAEO,SAAA;AACT;AAOA,MAAM,uBAAuB,CAAC,cAAmB;AAE7C,SAAA,mBAAmB,SAAS,KAC5B,sBAAsB,SAAS,KAC/B,iBAAiB,WAAW,KAAK;AAErC;AAOA,MAAM,yBAAyB,CAAC,UAAe;AAC7C,SAAO,mBAAmB,KAAK;AACjC;AAOA,MAAM,4BAA4B,CAAC,UAAe;AACzC,SAAA,qBAAqB,KAAK,EAAE;AAAA,IACjC,CAAC,aAAa,CAAC,qBAAqB,MAAM,WAAW,QAAQ,CAAC;AAAA,EAAA;AAElE;AAEA,MAAM,WAAW,CAAC,UAAe;AAC/B,MAAI,OAAO,UAAU,YAAY+B,GAAI,IAAA,MAAM,KAAK,GAAG;AACjD,WAAO,MAAM;AAAA,EACf;AACF;AAEA,MAAM,YAAY,CAAC,UAAe,CAAC,UAAe,aAAa,OAAOc,GAAAA,UAAU,KAAK,CAAC;AAEtF,MAAM,eAAe,CAAC,OAAY,UAAe;AAC3C,MAAAlB,GAAAA,MAAM,KAAK,GAAG;AACT,WAAA;AAAA,EACT;AAEA,WAAS,KAAK;AAEdP,aAAA,QAAE,QAAQ,MAAM,YAAY,CAAC,MAAM,aAAa;AACxC,UAAA,QAAQ,MAAM,QAAQ;AAC5B,QAAI,KAAK,SAAS,iBAAiBE,GAAA,QAAQ,KAAK,GAAG;AAC3C,YAAA,QAAQ,CAAC,UAAU;AACnB,YAAAS,GAAA,IAAI,eAAe,KAAK,GAAG;AAC7B,gBAAMe,SAAQ,OAAO,WAAW,MAAM,WAAW;AACjD,uBAAaA,QAAO,KAAK;AAAA,QAC3B;AAAA,MAAA,CACD;AAAA,IAAA,WACQ,KAAK,SAAS,aAAa;AACpC,YAAMA,SAAQ,OAAO,WAAW,KAAK,SAAS;AAC1C,UAAAxB,GAAAA,QAAQ,KAAK,GAAG;AAClB,cAAM,QAAQ,CAAC,UAAU,aAAawB,QAAO,KAAK,CAAC;AAAA,MAAA,OAC9C;AACL,qBAAaA,QAAO,KAAK;AAAA,MAC3B;AAAA,IACF;AAAA,EAAA,CACD;AAEM,SAAA;AACT;AAQA,MAAM,6BAA6B,CAAC,OAAY,UAAe;AACvD,QAAA,yBAAyB,0BAA0B,KAAK;AAEvD,SAAAC,GAAA,KAAKP,QAAK,sBAAsB,GAAG,UAAU,KAAK,CAAC,EAAE,KAAK;AACnE;AAOA,MAAM,yBAAyB,CAAC,UAAe;AACtC,SAAA,qBAAqB,KAAK,EAAE;AAAA,IAAO,CAAC,aACzC,qBAAqB,MAAM,WAAW,QAAQ,CAAC;AAAA,EAAA;AAEnD;AASA,MAAM,6BAA6B,CAAC,OAAY,cAAmB,EAAE,YAAiB;AAChF,MAAAb,GAAAA,MAAM,YAAY,GAAG;AACvB;AAAA,EACF;AAEM,QAAA,WAAW,OAAO,SAAS,KAAK;AAChC,QAAA,mBAAmB,2BAA2B,UAAU,YAAY;AAE1EP,aAAAA,QAAE,QAAQ,kBAAkB,CAAC,OAAO,UAAU;AAC5C,QAAIO,SAAM,MAAM,KAAK,CAAC,GAAG;AACvB,YAAM,KAAK,IAAI;AAAA,IACjB;AAAA,EAAA,CACD;AACH;AAMA,MAAM,4CAA4C,CAAC,aAAkB;AAC7D,QAAAgB,UAAS,OAAO,SAAS,QAAQ;AACjC,QAAA,mBAAmB,oBAAoBA,OAAM;AAC7C,QAAA,yBAAyB,0BAA0BA,OAAM;AACzD,QAAA,8BAA8BK,GAAAA,WAAW,wBAAwB,gBAAgB;AACjF,QAAA,uBAAuB,CAAC,GAAG,2BAA2B;AAE5D,aAAW,YAAY,6BAA6B;AAC5C,UAAA,OAAOL,QAAO,WAAW,QAAQ;AACnC,QAAA,KAAK,SAAS,aAAa;AAC7B,YAAM,iBAAiB,0CAA0C,KAAK,SAAS,EAAE;AAAA,QAC/E,CAAC,eAAe,GAAG,QAAQ,IAAI,UAAU;AAAA,MAAA;AAEtB,2BAAA,KAAK,GAAG,cAAc;AAAA,IAAA,WAClC,KAAK,SAAS,eAAe;AACjC,WAAA,WAAW,QAAQ,CAAC,kBAAkB;AACnC,cAAA,iBAAiB,0CAA0C,aAAa,EAAE;AAAA,UAC9E,CAAC,eAAe,GAAG,QAAQ,IAAI,UAAU;AAAA,QAAA;AAEtB,6BAAA,KAAK,GAAG,cAAc;AAAA,MAAA,CAC5C;AAAA,IACH;AAAA,EACF;AAEO,SAAA;AACT;AAEA,MAAM,eAAe,OAAO;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AC9NA,MAAe,WAAA;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,eAAeM;AAAAA,EACf,4BAA4B;AAAA,EAC5B,YAAY;AAAA,EACZ,iBAAiB;AACnB;AClBA,MAAe,QAAA;AAAA,EACb,MAAM;AAAA,EACN,QAAQ;AAAA,IACN;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,0BAA0B,EAAE;AAAA,UAClD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU,CAAC,6BAA6B;AAAA,MAC1C;AAAA,IACF;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,4BAA4B,EAAE;AAAA,UACpD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,4BAA4B,EAAE;AAAA,UACpD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,4BAA4B,EAAE;AAAA,UACpD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU,CAAC,6BAA6B;AAAA,MAC1C;AAAA,IACF;AAAA,EACF;AACF;AC5EA,MAAe,aAAA;AAAA,EACb,MAAM;AAAA,EACN,QAAQ;AAAA,IACN;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,EACF;AACF;ACNA,MAAe,SAAA;AAAA,EACb;AAAA,EACA,eAAe;AACjB;ACDA,MAAM,qBAAqB,WAAW,IAAIpC,GAAAA,KAAK,MAAM,CAAC;AAEtD,MAAM,qBAAqBqC,MAAA,IACxB,OAAO,EACP,MAAM;AAAA,EACL,MAAMA,MAAI,IAAA,OAAA,EAAS,IAAI,EAAE,EAAE,SAAS;AAAA,EACpC,MAAMA,MAAI,IAAA,OAAA,EAAS,MAAM,kBAAkB,EAAE,SAAS;AAAA,EACtD,WAAWA,MAAA,IAAI,QAAQ,EAAE,SAAS;AACpC,CAAC,EACA,UAAU;AAEb,MAAM,qBAAqBA,MAAA,IACxB,OAAO,EACP,MAAM;AAAA,EACL,MAAMA,MAAAA,IAAI,OAAA,EAAS,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,SAAS;AAAA,EAC3C,WAAWA,UAAI,QAAQ;AACzB,CAAC,EACA,UAAU;AAEb,MAAM,4BAA4BC,MAAAA,kBAAkB,kBAAkB;AACtE,MAAM,4BAA4BA,wBAAkB,kBAAkB;ACzBtE,MAAM,eAAe,CAAC5C,YAA+D;AAC5E,SAAA;AAAA,IACL,GAAGA;AAAA,IACH,MAAMA,QAAO,QAAQ;AAAA,EAAA;AAEzB;ACEA,MAAM,EAAE,kBAAkB,SAAa,IAAA6B;AACvC,MAAM,oBAAEpC,mBAAiB,IAAIoC,iBAAM;AAEnC,MAAM,iBAAiB,CAAC7B,YAAgB;AAChC,QAAA,QAAQ,OAAO,SAAS,qBAAqB;AAEnD,SAAO,SAAS,WAAW,OAAOA,SAAQ,KAAK;AACjD;AAEA,MAAMmC,eAAgC;AAAA,EACpC,MAAM,YAAY,KAAK;AACf,UAAA,iBAAiB,WAAW,SAAS;AAErC,UAAAhC,WAAU,MAAM,eAAe;AAC/B,UAAA,mBAAmB,MAAM,eAAeA,QAAO;AAErD,QAAI,OAAO,MAAM,eAAe,aAAa,gBAAgB;AAAA,EAC/D;AAAA,EAEA,MAAM,aAAa,KAAK;AAChB,UAAA,EAAE,KAAK,IAAI,IAAI;AACf,UAAA,EAAE,KAAK,IAAI,IAAI;AACrB,UAAM,EAAE,WAAW,GAAG,eAAA,IAAmB;AAEzC,UAAM,0BAA0B,IAAI;AAE9B,UAAA,iBAAiB,WAAW,SAAS;AAE3C,UAAM,iBAAiB,MAAM,eAAe,WAAW,KAAK,IAAI;AAChE,QAAI,gBAAgB;AACZ,YAAA,IAAIV,mBAAiB,4BAA4B;AAAA,IACzD;AAEM,UAAA,kBAAkB,iBAAiB,EAAE,KAAM,CAAA,EAAE,aAAa,cAAc,CAAC;AAE/E,UAAMO,UAAS,MAAM,eAAe,OAAO,eAAe;AAE1D,QAAI,WAAW;AACP,YAAA,eAAe,iBAAiBA,OAAM;AAAA,IAC9C;AAEM,UAAA,kBAAkB,MAAM,eAAeA,OAAM;AAEnD,QAAI,OAAO,MAAM,eAAe,aAAa,eAAe;AAAA,EAC9D;AAAA,EAEA,MAAM,aAAa,KAAK;AAChB,UAAA,EAAE,KAAK,IAAI,IAAI;AACf,UAAA,EAAE,GAAG,IAAI,IAAI;AACb,UAAA,EAAE,KAAK,IAAI,IAAI;AACrB,UAAM,EAAE,WAAW,GAAG,QAAA,IAAY;AAElC,UAAM,0BAA0B,IAAI;AAE9B,UAAA,iBAAiB,WAAW,SAAS;AAE3C,UAAM,iBAAiB,MAAM,eAAe,SAAS,EAAE;AACvD,QAAI,CAAC,gBAAgB;AACZ,aAAA,IAAI,SAAS,iBAAiB;AAAA,IACvC;AAEM,UAAA,gBAAgB,CAAC,MAAM;AACvB,UAAA,eAAe,iBAAiB,EAAE,MAAM,WAAW,KAAM,CAAA,EAAEiC,GAAA,KAAK,eAAe,OAAO,CAAC;AAE7F,UAAM,gBAAgB,MAAM,eAAe,OAAO,EAAE,GAAA,GAAM,YAAY;AAEtE,QAAI,WAAW;AACP,YAAA,eAAe,iBAAiB,aAAa;AAAA,IACrD;AAEM,UAAA,kBAAkB,MAAM,eAAe,aAAa;AAE1D,QAAI,OAAO,MAAM,eAAe,aAAa,eAAe;AAAA,EAC9D;AAAA,EAEA,MAAM,aAAa,KAAK;AAChB,UAAA,EAAE,GAAG,IAAI,IAAI;AAEb,UAAA,iBAAiB,WAAW,SAAS;AAE3C,UAAM,iBAAiB,MAAM,eAAe,SAAS,EAAE;AACvD,QAAI,CAAC,gBAAgB;AACZ,aAAA,IAAI,SAAS,iBAAiB;AAAA,IACvC;AAEM,UAAA,oBAAoB,MAAM,eAAe;AAC3C,QAAA,eAAe,SAAS,mBAAmB;AACvC,YAAA,IAAIxC,mBAAiB,kCAAkC;AAAA,IAC/D;AAEA,UAAM,eAAe,OAAO,EAAE,GAAI,CAAA;AAE5B,UAAA,kBAAkB,MAAM,eAAe,cAAc;AAE3D,QAAI,OAAO,MAAM,eAAe,aAAa,eAAe;AAAA,EAC9D;AACF;ACnGA,MAAM,0CAA0CkD,MAAA,IAC7C,OAAO,EACP,MAAM;AAAA,EACL,OAAOA,MAAA,IAAI,OAAO,EAAE,SAAS;AAAA,EAC7B,IAAIA,MAAAA,IAAI,QAAQ,KAAK,SAAS;AAAA,IAC5B,IAAI,CAAC,UAAe1C,OAAI,QAAQ,OAAO,YAAY,KAAK,CAAC,MAAM;AAAA,IAC/D,MAAM0C,MAAA,IAAI,SAAS,EAAE,SAAS;AAAA,IAC9B,WAAWA,MAAA,IAAI,SAAS,EAAE,SAAS;AAAA,EAAA,CACpC;AAAA,EACD,QAAQA,MAAA,IAAI,OAAO,EAAE,SAAS;AAChC,CAAC,EACA,YACA;AAEH,MAAM,yCAAyCC,MAAA;AAAA,EAC7C;AACF;ACdA,MAAM,EAAE,iBAAqB,IAAAlD;AAE7B,MAAM,EAAE,uBAAuB,IAAImD,MAAkB,aAAA;AAErD,MAAM,qBAAqB5B,GAAA,MAAgB,IAAI,oBAAoB;AACnE,MAAM,oBAAoBX,GAAAA,KAAK,mBAAmB;AAElD,MAAM,oBAAoBwB,GAAAA,IAAI,CAAC,SAAiB,KAAK,MAAM,GAAG,EAAE,CAAC,CAAC;AAElE,MAAMK,eAAa;AAAA,EACjB,MAAM,0BAA0B,KAAK;AAC7B,UAAA,EAAE,KAAK,IAAI,IAAI;AACrB,UAAM,EAAE,OAAO,IAAI,QAAAnC,QAAO,IAAI,IAAI,QAAQ;AAE1C,UAAM,uCAAuC,EAAE,OAAO,IAAI,QAAAA,QAAQ,CAAA;AAE5D,UAAA;AAAA,MACJ,4BAAAsB;AAAA,MACA,wBAAAzB;AAAA,MACA,2CAAAiD;AAAA,IAAA,IACE,WAAW,eAAe;AAExB,UAAA;AAAA,MACJ,SAAS,EAAE,aAAa,cAAc;AAAA,IACxC,IAAI,OAAO,MAAM,SAAS;AAEpB,UAAA,WAAW,OAAO,YAAY,KAAK;AACnC,UAAA,uBAAuBA,2CAA0C,KAAK;AAExE,QAAA,CAACjD,wBAAuB,QAAQ,GAAG;AAC/B,YAAA,IAAI,iBAAiB,qBAAqB;AAAA,IAClD;AAEA,UAAM,SAAS,SAAS,SAAS,eAAe,CAAC,IAAI,EAAE;AAEvD,UAAM,SAAS,MAAM,OAClB,MAAM,KAAK,EACX,QAAQ,EAAE,OAAO,QAAQ,UAAU,CAAC,GAAG,sBAAsB,eAAe,EAAG,CAAA;AAElF,QAAI,CAAC,QAAQ;AACX,aAAO,IAAI;IACb;AAEA,UAAMmB,eAAc,MAAM,OAAO,MAAM,SAAS,WAAW,SAAS;AAAA,MAClE,OAAO;AAAA,QACL,QAAQ,CAAC,aAAa,aAAa;AAAA,QACnC,SAAS;AAAA,QACT,MAAM;AAAA,UACJ,IAAI,KAAK,MAAM,IAAIV,GAAA,KAAK,IAAI,CAAC;AAAA,QAC/B;AAAA,MACF;AAAA,IAAA,CACD;AAED,UAAM,oBAAoBU,aACvB,OAAO,CAAC,SAAc,mBAAmB,IAAI,EAAE,SAAShB,OAAM,CAAC,EAC/D,IAAI,iBAAiB;AAExB,UAAM,kBAAkBwC,GAAAA,KAAKO,GAAA,SAAS,mBAAmBC,GAAI,IAAA,EAAE,iBAAiB;AAE1E,UAAA,qBAAqB1B,4BAA2B,UAAU,MAAM;AAChE,UAAA,8BAA8BW,GAAAA,KAAK,iBAAiB,kBAAkB;AAE5E,QAAI,OAAO;AAAA,MACT,oBAAoB;AAAA,MACpB,eAAe,OAAO,cAAc;AAAA,QAClCA,GAAAA,KAAK,CAAC,MAAM,UAAU,sBAAsB,GAAG,MAAM;AAAA,MACvD;AAAA,IAAA;AAAA,EAEJ;AACF;ACxEA,MAAM,aAAgC;AAAA,EACpC,eAAe,KAAK;AACZ,UAAAgB,qBAAoB,WAAW,aAAa;AAE9C,QAAA,OAAOA,mBAAkB;EAC/B;AACF;ACLA,MAAe,cAAA;AAAA,EAAA,SACb9C;AAAAA,EACA,eAAeuC;AAAAA,EACf,iBAAiBhC;AACnB;ACDA,MAAA,QAAe,OAAO;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAAA,cACAA;AAAAA,EACA;AACF;;"}