{"version":3,"file":"index-5ymbpUOY.js","sources":["../../admin/src/pluginId.ts","../../admin/src/utils/getTranslation.ts","../../admin/src/components/CheckboxConfirmation.tsx","../../admin/src/store/hooks.ts","../../admin/src/hooks/useContentTypePermissions.ts","../../admin/src/utils/data.ts","../../admin/src/components/CMEditViewCopyLocale.tsx","../../admin/src/components/CMEditViewLocalePicker.tsx","../../admin/src/components/CMEditViewInjectedComponents.tsx","../../admin/src/utils/fields.ts","../../admin/src/hooks/useContentTypeHasI18n.ts","../../admin/src/components/CMListViewModalsAdditionalInformation.tsx","../../admin/src/store/constants.ts","../../admin/src/hooks/useLocales.ts","../../admin/src/components/Initializer.tsx","../../admin/src/utils/locales.ts","../../admin/src/components/LocalePicker.tsx","../../admin/src/constants.ts","../../admin/src/contentManagerHooks/app.ts","../../admin/src/contentManagerHooks/editView.tsx","../../admin/src/components/LocaleListCell.tsx","../../admin/src/contentManagerHooks/listView.tsx","../../admin/src/middlewares/addCommonFieldsToInitialData.ts","../../admin/src/middlewares/extendCTBAttributeInitialData.ts","../../admin/src/middlewares/extendCTBInitialData.ts","../../admin/src/middlewares/localePermission.ts","../../admin/src/store/reducers.ts","../../admin/src/utils/schemas.ts","../../admin/src/index.ts"],"sourcesContent":["export const pluginId = 'i18n';\n","import { pluginId } from '../pluginId';\n\nconst getTranslation = (id: string) => `${pluginId}.${id}`;\n\nexport { getTranslation };\n","import * as React from 'react';\n\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Flex,\n  Typography,\n} from '@strapi/design-system';\nimport { ExclamationMarkCircle } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { getTranslation } from '../utils/getTranslation';\n\nconst TextAlignTypography = styled(Typography)`\n  text-align: center;\n`;\n\ninterface IntlMessage extends MessageDescriptor {\n  values: object;\n}\n\ninterface CheckboxConfirmationProps {\n  description: IntlMessage;\n  intlLabel: IntlMessage;\n  isCreating?: boolean;\n  name: string;\n  onChange: (event: { target: { name: string; value: boolean; type: string } }) => void;\n  value: boolean;\n}\n\nconst CheckboxConfirmation = ({\n  description,\n  isCreating = false,\n  intlLabel,\n  name,\n  onChange,\n  value,\n}: CheckboxConfirmationProps) => {\n  const { formatMessage } = useIntl();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleChange = (value: boolean) => {\n    if (isCreating || value) {\n      return onChange({ target: { name, value, type: 'checkbox' } });\n    }\n\n    if (!value) {\n      return setIsOpen(true);\n    }\n\n    return null;\n  };\n\n  const handleConfirm = () => {\n    onChange({ target: { name, value: false, type: 'checkbox' } });\n    setIsOpen(false);\n  };\n\n  const handleToggle = () => setIsOpen((prev) => !prev);\n\n  const label = intlLabel.id\n    ? formatMessage(\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n        { ...intlLabel.values }\n      )\n    : name;\n\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n\n  return (\n    <>\n      <Checkbox\n        hint={hint}\n        id={name}\n        name={name}\n        onValueChange={handleChange}\n        value={value}\n        type=\"checkbox\"\n      >\n        {label}\n      </Checkbox>\n      {isOpen && (\n        <Dialog onClose={handleToggle} title=\"Confirmation\" isOpen={isOpen}>\n          <DialogBody icon={<ExclamationMarkCircle />}>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n              <Flex justifyContent=\"center\">\n                <TextAlignTypography id=\"confirm-description\">\n                  {formatMessage({\n                    id: getTranslation('CheckboxConfirmation.Modal.content'),\n                    defaultMessage:\n                      'Disabling localization will engender the deletion of all your content but the one associated to your default locale (if existing).',\n                  })}\n                </TextAlignTypography>\n              </Flex>\n              <Flex justifyContent=\"center\">\n                <Typography fontWeight=\"semiBold\" id=\"confirm-description\">\n                  {formatMessage({\n                    id: getTranslation('CheckboxConfirmation.Modal.body'),\n                    defaultMessage: 'Do you want to disable it?',\n                  })}\n                </Typography>\n              </Flex>\n            </Flex>\n          </DialogBody>\n          <DialogFooter\n            startAction={\n              <Button onClick={handleToggle} variant=\"tertiary\">\n                {formatMessage({\n                  id: 'components.popUpWarning.button.cancel',\n                  defaultMessage: 'No, cancel',\n                })}\n              </Button>\n            }\n            endAction={\n              <Button variant=\"danger-light\" onClick={handleConfirm}>\n                {formatMessage({\n                  id: getTranslation('CheckboxConfirmation.Modal.button-confirm'),\n                  defaultMessage: 'Yes, disable',\n                })}\n              </Button>\n            }\n          />\n        </Dialog>\n      )}\n    </>\n  );\n};\n\nexport { CheckboxConfirmation };\n","import { Dispatch } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport { Action, RootState } from './reducers';\n\ntype AppDispatch = Dispatch<Action>;\n\nconst useTypedDispatch: () => AppDispatch = useDispatch;\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport { useTypedSelector, useTypedDispatch };\n","import { useMemo } from 'react';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport { Permission } from '@strapi/helper-plugin';\n\nimport { useTypedSelector } from '../store/hooks';\nimport { RootState } from '../store/reducers';\n\nconst makeSelectContentTypePermissions = () =>\n  // @ts-expect-error – I have no idea why this fails like this.\n  createSelector(\n    (state: RootState) => state.rbacProvider.collectionTypesRelatedPermissions,\n    (_, slug: string) => slug,\n    (state: RootState['rbacProvider']['collectionTypesRelatedPermissions'], slug: string) => {\n      const currentCTRelatedPermissions = slug ? state[slug] : {};\n\n      if (!currentCTRelatedPermissions) {\n        return { createPermissions: [], readPermissions: [] };\n      }\n\n      const readPermissions =\n        currentCTRelatedPermissions['plugin::content-manager.explorer.read'] || [];\n      const createPermissions =\n        currentCTRelatedPermissions['plugin::content-manager.explorer.create'] || [];\n\n      return { createPermissions, readPermissions };\n    }\n  );\n\nconst useContentTypePermissions = (\n  slug?: string\n): { createPermissions: Permission[]; readPermissions: Permission[] } => {\n  const selectContentTypePermissions = useMemo(makeSelectContentTypePermissions, []);\n  return useTypedSelector((state) => selectContentTypePermissions(state, slug));\n};\n\nexport { useContentTypePermissions };\n","import {\n  contentManagementUtilRemoveFieldsFromData,\n  formatContentTypeData,\n} from '@strapi/helper-plugin';\nimport { Schema, Attribute } from '@strapi/types';\n\nimport { Entity } from '../../../shared/contracts/shared';\n\n/* -------------------------------------------------------------------------------------------------\n * cleanData\n * -----------------------------------------------------------------------------------------------*/\n\ninterface Schemas<TSchema extends Schema.ContentType> {\n  contentType: TSchema;\n  components: Record<string, Schema.Component>;\n}\n\nconst cleanData = <\n  TSchema extends Schema.ContentType,\n  TData extends { [K in keyof TSchema['attributes']]: Attribute.GetValue<TSchema['attributes'][K]> }\n>(\n  data: TData,\n  { contentType, components }: Schemas<TSchema>,\n  initialLocalizations: Localization[]\n) => {\n  const dataWithoutPasswordsAndRelations = removePasswordAndRelationsFieldFromData(\n    data,\n    contentType,\n    components\n  );\n\n  const dataWithLocalizations = {\n    ...dataWithoutPasswordsAndRelations,\n    localizations: initialLocalizations,\n  };\n\n  const cleanedClonedData = contentManagementUtilRemoveFieldsFromData(\n    dataWithLocalizations,\n    contentType,\n    components,\n    ['createdBy', 'updatedBy', 'publishedAt', 'id', 'updatedAt', 'createdAt']\n  );\n\n  return formatContentTypeData(cleanedClonedData, contentType, components);\n};\n\nconst removePasswordAndRelationsFieldFromData = <\n  TSchema extends Schema.ContentType,\n  TData extends { [K in keyof TSchema['attributes']]: Attribute.GetValue<TSchema['attributes'][K]> }\n>(\n  data: TData,\n  contentTypeSchema: TSchema,\n  componentSchema: Record<string, Schema.Component>\n) => {\n  const recursiveCleanData = <\n    TSchemum extends Schema.Schema,\n    TDatum extends {\n      [P in keyof TSchemum['attributes']]: Attribute.GetValue<TSchemum['attributes'][P]>;\n    }\n  >(\n    datum: TDatum,\n    schemum: TSchemum\n  ) => {\n    return Object.keys(datum).reduce((acc, current: keyof TDatum) => {\n      // @ts-expect-error – TODO: fix the fact we can't assign this.\n      const attribute = schemum.attributes[current] ?? { type: undefined };\n\n      if (attribute.type === 'dynamiczone') {\n        const value = datum[current] as Attribute.GetValue<Attribute.DynamicZone>;\n\n        // @ts-expect-error – TODO: fix the fact we can't assign this.\n        acc[current] = value.map((componentValue) => {\n          const subCleanedData = recursiveCleanData(\n            componentValue,\n            componentSchema[componentValue.__component]\n          );\n\n          return subCleanedData;\n        });\n\n        return acc;\n      } else if (attribute.type === 'component') {\n        const { repeatable, component } = attribute;\n\n        if (repeatable) {\n          const value = (datum[current] as Attribute.GetValue<Attribute.DynamicZone>) ?? [];\n\n          // @ts-expect-error – TODO: fix the fact we can't assign this.\n          acc[current] = value.map((compoData) => {\n            const subCleanedData = recursiveCleanData(compoData, componentSchema[component]);\n\n            return subCleanedData;\n          });\n        } else {\n          const value = (datum[current] as Attribute.GetValue<Attribute.Component>) ?? {};\n\n          // @ts-expect-error – TODO: fix the fact we can't assign this.\n          acc[current] = recursiveCleanData(value, componentSchema[component]);\n        }\n\n        return acc;\n      } else if (attribute.type !== 'password' && attribute.type !== 'relation') {\n        acc[current] = datum[current];\n      }\n\n      return acc;\n    }, {} as TDatum);\n  };\n\n  return recursiveCleanData(data, contentTypeSchema);\n};\n\n/* -------------------------------------------------------------------------------------------------\n * getLocalizationsFromData\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ContentData extends Entity {\n  localizations: Localization[];\n  // These are our attributes\n  [key: string]: Attribute.GetValue<Attribute.Any>;\n}\n\ninterface Localization extends Pick<ContentData, 'id'> {\n  locale: string;\n  publishedAt?: string | null;\n}\n\nconst getLocalizationsFromData = (entity: unknown): Localization[] =>\n  typeof entity === 'object' &&\n  entity !== null &&\n  'localizations' in entity &&\n  Array.isArray(entity.localizations)\n    ? entity.localizations\n    : [];\n\nexport { cleanData, getLocalizationsFromData };\nexport type { Localization };\n","import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Flex,\n  SingleSelect,\n  SingleSelectOption,\n  Typography,\n} from '@strapi/design-system';\nimport {\n  Permission,\n  useCMEditViewDataManager,\n  useFetchClient,\n  useNotification,\n} from '@strapi/helper-plugin';\nimport { Duplicate, ExclamationMarkCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { useTypedDispatch } from '../store/hooks';\nimport { Locale } from '../store/reducers';\nimport { Localization, cleanData } from '../utils/data';\nimport { getTranslation } from '../utils/getTranslation';\n\n/* -------------------------------------------------------------------------------------------------\n * CMEditViewCopyLocale\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CMEditViewCopyLocaleProps {\n  appLocales: Locale[];\n  currentLocale: string;\n  localizations: Localization[];\n  readPermissions: Permission[];\n}\n\nconst CMEditViewCopyLocale = ({\n  appLocales = [],\n  currentLocale,\n  localizations = [],\n  readPermissions = [],\n}: CMEditViewCopyLocaleProps) => {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const toggleNotification = useNotification();\n  const { formatMessage } = useIntl();\n  const dispatch = useTypedDispatch();\n  const { allLayoutData, initialData, slug } = useCMEditViewDataManager();\n  const { get } = useFetchClient();\n\n  const options = React.useMemo(\n    () =>\n      appLocales\n        .filter(({ code }) => {\n          return (\n            code !== currentLocale &&\n            localizations.findIndex(({ locale }) => locale === code) !== -1\n          );\n        })\n        .filter(({ code }) => {\n          return readPermissions.some(({ properties }) =>\n            (properties?.locales ?? []).includes(code)\n          );\n        })\n        .map((locale) => {\n          /**\n           * We will only ever have localisations that have been activated by the\n           * user, so we can safely assume that the locale will be in the list.\n           */\n          const localization = localizations.find((loc) => locale.code === loc.locale)!;\n\n          /**\n           * @note we use the value of the localization here because we're accessing the\n           * content's entities not the entry of the locale itself\n           */\n          return {\n            label: locale.name,\n            value: localization.id,\n          };\n        }),\n    [appLocales, currentLocale, localizations, readPermissions]\n  );\n\n  const [value, setValue] = React.useState(options[0]?.value || '');\n\n  if (localizations.length === 0) {\n    return null;\n  }\n\n  /**\n   * TODO: move this to an actual mutation\n   */\n  const handleConfirmCopyLocale = async () => {\n    if (!value) {\n      handleToggle();\n\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const { data: response } = await get(`/content-manager/collection-types/${slug}/${value}`);\n\n      // @ts-expect-error – there will always be allLayoutData.contentType. TODO: fix in V5 helper-plugin.\n      const cleanedData = cleanData(response, allLayoutData, localizations);\n      ['createdBy', 'updatedBy', 'publishedAt', 'id', 'createdAt'].forEach((key) => {\n        if (!initialData[key]) return;\n        cleanedData[key] = initialData[key];\n      });\n\n      dispatch({\n        // @ts-expect-error – we've not added the CRUD reducer the redux store types yet.\n        type: 'ContentManager/CrudReducer/GET_DATA_SUCCEEDED',\n        data: cleanedData,\n        setModifiedDataOnly: true,\n      });\n\n      toggleNotification({\n        type: 'success',\n        message: {\n          id: getTranslation('CMEditViewCopyLocale.copy-success'),\n          defaultMessage: 'Locale copied!',\n        },\n      });\n    } catch (err) {\n      console.error(err);\n\n      toggleNotification({\n        type: 'warning',\n        message: {\n          id: getTranslation('CMEditViewCopyLocale.copy-failure'),\n          defaultMessage: 'Failed to copy locale',\n        },\n      });\n    } finally {\n      setIsLoading(false);\n      handleToggle();\n    }\n  };\n\n  const handleToggle = () => {\n    setIsOpen((prev) => !prev);\n  };\n\n  return (\n    <>\n      <StyledTypography\n        fontSize={2}\n        textColor=\"primary600\"\n        as=\"button\"\n        type=\"button\"\n        onClick={handleToggle}\n      >\n        <Flex>\n          <Duplicate width=\"12px\" height=\"12px\" />\n          {formatMessage({\n            id: getTranslation('CMEditViewCopyLocale.copy-text'),\n            defaultMessage: 'Fill in from another locale',\n          })}\n        </Flex>\n      </StyledTypography>\n      {isOpen && (\n        <Dialog onClose={handleToggle} title=\"Confirmation\" isOpen={isOpen}>\n          <DialogBody icon={<ExclamationMarkCircle />}>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n              <Flex justifyContent=\"center\">\n                <Typography textAlign=\"center\" id=\"confirm-description\">\n                  {formatMessage({\n                    id: getTranslation('CMEditViewCopyLocale.ModalConfirm.content'),\n                    defaultMessage:\n                      'Your current content will be erased and filled by the content of the selected locale:',\n                  })}\n                </Typography>\n              </Flex>\n              <Box>\n                <SingleSelect\n                  label={formatMessage({\n                    id: getTranslation('Settings.locales.modal.locales.label'),\n                    defaultMessage: 'Locales',\n                  })}\n                  onChange={setValue}\n                  value={value}\n                >\n                  {options.map(({ label, value }) => {\n                    return (\n                      <SingleSelectOption key={value} value={value}>\n                        {label}\n                      </SingleSelectOption>\n                    );\n                  })}\n                </SingleSelect>\n              </Box>\n            </Flex>\n          </DialogBody>\n          <DialogFooter\n            startAction={\n              <Button onClick={handleToggle} variant=\"tertiary\">\n                {formatMessage({\n                  id: 'popUpWarning.button.cancel',\n                  defaultMessage: 'No, cancel',\n                })}\n              </Button>\n            }\n            endAction={\n              <Button variant=\"success\" onClick={handleConfirmCopyLocale} loading={isLoading}>\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.submit-text'),\n                  defaultMessage: 'Yes, fill in',\n                })}\n              </Button>\n            }\n          />\n        </Dialog>\n      )}\n    </>\n  );\n};\n\nconst StyledTypography = styled(Typography)`\n  svg {\n    margin-right: ${({ theme }) => theme.spaces[2]};\n    fill: none;\n    > g,\n    path {\n      fill: ${({ theme }) => theme.colors.primary600};\n    }\n  }\n`;\n\nexport { CMEditViewCopyLocale };\n","import { SingleSelect, SingleSelectOption, SingleSelectProps } from '@strapi/design-system';\nimport {\n  Permission,\n  pxToRem,\n  useCMEditViewDataManager,\n  useQueryParams,\n} from '@strapi/helper-plugin';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { I18nBaseQuery } from '../types';\nimport { Localization } from '../utils/data';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { Locale } from '../store/reducers';\nimport type { Entity } from '@strapi/types';\n\nexport interface CMEditViewLocalePickerProps {\n  appLocales: Locale[];\n  createPermissions: Permission[];\n  currentEntityId: Entity.ID;\n  currentLocale: string;\n  localizations: Localization[];\n  readPermissions: Permission[];\n}\n\n/* -------------------------------------------------------------------------------------------------\n * CMEditViewLocalePicker\n * -----------------------------------------------------------------------------------------------*/\n\nconst CMEditViewLocalePicker = ({\n  appLocales = [],\n  createPermissions = [],\n  currentEntityId,\n  currentLocale,\n  localizations = [],\n  readPermissions = [],\n}: CMEditViewLocalePickerProps) => {\n  const { formatMessage } = useIntl();\n  const { hasDraftAndPublish, isSingleType, slug } = useCMEditViewDataManager();\n\n  const [{ query }, setQuery] = useQueryParams<I18nBaseQuery>({\n    plugins: { i18n: { locale: currentLocale } },\n  });\n\n  const { push } = useHistory();\n\n  const handleChange: SingleSelectProps['onChange'] = (v) => {\n    /**\n     * The DS technically handles numbers and strings, this will change to only\n     * accept strings in the future. In the meanwhile we just convert the value.\n     */\n    const value = String(v);\n\n    if (value === currentLocale) {\n      return;\n    }\n\n    const { status, id } = options.find((option) => {\n      return option.value === value;\n    })!;\n\n    const defaultParams = {\n      plugins: {\n        ...query.plugins,\n        i18n: { ...query.plugins?.i18n, locale: value },\n      },\n    };\n\n    /**\n     * TODO: can this be undefined?\n     */\n    if (currentEntityId) {\n      defaultParams.plugins.i18n.relatedEntityId = currentEntityId;\n    }\n\n    if (isSingleType) {\n      setQuery(defaultParams);\n\n      return;\n    }\n\n    /**\n     * TODO: if D&P is not enabled, then the status will always say there's no locale so\n     * we also should check there's no ID incase. This logic will be removed in V5 when\n     * we _always_ have D&P.\n     */\n    if (status === 'did-not-create-locale' && !id) {\n      push({\n        pathname: `/content-manager/collection-types/${slug}/create`,\n        search: stringify(defaultParams, { encode: false }),\n      });\n    } else {\n      push({\n        pathname: `/content-manager/collection-types/${slug}/${id}`,\n        search: stringify(defaultParams, { encode: false }),\n      });\n    }\n  };\n\n  const options = appLocales\n    .map(({ name, code }) => {\n      const matchingLocaleInData = localizations.find(({ locale }) => locale === code);\n\n      let status: BulletProps['status'] = 'did-not-create-locale';\n\n      if (matchingLocaleInData && matchingLocaleInData.publishedAt !== undefined) {\n        status = matchingLocaleInData.publishedAt === null ? 'draft' : 'published';\n      }\n\n      return {\n        id: matchingLocaleInData ? matchingLocaleInData.id : null,\n        label: name,\n        value: code,\n        status,\n      };\n    })\n    .filter(({ status, value }) => {\n      if (status === 'did-not-create-locale') {\n        return createPermissions.find(({ properties }) =>\n          (properties?.locales ?? []).includes(value)\n        );\n      }\n\n      return readPermissions.find(({ properties }) => (properties?.locales ?? []).includes(value));\n    });\n\n  if (!currentLocale) {\n    return null;\n  }\n\n  return (\n    <SingleSelect\n      label={formatMessage({\n        id: getTranslation('Settings.locales.modal.locales.label'),\n        defaultMessage: 'Locales',\n      })}\n      onChange={handleChange}\n      value={currentLocale}\n    >\n      {options.map((option) => {\n        return (\n          <SingleSelectOption\n            key={option.value}\n            value={option.value}\n            startIcon={hasDraftAndPublish ? <Bullet status={option.status} /> : null}\n          >\n            {option.label}\n          </SingleSelectOption>\n        );\n      })}\n    </SingleSelect>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Bullet\n * -----------------------------------------------------------------------------------------------*/\n\nconst statusMap = {\n  'did-not-create-locale': {\n    backgroundColor: 'neutral0',\n    borderColor: 'neutral500',\n  },\n  draft: {\n    backgroundColor: 'secondary700',\n  },\n  published: {\n    backgroundColor: 'success700',\n  },\n};\n\nconst statusToTitleMap = {\n  draft: 'content-manager.components.Select.draft-info-title',\n  published: 'content-manager.components.Select.publish-info-title',\n  'did-not-create-locale': getTranslation('components.Select.locales.not-available'),\n};\n\ntype BulletProps = {\n  status: keyof typeof statusMap;\n};\n\nconst Bullet = ({ status }: BulletProps) => {\n  const { formatMessage } = useIntl();\n\n  return <StyledBullet status={status} title={formatMessage({ id: statusToTitleMap[status] })} />;\n};\n\nconst StyledBullet = styled.div<{ status: keyof typeof statusMap }>`\n  width: ${pxToRem(6)};\n  height: ${pxToRem(6)};\n  border: ${({ theme, status }) => {\n    const statusStyle = statusMap[status];\n    if ('borderColor' in statusStyle) {\n      return `1px solid ${theme.colors[statusStyle.borderColor]}`;\n    }\n\n    return 'none';\n  }};\n  background: ${({ theme, status }) => theme.colors[statusMap[status].backgroundColor]};\n  border-radius: 50%;\n  cursor: pointer;\n`;\n\nexport { CMEditViewLocalePicker };\n","import { Box, Divider, Flex, Typography } from '@strapi/design-system';\nimport { useCMEditViewDataManager, useQueryParams } from '@strapi/helper-plugin';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\n\nimport { useContentTypePermissions } from '../hooks/useContentTypePermissions';\nimport { useTypedSelector } from '../store/hooks';\nimport { getLocalizationsFromData } from '../utils/data';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport { CMEditViewCopyLocale } from './CMEditViewCopyLocale';\nimport { CMEditViewLocalePicker } from './CMEditViewLocalePicker';\n\nimport type { I18nBaseQuery } from '../types';\n\nconst CMEditViewInjectedComponents = () => {\n  const { layout, modifiedData, slug } = useCMEditViewDataManager();\n  const { createPermissions, readPermissions } = useContentTypePermissions(slug!);\n  const locales = useTypedSelector((state) => state.i18n_locales.locales);\n  const params = useParams<{ id: string }>();\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\n  const { formatMessage } = useIntl();\n\n  const currentEntityId = params.id ?? null;\n  const defaultLocale = locales.find((loc) => loc.isDefault); // we always have a default locale;\n  const currentLocale = get(query, 'plugins.i18n.locale', defaultLocale?.code);\n  const hasI18nEnabled = get(layout, ['pluginOptions', 'i18n', 'localized'], false);\n\n  if (!hasI18nEnabled) {\n    return null;\n  }\n\n  if (!currentLocale) {\n    return null;\n  }\n\n  const localizations = [\n    ...getLocalizationsFromData(modifiedData),\n    // current locale\n    { id: currentEntityId, locale: currentLocale, publishedAt: modifiedData.publishedAt },\n  ];\n\n  return (\n    <Box paddingTop={6}>\n      <Typography variant=\"sigma\" textColor=\"neutral600\">\n        {formatMessage({\n          id: getTranslation('plugin.name'),\n          defaultMessage: 'Internationalization',\n        })}\n      </Typography>\n      <Divider unsetMargin={false} marginTop={2} marginBottom={4} />\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n        <CMEditViewLocalePicker\n          appLocales={locales}\n          currentEntityId={currentEntityId!}\n          createPermissions={createPermissions}\n          localizations={localizations}\n          readPermissions={readPermissions}\n          currentLocale={currentLocale}\n        />\n        <CMEditViewCopyLocale\n          appLocales={locales}\n          currentLocale={currentLocale}\n          localizations={localizations}\n          readPermissions={readPermissions}\n        />\n      </Flex>\n    </Box>\n  );\n};\n\nexport { CMEditViewInjectedComponents };\n","const LOCALIZED_FIELDS = [\n  'biginteger',\n  'boolean',\n  'component',\n  'date',\n  'datetime',\n  'decimal',\n  'dynamiczone',\n  'email',\n  'enumeration',\n  'float',\n  'integer',\n  'json',\n  'media',\n  'number',\n  'password',\n  'richtext',\n  'blocks',\n  'string',\n  'text',\n  'time',\n];\n\nconst doesPluginOptionsHaveI18nLocalized = (\n  opts?: object\n): opts is { i18n: { localized: boolean } } =>\n  typeof opts === 'object' &&\n  opts !== null &&\n  'i18n' in opts &&\n  typeof opts.i18n === 'object' &&\n  opts.i18n !== null &&\n  'localized' in opts.i18n &&\n  typeof opts.i18n.localized === 'boolean';\n\nexport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized };\n","import { useTypedSelector } from '../store/hooks';\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\n\nconst useContentTypeHasI18n = (): boolean => {\n  const pluginOptions = useTypedSelector(\n    (state) => state['content-manager_listView'].contentType?.pluginOptions\n  );\n\n  if (doesPluginOptionsHaveI18nLocalized(pluginOptions)) {\n    return pluginOptions.i18n.localized;\n  }\n\n  return false;\n};\n\nexport { useContentTypeHasI18n };\n","import * as React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useContentTypeHasI18n } from '../hooks/useContentTypeHasI18n';\nimport { getTranslation } from '../utils/getTranslation';\n\nconst Emphasis = (chunks: React.ReactNode) => {\n  return (\n    <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n      {chunks}\n    </Typography>\n  );\n};\n\nconst DeleteModalAdditionalInfo = () => {\n  const hasI18nEnabled = useContentTypeHasI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18nEnabled) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\n          defaultMessage:\n            'This will delete the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nconst PublishModalAdditionalInfo = () => {\n  const hasI18nEnabled = useContentTypeHasI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18nEnabled) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\n          defaultMessage:\n            'This will publish the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nconst UnpublishModalAdditionalInfo = () => {\n  const hasI18nEnabled = useContentTypeHasI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18nEnabled) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\n          defaultMessage:\n            'This will unpublish the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nexport { DeleteModalAdditionalInfo, PublishModalAdditionalInfo, UnpublishModalAdditionalInfo };\n","import { pluginId } from '../pluginId';\n\nexport const RESOLVE_LOCALES = `${pluginId}/locales/resolve-locales`;\nexport const ADD_LOCALE = `${pluginId}/locales/add`;\nexport const DELETE_LOCALE = `${pluginId}/locales/delete`;\nexport const UPDATE_LOCALE = `${pluginId}/locales/update`;\n","import { useEffect } from 'react';\n\nimport { useFetchClient, useNotification } from '@strapi/helper-plugin';\n\nimport { GetLocales } from '../../../shared/contracts/locales';\nimport { RESOLVE_LOCALES } from '../store/constants';\nimport { useTypedDispatch, useTypedSelector } from '../store/hooks';\n\nconst useLocales = () => {\n  const dispatch = useTypedDispatch();\n  const toggleNotification = useNotification();\n  const { isLoading, locales } = useTypedSelector((state) => state.i18n_locales);\n\n  const { get } = useFetchClient();\n\n  useEffect(() => {\n    get<GetLocales.Response>('/i18n/locales')\n      .then(({ data }) => {\n        if (Array.isArray(data)) {\n          dispatch({ type: RESOLVE_LOCALES, locales: data });\n        }\n      })\n      .catch((err) => {\n        /**\n         * TODO: this should be refactored.\n         *\n         * In fact it should be refactored to use react-query?\n         */\n        if ('code' in err && err?.code === 'ERR_CANCELED') {\n          return;\n        }\n\n        toggleNotification({\n          type: 'warning',\n          message: { id: 'notification.error' },\n        });\n      });\n  }, [dispatch, get, toggleNotification]);\n\n  return { locales, isLoading };\n};\n\nexport { useLocales };\n","import * as React from 'react';\n\nimport { useLocales } from '../hooks/useLocales';\nimport { pluginId } from '../pluginId';\n\ntype InitializerProps = {\n  setPlugin: (plugin: string) => void;\n};\n\nconst Initializer = ({ setPlugin }: InitializerProps) => {\n  const { isLoading, locales } = useLocales();\n  const ref = React.useRef<InitializerProps['setPlugin']>();\n\n  ref.current = setPlugin;\n\n  React.useEffect(() => {\n    if (!isLoading && locales.length > 0) {\n      ref.current!(pluginId);\n    }\n  }, [isLoading, locales]);\n\n  return null;\n};\n\nexport { Initializer };\n","import { Locale, RootState } from '../store/reducers';\n\ninterface PotentialQueryWithLocale {\n  plugins?: { i18n?: { locale?: string; [key: string]: unknown }; [key: string]: unknown };\n}\n\n/**\n * Returns the locale from the passed query.\n * If a default value is passed, it will return it if the locale does not exist.\n */\nfunction getLocaleFromQuery(query: PotentialQueryWithLocale): string | undefined;\nfunction getLocaleFromQuery(query: PotentialQueryWithLocale, defaultValue: string): string;\nfunction getLocaleFromQuery(\n  query: PotentialQueryWithLocale,\n  defaultValue?: string\n): string | undefined {\n  const locale = query?.plugins?.i18n?.locale;\n\n  if (!locale && defaultValue) {\n    return defaultValue;\n  }\n\n  return locale;\n}\n\n/**\n * Returns the initial locale from the query falling back to the default locale\n * listed in the collection of locales provided.\n */\nconst getInitialLocale = (\n  query: PotentialQueryWithLocale,\n  locales: Locale[] = []\n): Locale | undefined => {\n  const localeFromQuery = getLocaleFromQuery(query);\n\n  if (localeFromQuery) {\n    return locales.find((locale) => locale.code === localeFromQuery);\n  }\n\n  // Returns the default locale when nothing is in the query\n  return locales.find((locale) => locale.isDefault);\n};\n\nconst getDefaultLocale = (\n  ctPermissions: RootState['rbacProvider']['collectionTypesRelatedPermissions'][string],\n  locales: Locale[] = []\n) => {\n  const defaultLocale = locales.find((locale) => locale.isDefault);\n\n  if (!defaultLocale) {\n    return null;\n  }\n\n  const readPermissions = ctPermissions['plugin::content-manager.explorer.read'] ?? [];\n  const createPermissions = ctPermissions['plugin::content-manager.explorer.create'] ?? [];\n\n  if (\n    readPermissions.some(({ properties }) =>\n      (properties?.locales ?? []).includes(defaultLocale.code)\n    ) ||\n    createPermissions.some(({ properties }) =>\n      (properties?.locales ?? []).includes(defaultLocale.code)\n    )\n  ) {\n    return defaultLocale.code;\n  }\n\n  // When the default locale is not authorized, we return the first authorized locale\n  return (\n    (readPermissions[0]?.properties?.locales?.[0] ||\n      createPermissions[0]?.properties?.locales?.[0]) ??\n    null\n  );\n};\n\nexport { getLocaleFromQuery, getInitialLocale, getDefaultLocale };\n","import { useState } from 'react';\n\nimport { SingleSelect, SingleSelectOption, SingleSelectProps } from '@strapi/design-system';\nimport { useQueryParams } from '@strapi/helper-plugin';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport { useContentTypeHasI18n } from '../hooks/useContentTypeHasI18n';\nimport { useContentTypePermissions } from '../hooks/useContentTypePermissions';\nimport { useTypedSelector } from '../store/hooks';\nimport { getTranslation } from '../utils/getTranslation';\nimport { getInitialLocale } from '../utils/locales';\n\nimport type { I18nBaseQuery } from '../types';\n\nconst LocalePicker = () => {\n  const { formatMessage } = useIntl();\n  const dispatch = useDispatch();\n  const locales = useTypedSelector((state) => state.i18n_locales.locales);\n  interface Query extends I18nBaseQuery {\n    page?: number;\n  }\n\n  const [{ query }, setQuery] = useQueryParams<Query>();\n  const match = useRouteMatch<{ slug: string }>('/content-manager/:collectiontype/:slug');\n  const isContentTypeLocalized = useContentTypeHasI18n();\n  const { createPermissions, readPermissions } = useContentTypePermissions(match?.params.slug);\n\n  const initialLocale = getInitialLocale(query, locales);\n  const [selected, setSelected] = useState(initialLocale?.code || '');\n\n  if (!isContentTypeLocalized) {\n    return null;\n  }\n\n  if (!locales || locales.length === 0) {\n    return null;\n  }\n\n  const displayedLocales = locales.filter((locale) => {\n    const canCreate = createPermissions.some(({ properties }) =>\n      (properties?.locales ?? []).includes(locale.code)\n    );\n    const canRead = readPermissions.some(({ properties }) =>\n      (properties?.locales ?? []).includes(locale.code)\n    );\n\n    return canCreate || canRead;\n  });\n\n  // @ts-expect-error – This can be removed in V2 of the DS.\n  const handleChange: SingleSelectProps['onChange'] = (code: string) => {\n    if (code === selected) {\n      return;\n    }\n\n    setSelected(code);\n\n    dispatch({ type: 'ContentManager/RBACManager/RESET_PERMISSIONS' });\n\n    setQuery({\n      page: 1,\n      plugins: { ...query.plugins, i18n: { locale: code } },\n    });\n  };\n\n  return (\n    <SingleSelect\n      size=\"S\"\n      aria-label={formatMessage({\n        id: getTranslation('actions.select-locale'),\n        defaultMessage: 'Select locale',\n      })}\n      value={selected}\n      onChange={handleChange}\n    >\n      {displayedLocales.map((locale) => (\n        <SingleSelectOption key={locale.id} value={locale.code}>\n          {locale.name}\n        </SingleSelectOption>\n      ))}\n    </SingleSelect>\n  );\n};\n\nexport { LocalePicker };\n","export const PERMISSIONS = {\n  accessMain: [{ action: 'plugin::i18n.locale.read', subject: null }],\n  create: [{ action: 'plugin::i18n.locale.create', subject: null }],\n  delete: [{ action: 'plugin::i18n.locale.delete', subject: null }],\n  update: [{ action: 'plugin::i18n.locale.update', subject: null }],\n  read: [{ action: 'plugin::i18n.locale.read', subject: null }],\n};\n","import { parse, stringify } from 'qs';\n\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\nimport { getDefaultLocale } from '../utils/locales';\n\nimport type { Locale, RootState } from '../store/reducers';\nimport type { Permission, StrapiAppSettingLink } from '@strapi/helper-plugin';\nimport type { Store } from '@strapi/strapi/admin';\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * addLocaleToLinksHook\n * -----------------------------------------------------------------------------------------------*/\nexport interface AddLocaleToCTLinksArgs {\n  // TODO: this should come from the CM.\n  ctLinks: Array<StrapiAppSettingLink & { search?: string }>;\n  models: Schema.ContentType[];\n}\n\nexport interface AddLocaleToSTLinksArgs {\n  // TODO: this should come from the CM.\n  stLinks: Array<StrapiAppSettingLink & { search?: string }>;\n  models: Schema.ContentType[];\n}\n\nexport type AddLocalToLinksHookArgs<TType extends 'collection-types' | 'single-types'> =\n  TType extends 'collection-types' ? AddLocaleToCTLinksArgs : AddLocaleToSTLinksArgs;\n\nconst addLocaleToLinksHook =\n  <TType extends 'collection-types' | 'single-types'>(type: TType) =>\n  (\n    args: AddLocalToLinksHookArgs<TType>,\n    store: Store\n  ): AddLocaleToCTLinksArgs | AddLocaleToSTLinksArgs => {\n    const links =\n      type === 'collection-types'\n        ? (args as AddLocaleToCTLinksArgs).ctLinks\n        : (args as AddLocaleToSTLinksArgs).stLinks;\n\n    if (links.length === 0) {\n      return args;\n    }\n\n    // We inject a reducer, so the store at this point _will_ have the i18n state.\n    const storeState = store.getState() as RootState;\n    const { locales } = storeState.i18n_locales;\n    const { collectionTypesRelatedPermissions } = storeState.rbacProvider;\n\n    const mutatedLinks = addLocaleToLinksSearch(\n      links,\n      type,\n      args.models,\n      locales,\n      collectionTypesRelatedPermissions\n    );\n\n    return type === 'collection-types'\n      ? { ctLinks: mutatedLinks, models: args.models }\n      : { stLinks: mutatedLinks, models: args.models };\n  };\n\n/* -------------------------------------------------------------------------------------------------\n * addLocaleToLinksHook\n * -----------------------------------------------------------------------------------------------*/\nconst addLocaleToLinksSearch = (\n  links: Array<StrapiAppSettingLink & { search?: string }>,\n  kind: 'collection-types' | 'single-types',\n  contentTypeSchemas: Schema.ContentType[],\n  locales: Locale[],\n  permissions: Record<string, Record<string, Permission[]>>\n): Array<StrapiAppSettingLink & { search?: string }> => {\n  return links.map((link) => {\n    const contentTypeUID = link.to.split(`/${kind}/`)[1];\n\n    const contentTypeSchema = contentTypeSchemas.find(({ uid }) => uid === contentTypeUID);\n\n    const hasI18nEnabled = doesPluginOptionsHaveI18nLocalized(contentTypeSchema?.pluginOptions)\n      ? contentTypeSchema?.pluginOptions.i18n.localized\n      : false;\n\n    if (!hasI18nEnabled) {\n      return link;\n    }\n\n    const contentTypePermissions = permissions[contentTypeUID];\n    const requiredPermissionsToViewALink =\n      kind === 'collection-types'\n        ? ['plugin::content-manager.explorer.read', 'plugin::content-manager.explorer.create']\n        : ['plugin::content-manager.explorer.read'];\n\n    const contentTypeNeededPermissions = Object.keys(contentTypePermissions).reduce<\n      Record<string, Permission[]>\n    >((acc, current) => {\n      if (requiredPermissionsToViewALink.includes(current)) {\n        acc[current] = contentTypePermissions[current];\n\n        return acc;\n      }\n\n      acc[current] = [];\n\n      return acc;\n    }, {});\n\n    const defaultLocale = getDefaultLocale(contentTypeNeededPermissions, locales);\n\n    if (!defaultLocale) {\n      return { ...link, isDisplayed: false };\n    }\n\n    const linkParams = link.search ? parse(link.search) : {};\n\n    const params = linkParams\n      ? {\n          ...linkParams,\n          plugins: {\n            // TODO: can this be made \"prettier\"?\n            ...(typeof linkParams.plugins === 'object' && linkParams.plugins !== null\n              ? linkParams.plugins\n              : {}),\n            i18n: { locale: defaultLocale },\n          },\n        }\n      : { plugins: { i18n: { locale: defaultLocale } } };\n\n    const search = stringify(params, { encode: false });\n\n    return { ...link, search };\n  });\n};\n\nexport { addLocaleToLinksHook };\n","/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { Flex, Tooltip, VisuallyHidden } from '@strapi/design-system';\nimport { Earth, EarthStriked } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type {\n  CMAdminConfiguration,\n  I18nBaseQuery,\n  NonRelationLayout,\n  RelationLayout,\n} from '../types';\n\n/* -------------------------------------------------------------------------------------------------\n * mutateEditViewLayoutHook\n * -----------------------------------------------------------------------------------------------*/\n\ninterface MutateEditViewLayoutHookArgs {\n  layout: {\n    components: Record<string, CMAdminConfiguration>;\n    contentType: CMAdminConfiguration;\n  };\n  query?: I18nBaseQuery;\n}\n\nconst mutateEditViewLayoutHook = ({ layout, query }: MutateEditViewLayoutHookArgs) => {\n  const { contentType, components } = layout;\n  const hasI18nEnabled = doesPluginOptionsHaveI18nLocalized(contentType.pluginOptions)\n    ? contentType.pluginOptions.i18n.localized\n    : false;\n\n  if (!hasI18nEnabled) {\n    return { layout, query };\n  }\n\n  const currentLocale = query?.plugins?.i18n?.locale ?? null;\n\n  // This might break the cm, has the user might be redirected to the homepage\n  if (!currentLocale) {\n    return { layout, query };\n  }\n\n  return {\n    query,\n    layout: {\n      ...layout,\n      contentType: {\n        ...layout.contentType,\n        layouts: {\n          ...contentType.layouts,\n          edit: enhanceEditLayout(contentType.layouts.edit, currentLocale),\n        },\n      },\n      components: enhanceComponentsLayout(components, currentLocale),\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * enhanceEditLayout\n * -----------------------------------------------------------------------------------------------*/\n\nconst enhanceEditLayout = (\n  layout: CMAdminConfiguration['layouts']['edit'],\n  currentLocale: string\n) =>\n  layout.map((row) =>\n    row.map((field) => {\n      const type = field?.fieldSchema?.type ?? null;\n      // uid and relation fields are always localized\n      const hasI18nEnabled = isFieldLocalized(field) ?? ['uid', 'relation'].includes(type);\n\n      const labelActionProps = {\n        title: {\n          id: hasI18nEnabled\n            ? getTranslation('Field.localized')\n            : getTranslation('Field.not-localized'),\n          defaultMessage: hasI18nEnabled\n            ? 'This value is unique for the selected locale'\n            : 'This value is common to all locales',\n        },\n        icon: hasI18nEnabled ? <Earth /> : <EarthStriked />,\n      };\n\n      const labelAction = <LabelAction {...labelActionProps} />;\n\n      if (isFieldRelation(field) && isFieldLocalized(field)) {\n        return {\n          ...field,\n          labelAction,\n          queryInfos: {\n            ...field.queryInfos,\n            defaultParams: { ...field.queryInfos.defaultParams, locale: currentLocale },\n            paramsToKeep: ['plugins.i18n.locale'],\n          },\n        };\n      }\n\n      return { ...field, labelAction };\n    }, [])\n  );\n\nconst isFieldRelation = (field: RelationLayout | NonRelationLayout): field is RelationLayout =>\n  field.fieldSchema.type === 'relation';\n\nconst isFieldLocalized = (field: RelationLayout | NonRelationLayout): boolean => {\n  if (isFieldRelation(field)) {\n    return doesPluginOptionsHaveI18nLocalized(field.targetModelPluginOptions)\n      ? field.targetModelPluginOptions.i18n.localized\n      : false;\n  } else {\n    return doesPluginOptionsHaveI18nLocalized(field.fieldSchema.pluginOptions)\n      ? field.fieldSchema.pluginOptions.i18n.localized\n      : false;\n  }\n};\n\n/* -------------------------------------------------------------------------------------------------\n * enhanceComponentsLayout\n * -----------------------------------------------------------------------------------------------*/\n\nconst enhanceComponentsLayout = (\n  components: Record<string, CMAdminConfiguration>,\n  locale: string\n) => {\n  return Object.keys(components).reduce<Record<string, CMAdminConfiguration>>((acc, current) => {\n    const currentComponentLayout = components[current];\n\n    const enhancedEditLayout = enhanceComponentLayoutForRelations(\n      currentComponentLayout.layouts.edit,\n      locale\n    );\n\n    acc[current] = {\n      ...currentComponentLayout,\n      layouts: { ...currentComponentLayout.layouts, edit: enhancedEditLayout },\n    };\n\n    return acc;\n  }, {});\n};\n\nconst enhanceComponentLayoutForRelations = (\n  layout: CMAdminConfiguration['layouts']['edit'],\n  locale: string\n) =>\n  layout.map((row) =>\n    row.map((field) => {\n      if (isFieldRelation(field) && isFieldLocalized(field)) {\n        return {\n          ...field,\n          queryInfos: {\n            ...field.queryInfos,\n            defaultParams: { ...field.queryInfos.defaultParams, locale },\n            paramsToKeep: ['plugins.i18n.locale'],\n          },\n        };\n      }\n      return field;\n    })\n  );\n\n/* -------------------------------------------------------------------------------------------------\n * LabelAction\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LabelActionProps {\n  title: MessageDescriptor;\n  icon: React.ReactNode;\n}\n\nconst LabelAction = ({ title, icon }: LabelActionProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Tooltip description={formatMessage(title)}>\n      <Span as=\"span\">\n        <VisuallyHidden as=\"span\">{`(${formatMessage(title)})`}</VisuallyHidden>\n        {React.cloneElement(icon as React.ReactElement, {\n          'aria-hidden': true,\n          focusable: false, // See: https://allyjs.io/tutorials/focusing-in-svg.html#making-svg-elements-focusable\n        })}\n      </Span>\n    </Tooltip>\n  );\n};\n\nconst Span = styled(Flex)`\n  svg {\n    width: 12px;\n    height: 12px;\n\n    fill: ${({ theme }) => theme.colors.neutral500};\n\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\nexport { mutateEditViewLayoutHook };\n","import * as React from 'react';\n\nimport { Box, Flex, Popover, Tooltip, Typography } from '@strapi/design-system';\nimport { SortIcon } from '@strapi/helper-plugin';\nimport { Entity } from '@strapi/types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { useTypedSelector } from '../store/hooks';\nimport { getTranslation } from '../utils/getTranslation';\n\ninterface LocaleListCellProps {\n  id?: Entity.ID;\n  localizations?: Array<{ locale: string }>;\n  locale?: string;\n}\n\nconst LocaleListCell = ({\n  localizations = [],\n  locale: currentLocaleCode,\n  id,\n}: LocaleListCellProps) => {\n  const [visible, setVisible] = React.useState(false);\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n  const { formatMessage } = useIntl();\n\n  const locales = useTypedSelector((state) => state.i18n_locales.locales);\n  const defaultLocale = locales.find((locale) => locale.isDefault);\n  const allLocalizations = [{ locale: currentLocaleCode }, ...localizations];\n  const localizationNames = allLocalizations.map((locale) => locale.locale);\n  const hasDefaultLocale = defaultLocale ? localizationNames.includes(defaultLocale.code) : false;\n\n  const ctLocales = hasDefaultLocale\n    ? localizationNames.filter((locale) => locale !== defaultLocale?.code)\n    : localizationNames;\n\n  const ctLocalesAsNames = ctLocales.map(\n    (locale) => locales.find(({ code }) => code === locale)?.name ?? locale\n  );\n\n  ctLocalesAsNames.sort();\n\n  const ctLocalesNamesWithDefault = hasDefaultLocale\n    ? [`${defaultLocale?.name} (default)`, ...ctLocalesAsNames]\n    : ctLocalesAsNames;\n\n  const localesArray = ctLocalesNamesWithDefault;\n\n  const handleTogglePopover = () => setVisible((prev) => !prev);\n\n  const elId = `entry-${id}__locale`;\n  const localesNames = localesArray.join(', ');\n\n  return (\n    <Flex onClick={(e) => e.stopPropagation()}>\n      <Tooltip\n        label={formatMessage({\n          id: getTranslation('CMListView.popover.display-locales.label'),\n          defaultMessage: 'Display translated locales',\n        })}\n      >\n        <Button type=\"button\" onClick={handleTogglePopover} ref={buttonRef}>\n          <ActionWrapper alignItems=\"center\" justifyContent=\"center\" height=\"2rem\" width=\"2rem\">\n            <Typography\n              style={{ maxWidth: '252px', cursor: 'pointer' }}\n              data-for={elId}\n              data-tip={localesNames}\n              textColor=\"neutral800\"\n              ellipsis\n            >\n              {localesNames}\n            </Typography>\n            <Flex>\n              <SortIcon />\n\n              {visible && (\n                <Popover\n                  onDismiss={handleTogglePopover}\n                  source={buttonRef as React.MutableRefObject<HTMLElement>}\n                  spacing={16}\n                  centered\n                >\n                  <ul>\n                    {localesArray.map((name) => (\n                      <Box key={name} padding={3} as=\"li\">\n                        <Typography>{name}</Typography>\n                      </Box>\n                    ))}\n                  </ul>\n                </Popover>\n              )}\n            </Flex>\n          </ActionWrapper>\n        </Button>\n      </Tooltip>\n    </Flex>\n  );\n};\n\nconst Button = styled.button`\n  svg {\n    > g,\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n  &:hover {\n    svg {\n      > g,\n      path {\n        fill: ${({ theme }) => theme.colors.neutral600};\n      }\n    }\n  }\n  &:active {\n    svg {\n      > g,\n      path {\n        fill: ${({ theme }) => theme.colors.neutral400};\n      }\n    }\n  }\n`;\n\nconst ActionWrapper = styled(Flex)`\n  svg {\n    height: ${4 / 16}rem;\n  }\n`;\n\nexport { LocaleListCell };\nexport type { LocaleListCellProps };\n","/* eslint-disable check-file/filename-naming-convention */\nimport { LocaleListCell } from '../components/LocaleListCell';\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\n\nimport type { CMAdminConfiguration } from '../types';\n\n/* -------------------------------------------------------------------------------------------------\n * addColumnToTableHook\n * -----------------------------------------------------------------------------------------------*/\n\ninterface AddColumnToTableHookArgs {\n  layout: {\n    components: Record<string, CMAdminConfiguration>;\n    contentType: CMAdminConfiguration;\n  };\n  /**\n   * TODO: this should come from the admin package.\n   */\n  displayedHeaders: unknown[];\n}\n\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\n  const { contentType } = layout;\n\n  const isFieldLocalized = doesPluginOptionsHaveI18nLocalized(contentType.pluginOptions)\n    ? contentType.pluginOptions.i18n.localized\n    : false;\n\n  if (!isFieldLocalized) {\n    return { displayedHeaders, layout };\n  }\n\n  return {\n    displayedHeaders: [\n      ...displayedHeaders,\n      {\n        key: '__locale_key__',\n        fieldSchema: { type: 'string' },\n        metadatas: { label: 'Content available in', searchable: false, sortable: false },\n        name: 'locales',\n        cellFormatter: (props: object) => <LocaleListCell {...props} />,\n      },\n    ],\n    layout,\n  };\n};\n\nexport { addColumnToTableHook };\n","import { Middleware } from '@reduxjs/toolkit';\nimport {\n  contentManagementUtilRemoveFieldsFromData,\n  formatContentTypeData,\n  getFetchClient,\n} from '@strapi/helper-plugin';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport merge from 'lodash/merge';\nimport { ParsedQs, parse } from 'qs';\n\nimport { pluginId } from '../pluginId';\nimport { RootState } from '../store/reducers';\n\nimport type { GetNonLocalizedFields } from '../../../shared/contracts/content-manager';\nimport type { Schema } from '@strapi/types';\nimport type { AxiosResponse } from 'axios';\n\nconst addCommonFieldsToInitialDataMiddleware: () => Middleware<object, RootState> =\n  () =>\n  ({ getState, dispatch }) =>\n  (next) =>\n  (action) => {\n    if (action.type !== 'ContentManager/CrudReducer/INIT_FORM') {\n      return next(action);\n    }\n\n    if (!action.rawQuery) {\n      return next(action);\n    }\n\n    const search = action.rawQuery.substring(1);\n    const query = parse(search);\n    const relatedEntityId = get(query, 'plugins.i18n.relatedEntityId', undefined);\n    const locale = get(query, 'plugins.i18n.locale', undefined);\n    const isSingleType = action.isSingleType;\n\n    if (!relatedEntityId && !isSingleType) {\n      return next(action);\n    }\n\n    const store = getState();\n    const cmDataStore = store['content-manager_editViewCrudReducer'];\n    const cmLayoutStore = store['content-manager_editViewLayoutManager'];\n    const { contentTypeDataStructure } = cmDataStore;\n    const { currentLayout } = cmLayoutStore as {\n      currentLayout: {\n        contentType: Schema.ContentType;\n        components: Record<string, Schema.Component>;\n      };\n    };\n\n    const getData = async () => {\n      if (\n        !isParsedParamUndefinedOrString(relatedEntityId) ||\n        !isParsedParamUndefinedOrString(locale)\n      ) {\n        return;\n      }\n\n      // Show a loader\n      dispatch({ type: 'ContentManager/CrudReducer/GET_DATA' });\n      const defaultDataStructure = cloneDeep(contentTypeDataStructure);\n\n      try {\n        const { data } = await getFetchClient().post<\n          GetNonLocalizedFields.Response,\n          AxiosResponse<GetNonLocalizedFields.Response>,\n          GetNonLocalizedFields.Request['body']\n        >(`/${pluginId}/content-manager/actions/get-non-localized-fields`, {\n          model: currentLayout.contentType.uid,\n          id: relatedEntityId,\n          locale,\n        });\n\n        const { nonLocalizedFields, localizations } = data;\n\n        const merged = merge(defaultDataStructure, nonLocalizedFields);\n\n        const fieldsToRemove = [\n          'createdBy',\n          'updatedBy',\n          'publishedAt',\n          'id',\n          '_id',\n          'updatedAt',\n          'createdAt',\n        ];\n        const cleanedMerged = contentManagementUtilRemoveFieldsFromData(\n          merged,\n          currentLayout.contentType,\n          currentLayout.components,\n          fieldsToRemove\n        );\n        cleanedMerged.localizations = localizations;\n\n        action.data = formatContentTypeData(\n          cleanedMerged,\n          currentLayout.contentType,\n          currentLayout.components\n        );\n      } catch (err) {\n        // Silent\n      }\n\n      return next(action);\n    };\n\n    return getData();\n  };\n\nconst isParsedParamUndefinedOrString = (param: ParsedQs[string]): param is undefined | string =>\n  typeof param === 'string' || param === undefined;\n\nexport { addCommonFieldsToInitialDataMiddleware };\n","import { Middleware } from '@reduxjs/toolkit';\nimport get from 'lodash/get';\n\nimport { RootState } from '../store/reducers';\n\nconst extendCTBAttributeInitialDataMiddleware: () => Middleware<object, RootState> = () => {\n  return ({ getState }) =>\n    (next) =>\n    (action) => {\n      const enhanceAction = () => {\n        // the block here is to catch the error when trying to access the state\n        // of the ctb when the plugin is not mounted\n        try {\n          const store = getState();\n\n          const hasi18nEnabled = get(\n            store,\n            [\n              'content-type-builder_dataManagerProvider',\n              'modifiedData',\n              'contentType',\n              'schema',\n              'pluginOptions',\n              'i18n',\n              'localized',\n            ],\n            false\n          );\n\n          if (hasi18nEnabled) {\n            const pluginOptions = action.options\n              ? { ...action.options.pluginOptions, i18n: { localized: true } }\n              : { i18n: { localized: true } };\n\n            return next({\n              ...action,\n              options: {\n                pluginOptions,\n              },\n            });\n          }\n\n          return next(action);\n        } catch (err) {\n          return next(action);\n        }\n      };\n\n      if (\n        action.type === 'ContentTypeBuilder/FormModal/SET_ATTRIBUTE_DATA_SCHEMA' &&\n        action.forTarget === 'contentType' &&\n        !['relation', 'component'].includes(action.attributeType) &&\n        !action.isEditing\n      ) {\n        return enhanceAction();\n      }\n\n      if (\n        action.type === 'ContentTypeBuilder/FormModal/SET_CUSTOM_FIELD_DATA_SCHEMA' &&\n        action.forTarget === 'contentType' &&\n        !action.isEditing\n      ) {\n        return enhanceAction();\n      }\n\n      if (\n        (action.type ===\n          'ContentTypeBuilder/FormModal/RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO' ||\n          action.type === 'ContentTypeBuilder/FormModal/RESET_PROPS_AND_SAVE_CURRENT_DATA') &&\n        action.forTarget === 'contentType'\n      ) {\n        return enhanceAction();\n      }\n\n      return next(action);\n    };\n};\n\nexport { extendCTBAttributeInitialDataMiddleware };\n","import { Middleware } from '@reduxjs/toolkit';\n\nimport { RootState } from '../store/reducers';\n\nconst extendCTBInitialDataMiddleware: () => Middleware<object, RootState> = () => {\n  return () => (next) => (action) => {\n    if (\n      action.type === 'ContentTypeBuilder/FormModal/SET_DATA_TO_EDIT' &&\n      action.modalType === 'contentType'\n    ) {\n      const i18n = { localized: false };\n\n      const pluginOptions = action.data.pluginOptions\n        ? { ...action.data.pluginOptions, i18n }\n        : { i18n };\n\n      const data = { ...action.data, pluginOptions };\n\n      if (action.actionType === 'create') {\n        return next({ ...action, data });\n      }\n\n      // Override the action if the pluginOption config does not contain i18n\n      // In this case we need to set the proper initialData shape\n      if (!action.data.pluginOptions?.i18n?.localized) {\n        return next({ ...action, data });\n      }\n    }\n\n    // action is not the one we want to override\n    return next(action);\n  };\n};\n\nexport { extendCTBInitialDataMiddleware };\n","import { Middleware } from '@reduxjs/toolkit';\nimport { Permission } from '@strapi/helper-plugin';\n\nimport { RootState } from '../store/reducers';\n\n/**\n * TODO: is it possible to get the action types? How do we do it\n * when actions are spread across multiple packages e.g. content-manager\n * or content-type-builder?\n */\nconst localePermissionMiddleware: () => Middleware<object, RootState> =\n  () => () => (next) => (action) => {\n    if (action.type !== 'ContentManager/RBACManager/SET_PERMISSIONS') {\n      return next(action);\n    }\n\n    const containerName = action.__meta__?.containerName ?? null;\n\n    if (!['editView', 'listView'].includes(containerName)) {\n      return next(action);\n    }\n\n    const locale = action.__meta__?.plugins?.i18n?.locale;\n\n    if (!locale) {\n      return next(action);\n    }\n\n    const permissions = action.permissions as Record<string, Permission[]>;\n\n    const nextPermissions = Object.keys(permissions).reduce<Record<string, Permission[]>>(\n      (acc, key) => {\n        const filteredPermissions = permissions[key].filter(\n          (permission: Permission) => (permission.properties?.locales ?? []).indexOf(locale) !== -1\n        );\n\n        if (filteredPermissions.length) {\n          acc[key] = filteredPermissions;\n        }\n\n        return acc;\n      },\n      {}\n    );\n\n    return next({ ...action, permissions: nextPermissions });\n  };\n\nexport { localePermissionMiddleware };\n","import produce from 'immer';\nimport set from 'lodash/set';\n\nimport { pluginId } from '../pluginId';\n\nimport { ADD_LOCALE, DELETE_LOCALE, RESOLVE_LOCALES, UPDATE_LOCALE } from './constants';\n\nimport type { Locale } from '../../../shared/contracts/locales';\nimport type { Store } from '@strapi/strapi/admin';\n\nexport interface LocalesState {\n  isLoading: boolean;\n  locales: Locale[];\n}\n\nexport const initialState = {\n  isLoading: true,\n  locales: [],\n};\n\ninterface ResolveLocalesAction extends Pick<LocalesState, 'locales'> {\n  type: typeof RESOLVE_LOCALES;\n}\n\ninterface AddLocaleAction {\n  type: typeof ADD_LOCALE;\n  newLocale: LocalesState['locales'][number];\n}\n\ninterface DeleteLocaleAction {\n  type: typeof DELETE_LOCALE;\n  id: LocalesState['locales'][number]['id'];\n}\n\ninterface UpdateLocaleAction {\n  type: typeof UPDATE_LOCALE;\n  editedLocale: LocalesState['locales'][number];\n}\n\ntype Action = ResolveLocalesAction | AddLocaleAction | DeleteLocaleAction | UpdateLocaleAction;\n\nconst localeReducer = produce((draftState: LocalesState = initialState, action: Action) => {\n  switch (action.type) {\n    case RESOLVE_LOCALES: {\n      draftState.isLoading = false;\n      draftState.locales = action.locales;\n      break;\n    }\n\n    case ADD_LOCALE: {\n      if (action.newLocale.isDefault) {\n        draftState.locales.forEach((locale) => {\n          locale.isDefault = false;\n        });\n      }\n\n      draftState.locales.push(action.newLocale);\n      break;\n    }\n\n    case DELETE_LOCALE: {\n      const locales = draftState.locales.filter((locale) => locale.id !== action.id);\n\n      set(draftState, 'locales', locales);\n      break;\n    }\n\n    case UPDATE_LOCALE: {\n      if (action.editedLocale.isDefault) {\n        draftState.locales.forEach((locale) => {\n          locale.isDefault = false;\n        });\n      }\n\n      const indexToEdit = draftState.locales.findIndex(\n        (locale) => locale.id === action.editedLocale.id\n      );\n\n      set(draftState.locales, indexToEdit, action.editedLocale);\n      break;\n    }\n\n    default:\n      return draftState;\n  }\n\n  return draftState;\n});\n\nconst reducers = {\n  [`${pluginId}_locales`]: localeReducer,\n};\n\ntype RootState = ReturnType<Store['getState']> & {\n  i18n_locales: LocalesState;\n};\n\nexport { reducers };\nexport type { RootState, Locale, Action };\n","import omit from 'lodash/omit';\n\nimport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized } from './fields';\n\nimport type { Schema } from '@strapi/strapi';\n\n/* -------------------------------------------------------------------------------------------------\n * mutateCTBContentTypeSchema\n * -----------------------------------------------------------------------------------------------*/\n\nconst mutateCTBContentTypeSchema = (\n  nextSchema: Schema.ContentType,\n  prevSchema?: {\n    apiID?: string;\n    schema?: Schema.ContentType;\n    uid?: string;\n  }\n) => {\n  // Don't perform mutations components\n  if (!doesPluginOptionsHaveI18nLocalized(nextSchema.pluginOptions)) {\n    return nextSchema;\n  }\n\n  const isNextSchemaLocalized = nextSchema.pluginOptions.i18n.localized;\n  const isPrevSchemaLocalized = doesPluginOptionsHaveI18nLocalized(\n    prevSchema?.schema?.pluginOptions\n  )\n    ? prevSchema?.schema?.pluginOptions.i18n.localized\n    : false;\n\n  // No need to perform modification on the schema, if the i18n feature was not changed\n  // at the ct level\n  if (isNextSchemaLocalized && isPrevSchemaLocalized) {\n    return nextSchema;\n  }\n\n  if (isNextSchemaLocalized) {\n    const attributes = addLocalisationToFields(nextSchema.attributes);\n\n    return { ...nextSchema, attributes };\n  }\n\n  // Remove the i18n object from the pluginOptions\n  if (!isNextSchemaLocalized) {\n    const pluginOptions = omit(nextSchema.pluginOptions, 'i18n');\n    const attributes = disableAttributesLocalisation(nextSchema.attributes);\n\n    return { ...nextSchema, pluginOptions, attributes };\n  }\n\n  return nextSchema;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * addLocalisationToFields\n * -----------------------------------------------------------------------------------------------*/\n\nconst addLocalisationToFields = (attributes: Schema.ContentType['attributes']) =>\n  Object.keys(attributes).reduce<Schema.ContentType['attributes']>((acc, current) => {\n    const currentAttribute = attributes[current];\n\n    if (LOCALIZED_FIELDS.includes(currentAttribute.type)) {\n      const i18n = { localized: true };\n\n      const pluginOptions = currentAttribute.pluginOptions\n        ? { ...currentAttribute.pluginOptions, i18n }\n        : { i18n };\n\n      acc[current] = { ...currentAttribute, pluginOptions };\n\n      return acc;\n    }\n\n    acc[current] = currentAttribute;\n\n    return acc;\n  }, {});\n\n/* -------------------------------------------------------------------------------------------------\n * disableAttributesLocalisation\n * -----------------------------------------------------------------------------------------------*/\n\ntype OmitByPath<T extends object, K extends string[]> = Pick<T, Exclude<keyof T, K[number]>>;\n\nconst disableAttributesLocalisation = (attributes: Schema.ContentType['attributes']) =>\n  Object.keys(attributes).reduce<\n    Record<string, OmitByPath<Schema.ContentType['attributes'][string], ['pluginOptions', 'i18n']>>\n  >((acc, current) => {\n    acc[current] = omit(attributes[current], 'pluginOptions.i18n');\n\n    return acc;\n  }, {});\n\nexport { mutateCTBContentTypeSchema };\n","import { prefixPluginTranslations } from '@strapi/helper-plugin';\nimport get from 'lodash/get';\nimport * as yup from 'yup';\n\nimport { CheckboxConfirmation } from './components/CheckboxConfirmation';\nimport { CMEditViewInjectedComponents } from './components/CMEditViewInjectedComponents';\nimport {\n  DeleteModalAdditionalInfo,\n  PublishModalAdditionalInfo,\n  UnpublishModalAdditionalInfo,\n} from './components/CMListViewModalsAdditionalInformation';\nimport { Initializer } from './components/Initializer';\nimport { LocalePicker } from './components/LocalePicker';\nimport { PERMISSIONS } from './constants';\nimport { addLocaleToLinksHook } from './contentManagerHooks/app';\nimport { mutateEditViewLayoutHook } from './contentManagerHooks/editView';\nimport { addColumnToTableHook } from './contentManagerHooks/listView';\nimport { addCommonFieldsToInitialDataMiddleware } from './middlewares/addCommonFieldsToInitialData';\nimport { extendCTBAttributeInitialDataMiddleware } from './middlewares/extendCTBAttributeInitialData';\nimport { extendCTBInitialDataMiddleware } from './middlewares/extendCTBInitialData';\nimport { localePermissionMiddleware } from './middlewares/localePermission';\nimport { pluginId } from './pluginId';\nimport { reducers } from './store/reducers';\nimport { LOCALIZED_FIELDS } from './utils/fields';\nimport { getTranslation } from './utils/getTranslation';\nimport { mutateCTBContentTypeSchema } from './utils/schemas';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    app.addMiddlewares([\n      addCommonFieldsToInitialDataMiddleware,\n      extendCTBAttributeInitialDataMiddleware,\n      extendCTBInitialDataMiddleware,\n      localePermissionMiddleware,\n    ]);\n\n    /**\n     * TODO: this should use the `useInjectReducer` hook when it's exported from the `@strapi/admin` package.\n     */\n    app.addReducers(reducers);\n\n    app.registerPlugin({\n      id: pluginId,\n      initializer: Initializer,\n      isReady: false,\n      name: pluginId,\n    });\n  },\n  bootstrap(app: any) {\n    // Hooks that mutate the collection types links in order to add the locale filter\n    app.registerHook(\n      'Admin/CM/pages/App/mutate-collection-types-links',\n      addLocaleToLinksHook('collection-types')\n    );\n    app.registerHook(\n      'Admin/CM/pages/App/mutate-single-types-links',\n      addLocaleToLinksHook('single-types')\n    );\n    // Hook that adds a column into the CM's LV table\n    app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\n    // Hooks that mutates the edit view layout\n    app.registerHook('Admin/CM/pages/EditView/mutate-edit-view-layout', mutateEditViewLayoutHook);\n    // Add the settings link\n    app.addSettingsLink('global', {\n      intlLabel: {\n        id: getTranslation('plugin.name'),\n        defaultMessage: 'Internationalization',\n      },\n      id: 'internationalization',\n      to: '/settings/internationalization',\n\n      async Component() {\n        const { ProtectedSettingsPage } = await import('./pages/SettingsPage');\n\n        return ProtectedSettingsPage;\n      },\n      permissions: PERMISSIONS.accessMain,\n    });\n\n    app.injectContentManagerComponent('editView', 'informations', {\n      name: 'i18n-locale-filter-edit-view',\n      Component: CMEditViewInjectedComponents,\n    });\n\n    app.injectContentManagerComponent('listView', 'actions', {\n      name: 'i18n-locale-filter',\n      Component: LocalePicker,\n    });\n\n    app.injectContentManagerComponent('listView', 'publishModalAdditionalInfos', {\n      name: 'i18n-publish-bullets-in-modal',\n      Component: PublishModalAdditionalInfo,\n    });\n\n    app.injectContentManagerComponent('listView', 'unpublishModalAdditionalInfos', {\n      name: 'i18n-unpublish-bullets-in-modal',\n      Component: UnpublishModalAdditionalInfo,\n    });\n\n    app.injectContentManagerComponent('listView', 'deleteModalAdditionalInfos', {\n      name: 'i18n-delete-bullets-in-modal',\n      Component: DeleteModalAdditionalInfo,\n    });\n\n    const ctbPlugin = app.getPlugin('content-type-builder');\n\n    if (ctbPlugin) {\n      const ctbFormsAPI = ctbPlugin.apis.forms;\n      ctbFormsAPI.addContentTypeSchemaMutation(mutateCTBContentTypeSchema);\n      ctbFormsAPI.components.add({ id: 'checkboxConfirmation', component: CheckboxConfirmation });\n\n      ctbFormsAPI.extendContentType({\n        validator: () => ({\n          i18n: yup.object().shape({\n            localized: yup.bool(),\n          }),\n        }),\n        form: {\n          advanced() {\n            return [\n              {\n                name: 'pluginOptions.i18n.localized',\n                description: {\n                  id: getTranslation('plugin.schema.i18n.localized.description-content-type'),\n                  defaultMessage: 'Allows translating an entry into different languages',\n                },\n                type: 'checkboxConfirmation',\n                intlLabel: {\n                  id: getTranslation('plugin.schema.i18n.localized.label-content-type'),\n                  defaultMessage: 'Localization',\n                },\n              },\n            ];\n          },\n        },\n      });\n\n      ctbFormsAPI.extendFields(LOCALIZED_FIELDS, {\n        validator: (args: any) => ({\n          i18n: yup.object().shape({\n            localized: yup.bool().test({\n              name: 'ensure-unique-localization',\n              message: getTranslation('plugin.schema.i18n.ensure-unique-localization'),\n              test(value) {\n                if (value === undefined || value) {\n                  return true;\n                }\n\n                const unique = get(args, ['3', 'modifiedData', 'unique'], null);\n\n                // Unique fields must be localized\n                if (unique && !value) {\n                  return false;\n                }\n\n                return true;\n              },\n            }),\n          }),\n        }),\n        form: {\n          advanced({ contentTypeSchema, forTarget, type, step }: any) {\n            if (forTarget !== 'contentType') {\n              return [];\n            }\n\n            const hasI18nEnabled = get(\n              contentTypeSchema,\n              ['schema', 'pluginOptions', 'i18n', 'localized'],\n              false\n            );\n\n            if (!hasI18nEnabled) {\n              return [];\n            }\n\n            if (type === 'component' && step === '1') {\n              return [];\n            }\n\n            return [\n              {\n                name: 'pluginOptions.i18n.localized',\n                description: {\n                  id: getTranslation('plugin.schema.i18n.localized.description-field'),\n                  defaultMessage: 'The field can have different values in each locale',\n                },\n                type: 'checkbox',\n                intlLabel: {\n                  id: getTranslation('plugin.schema.i18n.localized.label-field'),\n                  defaultMessage: 'Enable localization for this field',\n                },\n              },\n            ];\n          },\n        },\n      });\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],"names":["styled","Typography","useIntl","React","value","jsxs","Fragment","jsx","Checkbox","Dialog","DialogBody","ExclamationMarkCircle","Flex","DialogFooter","Button","useDispatch","useSelector","createSelector","useMemo","contentManagementUtilRemoveFieldsFromData","formatContentTypeData","useNotification","useCMEditViewDataManager","get","useFetchClient","Duplicate","Box","SingleSelect","SingleSelectOption","useQueryParams","useHistory","stringify","pxToRem","useParams","Divider","useEffect","useRouteMatch","useState","parse","Earth","EarthStriked","Tooltip","VisuallyHidden","SortIcon","Popover","isFieldLocalized","cloneDeep","getFetchClient","merge","produce","set","omit","yup","prefixPluginTranslations"],"mappings":"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"}