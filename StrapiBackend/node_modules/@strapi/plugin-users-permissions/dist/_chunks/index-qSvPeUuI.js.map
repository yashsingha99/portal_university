{"version":3,"file":"index-qSvPeUuI.js","sources":["../../admin/src/components/FormModal/Input/index.jsx","../../admin/src/components/FormModal/index.jsx","../../admin/src/pages/Providers/utils/forms.js","../../admin/src/pages/Providers/index.jsx"],"sourcesContent":["/**\n *\n * Input\n *\n */\n\nimport React from 'react';\n\nimport { TextInput, ToggleInput } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nconst Input = ({\n  description,\n  disabled,\n  intlLabel,\n  error,\n  name,\n  onChange,\n  placeholder,\n  providerToEditName,\n  type,\n  value,\n}) => {\n  const { formatMessage } = useIntl();\n  const inputValue =\n    name === 'noName'\n      ? `${window.strapi.backendURL}/api/connect/${providerToEditName}/callback`\n      : value;\n\n  const label = formatMessage(\n    { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n    { provider: providerToEditName, ...intlLabel.values }\n  );\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { provider: providerToEditName, ...description.values }\n      )\n    : '';\n\n  if (type === 'bool') {\n    return (\n      <ToggleInput\n        aria-label={name}\n        checked={value}\n        disabled={disabled}\n        hint={hint}\n        label={label}\n        name={name}\n        offLabel={formatMessage({\n          id: 'app.components.ToggleCheckbox.off-label',\n          defaultMessage: 'Off',\n        })}\n        onLabel={formatMessage({\n          id: 'app.components.ToggleCheckbox.on-label',\n          defaultMessage: 'On',\n        })}\n        onChange={(e) => {\n          onChange({ target: { name, value: e.target.checked } });\n        }}\n      />\n    );\n  }\n\n  const formattedPlaceholder = placeholder\n    ? formatMessage(\n        { id: placeholder.id, defaultMessage: placeholder.defaultMessage },\n        { ...placeholder.values }\n      )\n    : '';\n\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n\n  return (\n    <TextInput\n      aria-label={name}\n      disabled={disabled}\n      error={errorMessage}\n      label={label}\n      name={name}\n      onChange={onChange}\n      placeholder={formattedPlaceholder}\n      type={type}\n      value={inputValue}\n    />\n  );\n};\n\nInput.defaultProps = {\n  description: null,\n  disabled: false,\n  error: '',\n  placeholder: null,\n  value: '',\n};\n\nInput.propTypes = {\n  description: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    values: PropTypes.object,\n  }),\n  disabled: PropTypes.bool,\n  error: PropTypes.string,\n  intlLabel: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    values: PropTypes.object,\n  }).isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    values: PropTypes.object,\n  }),\n  providerToEditName: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nexport default Input;\n","/**\n *\n * FormModal\n *\n */\n\nimport React from 'react';\n\nimport {\n  Button,\n  Flex,\n  Grid,\n  GridItem,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalLayout,\n} from '@strapi/design-system';\nimport { Breadcrumbs, Crumb } from '@strapi/design-system/v2';\nimport { Form } from '@strapi/helper-plugin';\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport Input from './Input';\n\nconst FormModal = ({\n  headerBreadcrumbs,\n  initialData,\n  isSubmiting,\n  layout,\n  isOpen,\n  onSubmit,\n  onToggle,\n  providerToEditName,\n}) => {\n  const { formatMessage } = useIntl();\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <ModalLayout onClose={onToggle} labelledBy=\"title\">\n      <ModalHeader>\n        <Breadcrumbs label={headerBreadcrumbs.join(', ')}>\n          {headerBreadcrumbs.map((crumb, index, arr) => (\n            <Crumb isCurrent={index === arr.length - 1} key={crumb}>\n              {crumb}\n            </Crumb>\n          ))}\n        </Breadcrumbs>\n      </ModalHeader>\n      <Formik\n        onSubmit={(values) => onSubmit(values)}\n        initialValues={initialData}\n        validationSchema={layout.schema}\n        validateOnChange={false}\n      >\n        {({ errors, handleChange, values }) => {\n          return (\n            <Form>\n              <ModalBody>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n                  <Grid gap={5}>\n                    {layout.form.map((row) => {\n                      return row.map((input) => {\n                        return (\n                          <GridItem key={input.name} col={input.size} xs={12}>\n                            <Input\n                              {...input}\n                              error={errors[input.name]}\n                              onChange={handleChange}\n                              value={values[input.name]}\n                              providerToEditName={providerToEditName}\n                            />\n                          </GridItem>\n                        );\n                      });\n                    })}\n                  </Grid>\n                </Flex>\n              </ModalBody>\n              <ModalFooter\n                startActions={\n                  <Button variant=\"tertiary\" onClick={onToggle} type=\"button\">\n                    {formatMessage({\n                      id: 'app.components.Button.cancel',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                }\n                endActions={\n                  <Button type=\"submit\" loading={isSubmiting}>\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                }\n              />\n            </Form>\n          );\n        }}\n      </Formik>\n    </ModalLayout>\n  );\n};\n\nFormModal.defaultProps = {\n  initialData: null,\n  providerToEditName: null,\n};\n\nFormModal.propTypes = {\n  headerBreadcrumbs: PropTypes.arrayOf(PropTypes.string).isRequired,\n  initialData: PropTypes.object,\n  layout: PropTypes.shape({\n    form: PropTypes.arrayOf(PropTypes.array),\n    schema: PropTypes.object,\n  }).isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  isSubmiting: PropTypes.bool.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  providerToEditName: PropTypes.string,\n};\n\nexport default FormModal;\n","import { translatedErrors } from '@strapi/helper-plugin';\nimport * as yup from 'yup';\n\nimport { getTrad } from '../../../utils';\n\nconst callbackLabel = {\n  id: getTrad('PopUpForm.Providers.redirectURL.front-end.label'),\n  defaultMessage: 'The redirect URL to your front-end app',\n};\nconst callbackPlaceholder = {\n  id: 'http://www.client-app.com',\n  defaultMessage: 'http://www.client-app.com',\n};\nconst enabledDescription = {\n  id: getTrad('PopUpForm.Providers.enabled.description'),\n  defaultMessage: \"If disabled, users won't be able to use this provider.\",\n};\nconst enabledLabel = {\n  id: getTrad('PopUpForm.Providers.enabled.label'),\n  defaultMessage: 'Enable',\n};\nconst keyLabel = { id: getTrad('PopUpForm.Providers.key.label'), defaultMessage: 'Client ID' };\nconst hintLabel = {\n  id: getTrad('PopUpForm.Providers.redirectURL.label'),\n  defaultMessage: 'The redirect URL to add in your {provider} application configurations',\n};\nconst textPlaceholder = {\n  id: getTrad('PopUpForm.Providers.key.placeholder'),\n  defaultMessage: 'TEXT',\n};\n\nconst secretLabel = {\n  id: getTrad('PopUpForm.Providers.secret.label'),\n  defaultMessage: 'Client Secret',\n};\n\nconst forms = {\n  email: {\n    form: [\n      [\n        {\n          intlLabel: enabledLabel,\n          name: 'enabled',\n          type: 'bool',\n          description: enabledDescription,\n          size: 6,\n          // TODO check if still needed\n          // validations: {\n          //   required: true,\n          // },\n        },\n      ],\n    ],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(translatedErrors.required),\n    }),\n  },\n  providers: {\n    form: [\n      [\n        {\n          intlLabel: enabledLabel,\n          name: 'enabled',\n          type: 'bool',\n          description: enabledDescription,\n          size: 6,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: keyLabel,\n          name: 'key',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: secretLabel,\n          name: 'secret',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: callbackLabel,\n          placeholder: callbackPlaceholder,\n          name: 'callback',\n          type: 'text',\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: hintLabel,\n          name: 'noName',\n          type: 'text',\n          validations: {},\n          size: 12,\n          disabled: true,\n        },\n      ],\n    ],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(translatedErrors.required),\n      key: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required),\n        otherwise: yup.string(),\n      }),\n      secret: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required),\n        otherwise: yup.string(),\n      }),\n      callback: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required),\n        otherwise: yup.string(),\n      }),\n    }),\n  },\n  providersWithSubdomain: {\n    form: [\n      [\n        {\n          intlLabel: enabledLabel,\n          name: 'enabled',\n          type: 'bool',\n          description: enabledDescription,\n          size: 6,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: keyLabel,\n          name: 'key',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: secretLabel,\n          name: 'secret',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: {\n            id: getTrad({ id: 'PopUpForm.Providers.jwksurl.label' }),\n            defaultMessage: 'JWKS URL',\n          },\n          name: 'jwksurl',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: false,\n          },\n        },\n      ],\n\n      [\n        {\n          intlLabel: {\n            id: getTrad('PopUpForm.Providers.subdomain.label'),\n            defaultMessage: 'Host URI (Subdomain)',\n          },\n          name: 'subdomain',\n          type: 'text',\n          placeholder: {\n            id: getTrad('PopUpForm.Providers.subdomain.placeholder'),\n            defaultMessage: 'my.subdomain.com',\n          },\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: callbackLabel,\n          placeholder: callbackPlaceholder,\n          name: 'callback',\n          type: 'text',\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: hintLabel,\n          name: 'noName',\n          type: 'text',\n          validations: {},\n          size: 12,\n          disabled: true,\n        },\n      ],\n    ],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(translatedErrors.required),\n      key: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required),\n        otherwise: yup.string(),\n      }),\n      secret: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required),\n        otherwise: yup.string(),\n      }),\n      subdomain: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required),\n        otherwise: yup.string(),\n      }),\n      callback: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required),\n        otherwise: yup.string(),\n      }),\n    }),\n  },\n};\n\nexport default forms;\n","import * as React from 'react';\n\nimport {\n  ContentLayout,\n  HeaderLayout,\n  IconButton,\n  Layout,\n  Main,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport {\n  CheckPagePermissions,\n  LoadingIndicatorPage,\n  onRowClick,\n  SettingsPageTitle,\n  stopPropagation,\n  useAPIErrorHandler,\n  useCollator,\n  useFetchClient,\n  useFocusWhenNavigate,\n  useNotification,\n  useOverlayBlocker,\n  useRBAC,\n  useTracking,\n} from '@strapi/helper-plugin';\nimport { Pencil } from '@strapi/icons';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport FormModal from '../../components/FormModal';\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport forms from './utils/forms';\n\nexport const ProvidersPage = () => {\n  const { formatMessage, locale } = useIntl();\n  const queryClient = useQueryClient();\n  const { trackUsage } = useTracking();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [providerToEditName, setProviderToEditName] = React.useState(null);\n  const toggleNotification = useNotification();\n  const { lockApp, unlockApp } = useOverlayBlocker();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  useFocusWhenNavigate();\n\n  const {\n    isLoading: isLoadingPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateProviders });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'get-providers'],\n    async () => {\n      const { data } = await get('/users-permissions/providers');\n\n      return data;\n    },\n    {\n      initialData: {},\n    }\n  );\n\n  const submitMutation = useMutation((body) => put('/users-permissions/providers', body), {\n    async onSuccess() {\n      await queryClient.invalidateQueries(['users-permissions', 'providers']);\n\n      toggleNotification({\n        type: 'success',\n        message: { id: getTrad('notification.success.submit') },\n      });\n\n      trackUsage('didEditAuthenticationProvider');\n\n      handleToggleModal();\n      unlockApp();\n    },\n    onError(error) {\n      toggleNotification({\n        type: 'warning',\n        message: formatAPIError(error),\n      });\n\n      unlockApp();\n    },\n    refetchActive: false,\n  });\n\n  const providers = Object.entries(data)\n    .reduce((acc, [name, provider]) => {\n      const { icon, enabled, subdomain } = provider;\n\n      acc.push({\n        name,\n        icon: icon === 'envelope' ? ['fas', 'envelope'] : ['fab', icon],\n        enabled,\n        subdomain,\n      });\n\n      return acc;\n    }, [])\n    .sort((a, b) => formatter.compare(a.name, b.name));\n\n  const isLoading = isLoadingData || isLoadingPermissions;\n\n  const isProviderWithSubdomain = React.useMemo(() => {\n    if (!providerToEditName) {\n      return false;\n    }\n\n    const providerToEdit = providers.find((obj) => obj.name === providerToEditName);\n\n    return !!providerToEdit?.subdomain;\n  }, [providers, providerToEditName]);\n\n  const layoutToRender = React.useMemo(() => {\n    if (providerToEditName === 'email') {\n      return forms.email;\n    }\n\n    if (isProviderWithSubdomain) {\n      return forms.providersWithSubdomain;\n    }\n\n    return forms.providers;\n  }, [providerToEditName, isProviderWithSubdomain]);\n\n  const handleToggleModal = () => {\n    setIsOpen((prev) => !prev);\n  };\n\n  const handleClickEdit = (provider) => {\n    if (canUpdate) {\n      setProviderToEditName(provider.name);\n      handleToggleModal();\n    }\n  };\n\n  const handleSubmit = async (values) => {\n    lockApp();\n\n    trackUsage('willEditAuthenticationProvider');\n\n    submitMutation.mutate({ providers: { ...data, [providerToEditName]: values } });\n  };\n\n  return (\n    <Layout>\n      <SettingsPageTitle\n        name={formatMessage({\n          id: getTrad('HeaderNav.link.providers'),\n          defaultMessage: 'Providers',\n        })}\n      />\n      <Main>\n        <HeaderLayout\n          title={formatMessage({\n            id: getTrad('HeaderNav.link.providers'),\n            defaultMessage: 'Providers',\n          })}\n        />\n        {isLoading ? (\n          <LoadingIndicatorPage />\n        ) : (\n          <ContentLayout>\n            <Table colCount={3} rowCount={providers.length + 1}>\n              <Thead>\n                <Tr>\n                  <Th>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n                    </Typography>\n                  </Th>\n                  <Th>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({ id: getTrad('Providers.status'), defaultMessage: 'Status' })}\n                    </Typography>\n                  </Th>\n                  <Th>\n                    <Typography variant=\"sigma\">\n                      <VisuallyHidden>\n                        {formatMessage({\n                          id: 'global.settings',\n                          defaultMessage: 'Settings',\n                        })}\n                      </VisuallyHidden>\n                    </Typography>\n                  </Th>\n                </Tr>\n              </Thead>\n              <Tbody>\n                {providers.map((provider) => (\n                  <Tr\n                    key={provider.name}\n                    {...onRowClick({\n                      fn: () => handleClickEdit(provider),\n                      condition: canUpdate,\n                    })}\n                  >\n                    <Td width=\"45%\">\n                      <Typography fontWeight=\"semiBold\" textColor=\"neutral800\">\n                        {provider.name}\n                      </Typography>\n                    </Td>\n                    <Td width=\"65%\">\n                      <Typography\n                        textColor={provider.enabled ? 'success600' : 'danger600'}\n                        data-testid={`enable-${provider.name}`}\n                      >\n                        {provider.enabled\n                          ? formatMessage({\n                              id: 'global.enabled',\n                              defaultMessage: 'Enabled',\n                            })\n                          : formatMessage({\n                              id: 'global.disabled',\n                              defaultMessage: 'Disabled',\n                            })}\n                      </Typography>\n                    </Td>\n                    <Td {...stopPropagation}>\n                      {canUpdate && (\n                        <IconButton\n                          onClick={() => handleClickEdit(provider)}\n                          noBorder\n                          icon={<Pencil />}\n                          label=\"Edit\"\n                        />\n                      )}\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </Table>\n          </ContentLayout>\n        )}\n      </Main>\n      <FormModal\n        initialData={data[providerToEditName]}\n        isOpen={isOpen}\n        isSubmiting={submitMutation.isLoading}\n        layout={layoutToRender}\n        headerBreadcrumbs={[\n          formatMessage({\n            id: getTrad('PopUpForm.header.edit.providers'),\n            defaultMessage: 'Edit Provider',\n          }),\n          upperFirst(providerToEditName),\n        ]}\n        onToggle={handleToggleModal}\n        onSubmit={handleSubmit}\n        providerToEditName={providerToEditName}\n      />\n    </Layout>\n  );\n};\n\nconst ProtectedProvidersPage = () => (\n  <CheckPagePermissions permissions={PERMISSIONS.readProviders}>\n    <ProvidersPage />\n  </CheckPagePermissions>\n);\n\nexport default ProtectedProvidersPage;\n"],"names":["useIntl","jsx","ToggleInput","TextInput","PropTypes","jsxs","ModalLayout","ModalHeader","Breadcrumbs","index","Crumb","Formik","Form","ModalBody","Flex","Grid","GridItem","ModalFooter","Button","getTrad","yup","translatedErrors","useQueryClient","useTracking","React","useNotification","useOverlayBlocker","useFetchClient","useAPIErrorHandler","useCollator","useFocusWhenNavigate","useRBAC","PERMISSIONS","useQuery","data","useMutation","Layout","SettingsPageTitle","Main","HeaderLayout","LoadingIndicatorPage","ContentLayout","Table","Thead","Tr","Th","Typography","VisuallyHidden","Tbody","onRowClick","Td","stopPropagation","IconButton","Pencil","upperFirst","CheckPagePermissions"],"mappings":"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"}