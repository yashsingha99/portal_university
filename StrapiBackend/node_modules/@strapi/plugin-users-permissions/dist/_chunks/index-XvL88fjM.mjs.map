{"version":3,"file":"index-XvL88fjM.mjs","sources":["../../admin/src/pages/EmailTemplates/utils/schema.js","../../admin/src/pages/EmailTemplates/components/EmailForm.jsx","../../admin/src/pages/EmailTemplates/components/EmailTable.jsx","../../admin/src/pages/EmailTemplates/index.jsx"],"sourcesContent":["import { translatedErrors } from '@strapi/helper-plugin';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  options: yup\n    .object()\n    .shape({\n      from: yup\n        .object()\n        .shape({\n          name: yup.string().required(translatedErrors.required),\n          email: yup.string().email(translatedErrors.email).required(translatedErrors.required),\n        })\n        .required(),\n      response_email: yup.string().email(translatedErrors.email),\n      object: yup.string().required(translatedErrors.required),\n      message: yup.string().required(translatedErrors.required),\n    })\n    .required(translatedErrors.required),\n});\n\nexport default schema;\n","import React from 'react';\n\nimport {\n  Button,\n  Grid,\n  GridItem,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalLayout,\n  Textarea,\n} from '@strapi/design-system';\nimport { Breadcrumbs, Crumb } from '@strapi/design-system/v2';\nimport { Form, GenericInput } from '@strapi/helper-plugin';\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\nimport schema from '../utils/schema';\n\nconst EmailForm = ({ template, onToggle, onSubmit }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <ModalLayout\n      onClose={onToggle}\n      labelledBy={`${formatMessage({\n        id: getTrad('PopUpForm.header.edit.email-templates'),\n        defaultMessage: 'Edit email template',\n      })}, ${formatMessage({ id: getTrad(template.display), defaultMessage: template.display })}`}\n    >\n      <ModalHeader>\n        <Breadcrumbs\n          label={`${formatMessage({\n            id: getTrad('PopUpForm.header.edit.email-templates'),\n            defaultMessage: 'Edit email template',\n          })}, ${formatMessage({\n            id: getTrad(template.display),\n            defaultMessage: template.display,\n          })}`}\n        >\n          <Crumb>\n            {formatMessage({\n              id: getTrad('PopUpForm.header.edit.email-templates'),\n              defaultMessage: 'Edit email template',\n            })}\n          </Crumb>\n          <Crumb isCurrent>\n            {formatMessage({ id: getTrad(template.display), defaultMessage: template.display })}\n          </Crumb>\n        </Breadcrumbs>\n      </ModalHeader>\n      <Formik\n        onSubmit={onSubmit}\n        initialValues={template}\n        validateOnChange={false}\n        validationSchema={schema}\n        enableReinitialize\n      >\n        {({ errors, values, handleChange, isSubmitting }) => {\n          return (\n            <Form>\n              <ModalBody>\n                <Grid gap={5}>\n                  <GridItem col={6} s={12}>\n                    <GenericInput\n                      intlLabel={{\n                        id: getTrad('PopUpForm.Email.options.from.name.label'),\n                        defaultMessage: 'Shipper name',\n                      }}\n                      name=\"options.from.name\"\n                      onChange={handleChange}\n                      value={values.options.from.name}\n                      error={errors?.options?.from?.name}\n                      type=\"text\"\n                    />\n                  </GridItem>\n                  <GridItem col={6} s={12}>\n                    <GenericInput\n                      intlLabel={{\n                        id: getTrad('PopUpForm.Email.options.from.email.label'),\n                        defaultMessage: 'Shipper email',\n                      }}\n                      name=\"options.from.email\"\n                      onChange={handleChange}\n                      value={values.options.from.email}\n                      error={errors?.options?.from?.email}\n                      type=\"text\"\n                    />\n                  </GridItem>\n                  <GridItem col={6} s={12}>\n                    <GenericInput\n                      intlLabel={{\n                        id: getTrad('PopUpForm.Email.options.response_email.label'),\n                        defaultMessage: 'Response email',\n                      }}\n                      name=\"options.response_email\"\n                      onChange={handleChange}\n                      value={values.options.response_email}\n                      error={errors?.options?.response_email}\n                      type=\"text\"\n                    />\n                  </GridItem>\n                  <GridItem col={6} s={12}>\n                    <GenericInput\n                      intlLabel={{\n                        id: getTrad('PopUpForm.Email.options.object.label'),\n                        defaultMessage: 'Subject',\n                      }}\n                      name=\"options.object\"\n                      onChange={handleChange}\n                      value={values.options.object}\n                      error={errors?.options?.object}\n                      type=\"text\"\n                    />\n                  </GridItem>\n                  <GridItem col={12} s={12}>\n                    <Textarea\n                      label={formatMessage({\n                        id: getTrad('PopUpForm.Email.options.message.label'),\n                        defaultMessage: 'Message',\n                      })}\n                      id=\"options.message\"\n                      onChange={handleChange}\n                      value={values.options.message}\n                      error={\n                        errors?.options?.message &&\n                        formatMessage({\n                          id: errors.options.message,\n                          defaultMessage: errors.options.message,\n                        })\n                      }\n                    />\n                  </GridItem>\n                </Grid>\n              </ModalBody>\n              <ModalFooter\n                startActions={\n                  <Button onClick={onToggle} variant=\"tertiary\">\n                    Cancel\n                  </Button>\n                }\n                endActions={\n                  <Button loading={isSubmitting} type=\"submit\">\n                    Finish\n                  </Button>\n                }\n              />\n            </Form>\n          );\n        }}\n      </Formik>\n    </ModalLayout>\n  );\n};\n\nEmailForm.propTypes = {\n  template: PropTypes.shape({\n    display: PropTypes.string,\n    icon: PropTypes.string,\n    options: PropTypes.shape({\n      from: PropTypes.shape({\n        name: PropTypes.string,\n        email: PropTypes.string,\n      }),\n      message: PropTypes.string,\n      object: PropTypes.string,\n      response_email: PropTypes.string,\n    }),\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n\nexport default EmailForm;\n","import React from 'react';\n\nimport {\n  Icon,\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { onRowClick, stopPropagation } from '@strapi/helper-plugin';\nimport { Check, Pencil, Refresh } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\n\nconst EmailTable = ({ canUpdate, onEditClick }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Table colCount={3} rowCount={3}>\n      <Thead>\n        <Tr>\n          <Th width=\"1%\">\n            <VisuallyHidden>\n              {formatMessage({\n                id: getTrad('Email.template.table.icon.label'),\n                defaultMessage: 'icon',\n              })}\n            </VisuallyHidden>\n          </Th>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTrad('Email.template.table.name.label'),\n                defaultMessage: 'name',\n              })}\n            </Typography>\n          </Th>\n          <Th width=\"1%\">\n            <VisuallyHidden>\n              {formatMessage({\n                id: getTrad('Email.template.table.action.label'),\n                defaultMessage: 'action',\n              })}\n            </VisuallyHidden>\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        <Tr {...onRowClick({ fn: () => onEditClick('reset_password') })}>\n          <Td>\n            <Icon>\n              <Refresh\n                aria-label={formatMessage({\n                  id: 'global.reset-password',\n                  defaultMessage: 'Reset password',\n                })}\n              />\n            </Icon>\n          </Td>\n          <Td>\n            <Typography>\n              {formatMessage({\n                id: 'global.reset-password',\n                defaultMessage: 'Reset password',\n              })}\n            </Typography>\n          </Td>\n          <Td {...stopPropagation}>\n            <IconButton\n              onClick={() => onEditClick('reset_password')}\n              label={formatMessage({\n                id: getTrad('Email.template.form.edit.label'),\n                defaultMessage: 'Edit a template',\n              })}\n              noBorder\n              icon={canUpdate && <Pencil />}\n            />\n          </Td>\n        </Tr>\n        <Tr {...onRowClick({ fn: () => onEditClick('email_confirmation') })}>\n          <Td>\n            <Icon>\n              <Check\n                aria-label={formatMessage({\n                  id: getTrad('Email.template.email_confirmation'),\n                  defaultMessage: 'Email address confirmation',\n                })}\n              />\n            </Icon>\n          </Td>\n          <Td>\n            <Typography>\n              {formatMessage({\n                id: getTrad('Email.template.email_confirmation'),\n                defaultMessage: 'Email address confirmation',\n              })}\n            </Typography>\n          </Td>\n          <Td {...stopPropagation}>\n            <IconButton\n              onClick={() => onEditClick('email_confirmation')}\n              label={formatMessage({\n                id: getTrad('Email.template.form.edit.label'),\n                defaultMessage: 'Edit a template',\n              })}\n              noBorder\n              icon={canUpdate && <Pencil />}\n            />\n          </Td>\n        </Tr>\n      </Tbody>\n    </Table>\n  );\n};\n\nEmailTable.propTypes = {\n  canUpdate: PropTypes.bool.isRequired,\n  onEditClick: PropTypes.func.isRequired,\n};\n\nexport default EmailTable;\n","import * as React from 'react';\n\nimport { ContentLayout, HeaderLayout, Main, useNotifyAT } from '@strapi/design-system';\nimport {\n  CheckPagePermissions,\n  LoadingIndicatorPage,\n  SettingsPageTitle,\n  useAPIErrorHandler,\n  useFetchClient,\n  useFocusWhenNavigate,\n  useNotification,\n  useOverlayBlocker,\n  useRBAC,\n  useTracking,\n} from '@strapi/helper-plugin';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport EmailForm from './components/EmailForm';\nimport EmailTable from './components/EmailTable';\n\nconst ProtectedEmailTemplatesPage = () => (\n  <CheckPagePermissions permissions={PERMISSIONS.readEmailTemplates}>\n    <EmailTemplatesPage />\n  </CheckPagePermissions>\n);\n\nconst EmailTemplatesPage = () => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { notifyStatus } = useNotifyAT();\n  const toggleNotification = useNotification();\n  const { lockApp, unlockApp } = useOverlayBlocker();\n  const queryClient = useQueryClient();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  useFocusWhenNavigate();\n\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const [templateToEdit, setTemplateToEdit] = React.useState(null);\n\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateEmailTemplates });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'email-templates'],\n    async () => {\n      const { data } = await get('/users-permissions/email-templates');\n\n      return data;\n    },\n    {\n      onSuccess() {\n        notifyStatus(\n          formatMessage({\n            id: getTrad('Email.template.data.loaded'),\n            defaultMessage: 'Email templates has been loaded',\n          })\n        );\n      },\n      onError(error) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(error),\n        });\n      },\n    }\n  );\n\n  const isLoading = isLoadingForPermissions || isLoadingData;\n\n  const handleToggle = () => {\n    setIsModalOpen((prev) => !prev);\n  };\n\n  const handleEditClick = (template) => {\n    setTemplateToEdit(template);\n    handleToggle();\n  };\n\n  const submitMutation = useMutation(\n    (body) => put('/users-permissions/email-templates', { 'email-templates': body }),\n    {\n      async onSuccess() {\n        await queryClient.invalidateQueries(['users-permissions', 'email-templates']);\n\n        toggleNotification({\n          type: 'success',\n          message: { id: 'notification.success.saved', defaultMessage: 'Saved' },\n        });\n\n        trackUsage('didEditEmailTemplates');\n\n        unlockApp();\n        handleToggle();\n      },\n      onError(error) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(error),\n        });\n\n        unlockApp();\n      },\n      refetchActive: true,\n    }\n  );\n\n  const handleSubmit = (body) => {\n    lockApp();\n\n    trackUsage('willEditEmailTemplates');\n\n    const editedTemplates = { ...data, [templateToEdit]: body };\n    submitMutation.mutate(editedTemplates);\n  };\n\n  if (isLoading) {\n    return (\n      <Main aria-busy=\"true\">\n        <SettingsPageTitle\n          name={formatMessage({\n            id: getTrad('HeaderNav.link.emailTemplates'),\n            defaultMessage: 'Email templates',\n          })}\n        />\n        <HeaderLayout\n          title={formatMessage({\n            id: getTrad('HeaderNav.link.emailTemplates'),\n            defaultMessage: 'Email templates',\n          })}\n        />\n        <ContentLayout>\n          <LoadingIndicatorPage />\n        </ContentLayout>\n      </Main>\n    );\n  }\n\n  return (\n    <Main aria-busy={submitMutation.isLoading}>\n      <SettingsPageTitle\n        name={formatMessage({\n          id: getTrad('HeaderNav.link.emailTemplates'),\n          defaultMessage: 'Email templates',\n        })}\n      />\n      <HeaderLayout\n        title={formatMessage({\n          id: getTrad('HeaderNav.link.emailTemplates'),\n          defaultMessage: 'Email templates',\n        })}\n      />\n      <ContentLayout>\n        <EmailTable onEditClick={handleEditClick} canUpdate={canUpdate} />\n        {isModalOpen && (\n          <EmailForm\n            template={data[templateToEdit]}\n            onToggle={handleToggle}\n            onSubmit={handleSubmit}\n          />\n        )}\n      </ContentLayout>\n    </Main>\n  );\n};\n\nexport default ProtectedEmailTemplatesPage;\n"],"names":["data"],"mappings":";;;;;;;;;;;;;AAGA,MAAM,SAAS,IAAI,OAAQ,EAAC,MAAM;AAAA,EAChC,SAAS,IACN,OAAQ,EACR,MAAM;AAAA,IACL,MAAM,IACH,OAAQ,EACR,MAAM;AAAA,MACL,MAAM,IAAI,OAAM,EAAG,SAAS,iBAAiB,QAAQ;AAAA,MACrD,OAAO,IAAI,OAAM,EAAG,MAAM,iBAAiB,KAAK,EAAE,SAAS,iBAAiB,QAAQ;AAAA,IAC9F,CAAS,EACA,SAAU;AAAA,IACb,gBAAgB,IAAI,OAAM,EAAG,MAAM,iBAAiB,KAAK;AAAA,IACzD,QAAQ,IAAI,OAAM,EAAG,SAAS,iBAAiB,QAAQ;AAAA,IACvD,SAAS,IAAI,OAAM,EAAG,SAAS,iBAAiB,QAAQ;AAAA,EAC9D,CAAK,EACA,SAAS,iBAAiB,QAAQ;AACvC,CAAC;ACED,MAAM,YAAY,CAAC,EAAE,UAAU,UAAU,eAAe;AAChD,QAAA,EAAE,kBAAkB;AAGxB,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,SAAS;AAAA,MACT,YAAY,GAAG,cAAc;AAAA,QAC3B,IAAI,QAAQ,uCAAuC;AAAA,QACnD,gBAAgB;AAAA,MACjB,CAAA,CAAC,KAAK,cAAc,EAAE,IAAI,QAAQ,SAAS,OAAO,GAAG,gBAAgB,SAAS,QAAA,CAAS,CAAC;AAAA,MAEzF,UAAA;AAAA,QAAA,oBAAC,aACC,EAAA,UAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,OAAO,GAAG,cAAc;AAAA,cACtB,IAAI,QAAQ,uCAAuC;AAAA,cACnD,gBAAgB;AAAA,YAAA,CACjB,CAAC,KAAK,cAAc;AAAA,cACnB,IAAI,QAAQ,SAAS,OAAO;AAAA,cAC5B,gBAAgB,SAAS;AAAA,YAC1B,CAAA,CAAC;AAAA,YAEF,UAAA;AAAA,cAAA,oBAAC,SACE,UAAc,cAAA;AAAA,gBACb,IAAI,QAAQ,uCAAuC;AAAA,gBACnD,gBAAgB;AAAA,cACjB,CAAA,GACH;AAAA,cACC,oBAAA,OAAA,EAAM,WAAS,MACb,wBAAc,EAAE,IAAI,QAAQ,SAAS,OAAO,GAAG,gBAAgB,SAAS,QAAS,CAAA,GACpF;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA,GAEJ;AAAA,QACA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC;AAAA,YACA,eAAe;AAAA,YACf,kBAAkB;AAAA,YAClB,kBAAkB;AAAA,YAClB,oBAAkB;AAAA,YAEjB,WAAC,EAAE,QAAQ,QAAQ,cAAc,mBAAmB;AACnD,0CACG,MACC,EAAA,UAAA;AAAA,gBAAA,oBAAC,WACC,EAAA,UAAA,qBAAC,MAAK,EAAA,KAAK,GACT,UAAA;AAAA,kBAAA,oBAAC,UAAS,EAAA,KAAK,GAAG,GAAG,IACnB,UAAA;AAAA,oBAAC;AAAA,oBAAA;AAAA,sBACC,WAAW;AAAA,wBACT,IAAI,QAAQ,yCAAyC;AAAA,wBACrD,gBAAgB;AAAA,sBAClB;AAAA,sBACA,MAAK;AAAA,sBACL,UAAU;AAAA,sBACV,OAAO,OAAO,QAAQ,KAAK;AAAA,sBAC3B,OAAO,QAAQ,SAAS,MAAM;AAAA,sBAC9B,MAAK;AAAA,oBAAA;AAAA,kBAAA,GAET;AAAA,kBACC,oBAAA,UAAA,EAAS,KAAK,GAAG,GAAG,IACnB,UAAA;AAAA,oBAAC;AAAA,oBAAA;AAAA,sBACC,WAAW;AAAA,wBACT,IAAI,QAAQ,0CAA0C;AAAA,wBACtD,gBAAgB;AAAA,sBAClB;AAAA,sBACA,MAAK;AAAA,sBACL,UAAU;AAAA,sBACV,OAAO,OAAO,QAAQ,KAAK;AAAA,sBAC3B,OAAO,QAAQ,SAAS,MAAM;AAAA,sBAC9B,MAAK;AAAA,oBAAA;AAAA,kBAAA,GAET;AAAA,kBACC,oBAAA,UAAA,EAAS,KAAK,GAAG,GAAG,IACnB,UAAA;AAAA,oBAAC;AAAA,oBAAA;AAAA,sBACC,WAAW;AAAA,wBACT,IAAI,QAAQ,8CAA8C;AAAA,wBAC1D,gBAAgB;AAAA,sBAClB;AAAA,sBACA,MAAK;AAAA,sBACL,UAAU;AAAA,sBACV,OAAO,OAAO,QAAQ;AAAA,sBACtB,OAAO,QAAQ,SAAS;AAAA,sBACxB,MAAK;AAAA,oBAAA;AAAA,kBAAA,GAET;AAAA,kBACC,oBAAA,UAAA,EAAS,KAAK,GAAG,GAAG,IACnB,UAAA;AAAA,oBAAC;AAAA,oBAAA;AAAA,sBACC,WAAW;AAAA,wBACT,IAAI,QAAQ,sCAAsC;AAAA,wBAClD,gBAAgB;AAAA,sBAClB;AAAA,sBACA,MAAK;AAAA,sBACL,UAAU;AAAA,sBACV,OAAO,OAAO,QAAQ;AAAA,sBACtB,OAAO,QAAQ,SAAS;AAAA,sBACxB,MAAK;AAAA,oBAAA;AAAA,kBAAA,GAET;AAAA,kBACC,oBAAA,UAAA,EAAS,KAAK,IAAI,GAAG,IACpB,UAAA;AAAA,oBAAC;AAAA,oBAAA;AAAA,sBACC,OAAO,cAAc;AAAA,wBACnB,IAAI,QAAQ,uCAAuC;AAAA,wBACnD,gBAAgB;AAAA,sBAAA,CACjB;AAAA,sBACD,IAAG;AAAA,sBACH,UAAU;AAAA,sBACV,OAAO,OAAO,QAAQ;AAAA,sBACtB,OACE,QAAQ,SAAS,WACjB,cAAc;AAAA,wBACZ,IAAI,OAAO,QAAQ;AAAA,wBACnB,gBAAgB,OAAO,QAAQ;AAAA,sBAAA,CAChC;AAAA,oBAAA;AAAA,kBAAA,GAGP;AAAA,gBAAA,EAAA,CACF,EACF,CAAA;AAAA,gBACA;AAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,cACG,oBAAA,QAAA,EAAO,SAAS,UAAU,SAAQ,YAAW,UAE9C,UAAA;AAAA,oBAEF,YACG,oBAAA,QAAA,EAAO,SAAS,cAAc,MAAK,UAAS,UAE7C,UAAA;AAAA,kBAAA;AAAA,gBAEJ;AAAA,cACF,EAAA,CAAA;AAAA,YAEJ;AAAA,UAAA;AAAA,QACF;AAAA,MAAA;AAAA,IAAA;AAAA,EAAA;AAGN;AAEA,UAAU,YAAY;AAAA,EACpB,UAAU,UAAU,MAAM;AAAA,IACxB,SAAS,UAAU;AAAA,IACnB,MAAM,UAAU;AAAA,IAChB,SAAS,UAAU,MAAM;AAAA,MACvB,MAAM,UAAU,MAAM;AAAA,QACpB,MAAM,UAAU;AAAA,QAChB,OAAO,UAAU;AAAA,MAAA,CAClB;AAAA,MACD,SAAS,UAAU;AAAA,MACnB,QAAQ,UAAU;AAAA,MAClB,gBAAgB,UAAU;AAAA,IAAA,CAC3B;AAAA,EACF,CAAA,EAAE;AAAA,EACH,UAAU,UAAU,KAAK;AAAA,EACzB,UAAU,UAAU,KAAK;AAC3B;ACxJA,MAAM,aAAa,CAAC,EAAE,WAAW,kBAAkB;AAC3C,QAAA,EAAE,kBAAkB;AAE1B,SACG,qBAAA,OAAA,EAAM,UAAU,GAAG,UAAU,GAC5B,UAAA;AAAA,IAAC,oBAAA,OAAA,EACC,+BAAC,IACC,EAAA,UAAA;AAAA,MAAA,oBAAC,IAAG,EAAA,OAAM,MACR,UAAA,oBAAC,kBACE,UAAc,cAAA;AAAA,QACb,IAAI,QAAQ,iCAAiC;AAAA,QAC7C,gBAAgB;AAAA,MAAA,CACjB,GACH,EACF,CAAA;AAAA,MACA,oBAAC,MACC,UAAC,oBAAA,YAAA,EAAW,SAAQ,SAAQ,WAAU,cACnC,UAAc,cAAA;AAAA,QACb,IAAI,QAAQ,iCAAiC;AAAA,QAC7C,gBAAgB;AAAA,MAAA,CACjB,GACH,EACF,CAAA;AAAA,0BACC,IAAG,EAAA,OAAM,MACR,UAAA,oBAAC,kBACE,UAAc,cAAA;AAAA,QACb,IAAI,QAAQ,mCAAmC;AAAA,QAC/C,gBAAgB;AAAA,MAAA,CACjB,GACH,EACF,CAAA;AAAA,IAAA,EAAA,CACF,EACF,CAAA;AAAA,yBACC,OACC,EAAA,UAAA;AAAA,MAAC,qBAAA,IAAA,EAAI,GAAG,WAAW,EAAE,IAAI,MAAM,YAAY,gBAAgB,GAAG,GAC5D,UAAA;AAAA,QAAC,oBAAA,IAAA,EACC,8BAAC,MACC,EAAA,UAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,cAAY,cAAc;AAAA,cACxB,IAAI;AAAA,cACJ,gBAAgB;AAAA,YAAA,CACjB;AAAA,UAAA;AAAA,WAEL,EACF,CAAA;AAAA,QACC,oBAAA,IAAA,EACC,UAAC,oBAAA,YAAA,EACE,UAAc,cAAA;AAAA,UACb,IAAI;AAAA,UACJ,gBAAgB;AAAA,QAAA,CACjB,GACH,EACF,CAAA;AAAA,QACA,oBAAC,IAAI,EAAA,GAAG,iBACN,UAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,SAAS,MAAM,YAAY,gBAAgB;AAAA,YAC3C,OAAO,cAAc;AAAA,cACnB,IAAI,QAAQ,gCAAgC;AAAA,cAC5C,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,UAAQ;AAAA,YACR,MAAM,aAAa,oBAAC,QAAO,CAAA,CAAA;AAAA,UAAA;AAAA,QAAA,GAE/B;AAAA,MAAA,GACF;AAAA,MACA,qBAAC,IAAI,EAAA,GAAG,WAAW,EAAE,IAAI,MAAM,YAAY,oBAAoB,GAAG,GAChE,UAAA;AAAA,QAAC,oBAAA,IAAA,EACC,8BAAC,MACC,EAAA,UAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,cAAY,cAAc;AAAA,cACxB,IAAI,QAAQ,mCAAmC;AAAA,cAC/C,gBAAgB;AAAA,YAAA,CACjB;AAAA,UAAA;AAAA,WAEL,EACF,CAAA;AAAA,QACC,oBAAA,IAAA,EACC,UAAC,oBAAA,YAAA,EACE,UAAc,cAAA;AAAA,UACb,IAAI,QAAQ,mCAAmC;AAAA,UAC/C,gBAAgB;AAAA,QAAA,CACjB,GACH,EACF,CAAA;AAAA,QACA,oBAAC,IAAI,EAAA,GAAG,iBACN,UAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,SAAS,MAAM,YAAY,oBAAoB;AAAA,YAC/C,OAAO,cAAc;AAAA,cACnB,IAAI,QAAQ,gCAAgC;AAAA,cAC5C,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,UAAQ;AAAA,YACR,MAAM,aAAa,oBAAC,QAAO,CAAA,CAAA;AAAA,UAAA;AAAA,QAAA,GAE/B;AAAA,MAAA,GACF;AAAA,IAAA,GACF;AAAA,EACF,EAAA,CAAA;AAEJ;AAEA,WAAW,YAAY;AAAA,EACrB,WAAW,UAAU,KAAK;AAAA,EAC1B,aAAa,UAAU,KAAK;AAC9B;ACrGM,MAAA,8BAA8B,MACjC,oBAAA,sBAAA,EAAqB,aAAa,YAAY,oBAC7C,UAAC,oBAAA,oBAAA,CAAA,CAAmB,EACtB,CAAA;AAGF,MAAM,qBAAqB,MAAM;AACzB,QAAA,EAAE,kBAAkB;AACpB,QAAA,EAAE,eAAe;AACjB,QAAA,EAAE,iBAAiB;AACzB,QAAM,qBAAqB;AAC3B,QAAM,EAAE,SAAS,UAAU,IAAI,kBAAkB;AACjD,QAAM,cAAc;AACpB,QAAM,EAAE,KAAK,IAAI,IAAI,eAAe;AAC9B,QAAA,EAAE,mBAAmB;AAEN;AAErB,QAAM,CAAC,aAAa,cAAc,IAAI,MAAM,SAAS,KAAK;AAC1D,QAAM,CAAC,gBAAgB,iBAAiB,IAAI,MAAM,SAAS,IAAI;AAEzD,QAAA;AAAA,IACJ,WAAW;AAAA,IACX,gBAAgB,EAAE,UAAU;AAAA,MAC1B,QAAQ,EAAE,QAAQ,YAAY,qBAAsB,CAAA;AAExD,QAAM,EAAE,WAAW,eAAe,KAAS,IAAA;AAAA,IACzC,CAAC,qBAAqB,iBAAiB;AAAA,IACvC,YAAY;AACV,YAAM,EAAE,MAAAA,MAAAA,IAAS,MAAM,IAAI,oCAAoC;AAExDA,aAAAA;AAAAA,IACT;AAAA,IACA;AAAA,MACE,YAAY;AACV;AAAA,UACE,cAAc;AAAA,YACZ,IAAI,QAAQ,4BAA4B;AAAA,YACxC,gBAAgB;AAAA,UAAA,CACjB;AAAA,QAAA;AAAA,MAEL;AAAA,MACA,QAAQ,OAAO;AACM,2BAAA;AAAA,UACjB,MAAM;AAAA,UACN,SAAS,eAAe,KAAK;AAAA,QAAA,CAC9B;AAAA,MACH;AAAA,IACF;AAAA,EAAA;AAGF,QAAM,YAAY,2BAA2B;AAE7C,QAAM,eAAe,MAAM;AACV,mBAAA,CAAC,SAAS,CAAC,IAAI;AAAA,EAAA;AAG1B,QAAA,kBAAkB,CAAC,aAAa;AACpC,sBAAkB,QAAQ;AACb;EAAA;AAGf,QAAM,iBAAiB;AAAA,IACrB,CAAC,SAAS,IAAI,sCAAsC,EAAE,mBAAmB,MAAM;AAAA,IAC/E;AAAA,MACE,MAAM,YAAY;AAChB,cAAM,YAAY,kBAAkB,CAAC,qBAAqB,iBAAiB,CAAC;AAEzD,2BAAA;AAAA,UACjB,MAAM;AAAA,UACN,SAAS,EAAE,IAAI,8BAA8B,gBAAgB,QAAQ;AAAA,QAAA,CACtE;AAED,mBAAW,uBAAuB;AAExB;AACG;MACf;AAAA,MACA,QAAQ,OAAO;AACM,2BAAA;AAAA,UACjB,MAAM;AAAA,UACN,SAAS,eAAe,KAAK;AAAA,QAAA,CAC9B;AAES;MACZ;AAAA,MACA,eAAe;AAAA,IACjB;AAAA,EAAA;AAGI,QAAA,eAAe,CAAC,SAAS;AACrB;AAER,eAAW,wBAAwB;AAEnC,UAAM,kBAAkB,EAAE,GAAG,MAAM,CAAC,cAAc,GAAG,KAAK;AAC1D,mBAAe,OAAO,eAAe;AAAA,EAAA;AAGvC,MAAI,WAAW;AAEX,WAAA,qBAAC,MAAK,EAAA,aAAU,QACd,UAAA;AAAA,MAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAM,cAAc;AAAA,YAClB,IAAI,QAAQ,+BAA+B;AAAA,YAC3C,gBAAgB;AAAA,UAAA,CACjB;AAAA,QAAA;AAAA,MACH;AAAA,MACA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,OAAO,cAAc;AAAA,YACnB,IAAI,QAAQ,+BAA+B;AAAA,YAC3C,gBAAgB;AAAA,UAAA,CACjB;AAAA,QAAA;AAAA,MACH;AAAA,MACC,oBAAA,eAAA,EACC,UAAC,oBAAA,sBAAA,CAAqB,CAAA,GACxB;AAAA,IACF,EAAA,CAAA;AAAA,EAEJ;AAEA,SACG,qBAAA,MAAA,EAAK,aAAW,eAAe,WAC9B,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,MAAM,cAAc;AAAA,UAClB,IAAI,QAAQ,+BAA+B;AAAA,UAC3C,gBAAgB;AAAA,QAAA,CACjB;AAAA,MAAA;AAAA,IACH;AAAA,IACA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,OAAO,cAAc;AAAA,UACnB,IAAI,QAAQ,+BAA+B;AAAA,UAC3C,gBAAgB;AAAA,QAAA,CACjB;AAAA,MAAA;AAAA,IACH;AAAA,yBACC,eACC,EAAA,UAAA;AAAA,MAAC,oBAAA,YAAA,EAAW,aAAa,iBAAiB,UAAsB,CAAA;AAAA,MAC/D,eACC;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,UAAU,KAAK,cAAc;AAAA,UAC7B,UAAU;AAAA,UACV,UAAU;AAAA,QAAA;AAAA,MACZ;AAAA,IAAA,GAEJ;AAAA,EACF,EAAA,CAAA;AAEJ;"}