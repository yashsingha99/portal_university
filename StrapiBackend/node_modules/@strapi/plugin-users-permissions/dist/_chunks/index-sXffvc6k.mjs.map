{"version":3,"file":"index-sXffvc6k.mjs","sources":["../../admin/src/pages/AdvancedSettings/utils/layout.js","../../admin/src/pages/AdvancedSettings/utils/schema.js","../../admin/src/pages/AdvancedSettings/index.jsx"],"sourcesContent":["import { getTrad } from '../../../utils';\n\nconst layout = [\n  {\n    intlLabel: {\n      id: getTrad('EditForm.inputToggle.label.email'),\n      defaultMessage: 'One account per email address',\n    },\n    description: {\n      id: getTrad('EditForm.inputToggle.description.email'),\n      defaultMessage:\n        'Disallow the user to create multiple accounts using the same email address with different authentication providers.',\n    },\n    name: 'unique_email',\n    type: 'bool',\n    size: {\n      col: 12,\n      xs: 12,\n    },\n  },\n  {\n    intlLabel: {\n      id: getTrad('EditForm.inputToggle.label.sign-up'),\n      defaultMessage: 'Enable sign-ups',\n    },\n    description: {\n      id: getTrad('EditForm.inputToggle.description.sign-up'),\n      defaultMessage:\n        'When disabled (OFF), the registration process is forbidden. No one can subscribe anymore no matter the used provider.',\n    },\n    name: 'allow_register',\n    type: 'bool',\n    size: {\n      col: 12,\n      xs: 12,\n    },\n  },\n  {\n    intlLabel: {\n      id: getTrad('EditForm.inputToggle.label.email-reset-password'),\n      defaultMessage: 'Reset password page',\n    },\n    description: {\n      id: getTrad('EditForm.inputToggle.description.email-reset-password'),\n      defaultMessage: \"URL of your application's reset password page.\",\n    },\n    placeholder: {\n      id: getTrad('EditForm.inputToggle.placeholder.email-reset-password'),\n      defaultMessage: 'ex: https://youtfrontend.com/reset-password',\n    },\n    name: 'email_reset_password',\n    type: 'text',\n    size: {\n      col: 6,\n      xs: 12,\n    },\n  },\n  {\n    intlLabel: {\n      id: getTrad('EditForm.inputToggle.label.email-confirmation'),\n      defaultMessage: 'Enable email confirmation',\n    },\n    description: {\n      id: getTrad('EditForm.inputToggle.description.email-confirmation'),\n      defaultMessage: 'When enabled (ON), new registered users receive a confirmation email.',\n    },\n    name: 'email_confirmation',\n    type: 'bool',\n    size: {\n      col: 12,\n      xs: 12,\n    },\n  },\n  {\n    intlLabel: {\n      id: getTrad('EditForm.inputToggle.label.email-confirmation-redirection'),\n      defaultMessage: 'Redirection url',\n    },\n    description: {\n      id: getTrad('EditForm.inputToggle.description.email-confirmation-redirection'),\n      defaultMessage: 'After you confirmed your email, choose where you will be redirected.',\n    },\n    placeholder: {\n      id: getTrad('EditForm.inputToggle.placeholder.email-confirmation-redirection'),\n      defaultMessage: 'ex: https://youtfrontend.com/email-confirmation',\n    },\n    name: 'email_confirmation_redirection',\n    type: 'text',\n    size: {\n      col: 6,\n      xs: 12,\n    },\n  },\n];\n\nexport default layout;\n","import { translatedErrors } from '@strapi/helper-plugin';\nimport * as yup from 'yup';\n\n// eslint-disable-next-line prefer-regex-literals\nconst URL_REGEX = new RegExp('(^$)|((.+:\\\\/\\\\/.*)(d*)\\\\/?(.*))');\n\nconst schema = yup.object().shape({\n  email_confirmation_redirection: yup.mixed().when('email_confirmation', {\n    is: true,\n    then: yup.string().matches(URL_REGEX).required(),\n    otherwise: yup.string().nullable(),\n  }),\n  email_reset_password: yup\n    .string(translatedErrors.string)\n    .matches(URL_REGEX, translatedErrors.regex)\n    .nullable(),\n});\n\nexport default schema;\n","import React from 'react';\n\nimport {\n  Box,\n  Button,\n  ContentLayout,\n  Flex,\n  Grid,\n  GridItem,\n  HeaderLayout,\n  Main,\n  Option,\n  Select,\n  Typography,\n  useNotifyAT,\n} from '@strapi/design-system';\nimport {\n  CheckPagePermissions,\n  Form,\n  GenericInput,\n  LoadingIndicatorPage,\n  SettingsPageTitle,\n  useAPIErrorHandler,\n  useFetchClient,\n  useFocusWhenNavigate,\n  useNotification,\n  useOverlayBlocker,\n  useRBAC,\n} from '@strapi/helper-plugin';\nimport { Check } from '@strapi/icons';\nimport { Formik } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport layout from './utils/layout';\nimport schema from './utils/schema';\n\nconst ProtectedAdvancedSettingsPage = () => (\n  <CheckPagePermissions permissions={PERMISSIONS.readAdvancedSettings}>\n    <AdvancedSettingsPage />\n  </CheckPagePermissions>\n);\n\nconst AdvancedSettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const toggleNotification = useNotification();\n  const { lockApp, unlockApp } = useOverlayBlocker();\n  const { notifyStatus } = useNotifyAT();\n  const queryClient = useQueryClient();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  useFocusWhenNavigate();\n\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateAdvancedSettings });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'advanced'],\n    async () => {\n      const { data } = await get('/users-permissions/advanced');\n\n      return data;\n    },\n    {\n      onSuccess() {\n        notifyStatus(\n          formatMessage({\n            id: getTrad('Form.advancedSettings.data.loaded'),\n            defaultMessage: 'Advanced settings data has been loaded',\n          })\n        );\n      },\n      onError() {\n        toggleNotification({\n          type: 'warning',\n          message: { id: getTrad('notification.error'), defaultMessage: 'An error occured' },\n        });\n      },\n    }\n  );\n\n  const isLoading = isLoadingForPermissions || isLoadingData;\n\n  const submitMutation = useMutation((body) => put('/users-permissions/advanced', body), {\n    async onSuccess() {\n      await queryClient.invalidateQueries(['users-permissions', 'advanced']);\n\n      toggleNotification({\n        type: 'success',\n        message: { id: getTrad('notification.success.saved'), defaultMessage: 'Saved' },\n      });\n\n      unlockApp();\n    },\n    onError(error) {\n      toggleNotification({\n        type: 'warning',\n        message: formatAPIError(error),\n      });\n\n      unlockApp();\n    },\n    refetchActive: true,\n  });\n\n  const { isLoading: isSubmittingForm } = submitMutation;\n\n  const handleSubmit = async (body) => {\n    lockApp();\n\n    submitMutation.mutate({\n      ...body,\n      email_confirmation_redirection: body.email_confirmation\n        ? body.email_confirmation_redirection\n        : '',\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Main aria-busy=\"true\">\n        <SettingsPageTitle\n          name={formatMessage({\n            id: getTrad('HeaderNav.link.advancedSettings'),\n            defaultMessage: 'Advanced Settings',\n          })}\n        />\n        <HeaderLayout\n          title={formatMessage({\n            id: getTrad('HeaderNav.link.advancedSettings'),\n            defaultMessage: 'Advanced Settings',\n          })}\n        />\n        <ContentLayout>\n          <LoadingIndicatorPage />\n        </ContentLayout>\n      </Main>\n    );\n  }\n\n  return (\n    <Main aria-busy={isSubmittingForm}>\n      <SettingsPageTitle\n        name={formatMessage({\n          id: getTrad('HeaderNav.link.advancedSettings'),\n          defaultMessage: 'Advanced Settings',\n        })}\n      />\n      <Formik\n        onSubmit={handleSubmit}\n        initialValues={data.settings}\n        validateOnChange={false}\n        validationSchema={schema}\n        enableReinitialize\n      >\n        {({ errors, values, handleChange, isSubmitting, dirty }) => {\n          return (\n            <Form>\n              <HeaderLayout\n                title={formatMessage({\n                  id: getTrad('HeaderNav.link.advancedSettings'),\n                  defaultMessage: 'Advanced Settings',\n                })}\n                primaryAction={\n                  <Button\n                    loading={isSubmitting}\n                    type=\"submit\"\n                    disabled={canUpdate ? !dirty : !canUpdate}\n                    startIcon={<Check />}\n                    size=\"S\"\n                  >\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                }\n              />\n              <ContentLayout>\n                <Box\n                  background=\"neutral0\"\n                  hasRadius\n                  shadow=\"filterShadow\"\n                  paddingTop={6}\n                  paddingBottom={6}\n                  paddingLeft={7}\n                  paddingRight={7}\n                >\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                    <Typography variant=\"delta\" as=\"h2\">\n                      {formatMessage({\n                        id: 'global.settings',\n                        defaultMessage: 'Settings',\n                      })}\n                    </Typography>\n                    <Grid gap={6}>\n                      <GridItem col={6} s={12}>\n                        <Select\n                          label={formatMessage({\n                            id: getTrad('EditForm.inputSelect.label.role'),\n                            defaultMessage: 'Default role for authenticated users',\n                          })}\n                          value={values.default_role}\n                          hint={formatMessage({\n                            id: getTrad('EditForm.inputSelect.description.role'),\n                            defaultMessage:\n                              'It will attach the new authenticated user to the selected role.',\n                          })}\n                          onChange={(e) =>\n                            handleChange({ target: { name: 'default_role', value: e } })\n                          }\n                        >\n                          {data.roles.map((role) => {\n                            return (\n                              <Option key={role.type} value={role.type}>\n                                {role.name}\n                              </Option>\n                            );\n                          })}\n                        </Select>\n                      </GridItem>\n                      {layout.map((input) => {\n                        let value = values[input.name];\n\n                        if (!value) {\n                          value = input.type === 'bool' ? false : '';\n                        }\n\n                        return (\n                          <GridItem key={input.name} {...input.size}>\n                            <GenericInput\n                              {...input}\n                              value={value}\n                              error={errors[input.name]}\n                              disabled={\n                                input.name === 'email_confirmation_redirection' &&\n                                values.email_confirmation === false\n                              }\n                              onChange={handleChange}\n                            />\n                          </GridItem>\n                        );\n                      })}\n                    </Grid>\n                  </Flex>\n                </Box>\n              </ContentLayout>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Main>\n  );\n};\n\nexport default ProtectedAdvancedSettingsPage;\n"],"names":["data"],"mappings":";;;;;;;;;;;AAEA,MAAM,SAAS;AAAA,EACb;AAAA,IACE,WAAW;AAAA,MACT,IAAI,QAAQ,kCAAkC;AAAA,MAC9C,gBAAgB;AAAA,IACjB;AAAA,IACD,aAAa;AAAA,MACX,IAAI,QAAQ,wCAAwC;AAAA,MACpD,gBACE;AAAA,IACH;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,IAAI;AAAA,IACL;AAAA,EACF;AAAA,EACD;AAAA,IACE,WAAW;AAAA,MACT,IAAI,QAAQ,oCAAoC;AAAA,MAChD,gBAAgB;AAAA,IACjB;AAAA,IACD,aAAa;AAAA,MACX,IAAI,QAAQ,0CAA0C;AAAA,MACtD,gBACE;AAAA,IACH;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,IAAI;AAAA,IACL;AAAA,EACF;AAAA,EACD;AAAA,IACE,WAAW;AAAA,MACT,IAAI,QAAQ,iDAAiD;AAAA,MAC7D,gBAAgB;AAAA,IACjB;AAAA,IACD,aAAa;AAAA,MACX,IAAI,QAAQ,uDAAuD;AAAA,MACnE,gBAAgB;AAAA,IACjB;AAAA,IACD,aAAa;AAAA,MACX,IAAI,QAAQ,uDAAuD;AAAA,MACnE,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,IAAI;AAAA,IACL;AAAA,EACF;AAAA,EACD;AAAA,IACE,WAAW;AAAA,MACT,IAAI,QAAQ,+CAA+C;AAAA,MAC3D,gBAAgB;AAAA,IACjB;AAAA,IACD,aAAa;AAAA,MACX,IAAI,QAAQ,qDAAqD;AAAA,MACjE,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,IAAI;AAAA,IACL;AAAA,EACF;AAAA,EACD;AAAA,IACE,WAAW;AAAA,MACT,IAAI,QAAQ,2DAA2D;AAAA,MACvE,gBAAgB;AAAA,IACjB;AAAA,IACD,aAAa;AAAA,MACX,IAAI,QAAQ,iEAAiE;AAAA,MAC7E,gBAAgB;AAAA,IACjB;AAAA,IACD,aAAa;AAAA,MACX,IAAI,QAAQ,iEAAiE;AAAA,MAC7E,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,IAAI;AAAA,IACL;AAAA,EACF;AACH;ACzFA,MAAM,YAAY,IAAI,OAAO,kCAAkC;AAE/D,MAAM,SAAS,IAAI,OAAQ,EAAC,MAAM;AAAA,EAChC,gCAAgC,IAAI,QAAQ,KAAK,sBAAsB;AAAA,IACrE,IAAI;AAAA,IACJ,MAAM,IAAI,OAAM,EAAG,QAAQ,SAAS,EAAE,SAAU;AAAA,IAChD,WAAW,IAAI,OAAQ,EAAC,SAAU;AAAA,EACtC,CAAG;AAAA,EACD,sBAAsB,IACnB,OAAO,iBAAiB,MAAM,EAC9B,QAAQ,WAAW,iBAAiB,KAAK,EACzC,SAAU;AACf,CAAC;ACwBK,MAAA,gCAAgC,MACnC,oBAAA,sBAAA,EAAqB,aAAa,YAAY,sBAC7C,UAAC,oBAAA,sBAAA,CAAA,CAAqB,EACxB,CAAA;AAGF,MAAM,uBAAuB,MAAM;AAC3B,QAAA,EAAE,kBAAkB;AAC1B,QAAM,qBAAqB;AAC3B,QAAM,EAAE,SAAS,UAAU,IAAI,kBAAkB;AAC3C,QAAA,EAAE,iBAAiB;AACzB,QAAM,cAAc;AACpB,QAAM,EAAE,KAAK,IAAI,IAAI,eAAe;AAC9B,QAAA,EAAE,mBAAmB;AAEN;AAEf,QAAA;AAAA,IACJ,WAAW;AAAA,IACX,gBAAgB,EAAE,UAAU;AAAA,MAC1B,QAAQ,EAAE,QAAQ,YAAY,uBAAwB,CAAA;AAE1D,QAAM,EAAE,WAAW,eAAe,KAAS,IAAA;AAAA,IACzC,CAAC,qBAAqB,UAAU;AAAA,IAChC,YAAY;AACV,YAAM,EAAE,MAAAA,MAAAA,IAAS,MAAM,IAAI,6BAA6B;AAEjDA,aAAAA;AAAAA,IACT;AAAA,IACA;AAAA,MACE,YAAY;AACV;AAAA,UACE,cAAc;AAAA,YACZ,IAAI,QAAQ,mCAAmC;AAAA,YAC/C,gBAAgB;AAAA,UAAA,CACjB;AAAA,QAAA;AAAA,MAEL;AAAA,MACA,UAAU;AACW,2BAAA;AAAA,UACjB,MAAM;AAAA,UACN,SAAS,EAAE,IAAI,QAAQ,oBAAoB,GAAG,gBAAgB,mBAAmB;AAAA,QAAA,CAClF;AAAA,MACH;AAAA,IACF;AAAA,EAAA;AAGF,QAAM,YAAY,2BAA2B;AAE7C,QAAM,iBAAiB,YAAY,CAAC,SAAS,IAAI,+BAA+B,IAAI,GAAG;AAAA,IACrF,MAAM,YAAY;AAChB,YAAM,YAAY,kBAAkB,CAAC,qBAAqB,UAAU,CAAC;AAElD,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,EAAE,IAAI,QAAQ,4BAA4B,GAAG,gBAAgB,QAAQ;AAAA,MAAA,CAC/E;AAES;IACZ;AAAA,IACA,QAAQ,OAAO;AACM,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,eAAe,KAAK;AAAA,MAAA,CAC9B;AAES;IACZ;AAAA,IACA,eAAe;AAAA,EAAA,CAChB;AAEK,QAAA,EAAE,WAAW,iBAAqB,IAAA;AAElC,QAAA,eAAe,OAAO,SAAS;AAC3B;AAER,mBAAe,OAAO;AAAA,MACpB,GAAG;AAAA,MACH,gCAAgC,KAAK,qBACjC,KAAK,iCACL;AAAA,IAAA,CACL;AAAA,EAAA;AAGH,MAAI,WAAW;AAEX,WAAA,qBAAC,MAAK,EAAA,aAAU,QACd,UAAA;AAAA,MAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAM,cAAc;AAAA,YAClB,IAAI,QAAQ,iCAAiC;AAAA,YAC7C,gBAAgB;AAAA,UAAA,CACjB;AAAA,QAAA;AAAA,MACH;AAAA,MACA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,OAAO,cAAc;AAAA,YACnB,IAAI,QAAQ,iCAAiC;AAAA,YAC7C,gBAAgB;AAAA,UAAA,CACjB;AAAA,QAAA;AAAA,MACH;AAAA,MACC,oBAAA,eAAA,EACC,UAAC,oBAAA,sBAAA,CAAqB,CAAA,GACxB;AAAA,IACF,EAAA,CAAA;AAAA,EAEJ;AAGE,SAAA,qBAAC,MAAK,EAAA,aAAW,kBACf,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,MAAM,cAAc;AAAA,UAClB,IAAI,QAAQ,iCAAiC;AAAA,UAC7C,gBAAgB;AAAA,QAAA,CACjB;AAAA,MAAA;AAAA,IACH;AAAA,IACA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,UAAU;AAAA,QACV,eAAe,KAAK;AAAA,QACpB,kBAAkB;AAAA,QAClB,kBAAkB;AAAA,QAClB,oBAAkB;AAAA,QAEjB,WAAC,EAAE,QAAQ,QAAQ,cAAc,cAAc,YAAY;AAC1D,sCACG,MACC,EAAA,UAAA;AAAA,YAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,OAAO,cAAc;AAAA,kBACnB,IAAI,QAAQ,iCAAiC;AAAA,kBAC7C,gBAAgB;AAAA,gBAAA,CACjB;AAAA,gBACD,eACE;AAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,SAAS;AAAA,oBACT,MAAK;AAAA,oBACL,UAAU,YAAY,CAAC,QAAQ,CAAC;AAAA,oBAChC,+BAAY,OAAM,EAAA;AAAA,oBAClB,MAAK;AAAA,oBAEJ,wBAAc,EAAE,IAAI,eAAe,gBAAgB,QAAQ;AAAA,kBAAA;AAAA,gBAC9D;AAAA,cAAA;AAAA,YAEJ;AAAA,gCACC,eACC,EAAA,UAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,YAAW;AAAA,gBACX,WAAS;AAAA,gBACT,QAAO;AAAA,gBACP,YAAY;AAAA,gBACZ,eAAe;AAAA,gBACf,aAAa;AAAA,gBACb,cAAc;AAAA,gBAEd,+BAAC,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;AAAA,kBAAA,oBAAC,YAAW,EAAA,SAAQ,SAAQ,IAAG,MAC5B,UAAc,cAAA;AAAA,oBACb,IAAI;AAAA,oBACJ,gBAAgB;AAAA,kBACjB,CAAA,GACH;AAAA,kBACA,qBAAC,MAAK,EAAA,KAAK,GACT,UAAA;AAAA,oBAAA,oBAAC,UAAS,EAAA,KAAK,GAAG,GAAG,IACnB,UAAA;AAAA,sBAAC;AAAA,sBAAA;AAAA,wBACC,OAAO,cAAc;AAAA,0BACnB,IAAI,QAAQ,iCAAiC;AAAA,0BAC7C,gBAAgB;AAAA,wBAAA,CACjB;AAAA,wBACD,OAAO,OAAO;AAAA,wBACd,MAAM,cAAc;AAAA,0BAClB,IAAI,QAAQ,uCAAuC;AAAA,0BACnD,gBACE;AAAA,wBAAA,CACH;AAAA,wBACD,UAAU,CAAC,MACT,aAAa,EAAE,QAAQ,EAAE,MAAM,gBAAgB,OAAO,EAAE,GAAG;AAAA,wBAG5D,UAAK,KAAA,MAAM,IAAI,CAAC,SAAS;AAEtB,iCAAA,oBAAC,UAAuB,OAAO,KAAK,MACjC,UAAK,KAAA,KAAA,GADK,KAAK,IAElB;AAAA,wBAAA,CAEH;AAAA,sBAAA;AAAA,oBAAA,GAEL;AAAA,oBACC,OAAO,IAAI,CAAC,UAAU;AACjB,0BAAA,QAAQ,OAAO,MAAM,IAAI;AAE7B,0BAAI,CAAC,OAAO;AACF,gCAAA,MAAM,SAAS,SAAS,QAAQ;AAAA,sBAC1C;AAEA,6BACG,oBAAA,UAAA,EAA2B,GAAG,MAAM,MACnC,UAAA;AAAA,wBAAC;AAAA,wBAAA;AAAA,0BACE,GAAG;AAAA,0BACJ;AAAA,0BACA,OAAO,OAAO,MAAM,IAAI;AAAA,0BACxB,UACE,MAAM,SAAS,oCACf,OAAO,uBAAuB;AAAA,0BAEhC,UAAU;AAAA,wBAAA;AAAA,sBAAA,KATC,MAAM,IAWrB;AAAA,oBAAA,CAEH;AAAA,kBAAA,GACH;AAAA,gBAAA,GACF;AAAA,cAAA;AAAA,YAAA,GAEJ;AAAA,UACF,EAAA,CAAA;AAAA,QAEJ;AAAA,MAAA;AAAA,IACF;AAAA,EACF,EAAA,CAAA;AAEJ;"}