{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { join } from 'node:path';\nimport { Plop, run } from 'plop';\nimport nodePlop from 'node-plop';\n\n// Starts the Plop CLI programmatically\nexport const runCLI = () => {\n  Plop.launch({ configPath: join(__dirname, 'plopfile.js') }, (env) => {\n    const options = { ...env, dest: join(process.cwd(), 'src') };\n    run(options, undefined, true);\n  });\n};\n\n// Runs a generator programmatically without prompts\nexport const generate = async (\n  generatorName: string,\n  options: unknown,\n  { dir = process.cwd(), plopFile = 'plopfile.js' } = {}\n) => {\n  const plop = nodePlop(join(__dirname, plopFile), {\n    destBasePath: join(dir, 'src'),\n    force: false,\n  });\n\n  const generator = plop.getGenerator(generatorName);\n  await generator.runActions(options, {\n    onSuccess() {},\n    onFailure() {},\n    onComment() {},\n  });\n};\n"],"names":["Plop","join","run","plop","nodePlop"],"mappings":";;;;;;;AAKO,MAAM,SAAS,MAAM;AACrBA,YAAA,OAAO,EAAE,YAAYC,UAAAA,KAAK,WAAW,aAAa,KAAK,CAAC,QAAQ;AAC7D,UAAA,UAAU,EAAE,GAAG,KAAK,MAAMA,eAAK,QAAQ,IAAA,GAAO,KAAK;AACrDC,SAAAA,IAAA,SAAS,QAAW,IAAI;AAAA,EAAA,CAC7B;AACH;AAGO,MAAM,WAAW,OACtB,eACA,SACA,EAAE,MAAM,QAAQ,OAAO,WAAW,cAAc,IAAI,CAAA,MACjD;AACH,QAAMC,QAAOC,kBAAA,QAASH,UAAK,KAAA,WAAW,QAAQ,GAAG;AAAA,IAC/C,cAAcA,UAAAA,KAAK,KAAK,KAAK;AAAA,IAC7B,OAAO;AAAA,EAAA,CACR;AAEK,QAAA,YAAYE,MAAK,aAAa,aAAa;AAC3C,QAAA,UAAU,WAAW,SAAS;AAAA,IAClC,YAAY;AAAA,IAAC;AAAA,IACb,YAAY;AAAA,IAAC;AAAA,IACb,YAAY;AAAA,IAAC;AAAA,EAAA,CACd;AACH;;;"}