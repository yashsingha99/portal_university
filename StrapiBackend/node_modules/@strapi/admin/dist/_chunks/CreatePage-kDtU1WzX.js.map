{"version":3,"file":"CreatePage-kDtU1WzX.js","sources":["../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/CreatePage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Button, Flex, Loader, Typography } from '@strapi/design-system';\nimport { ConfirmDialog, useAPIErrorHandler, useNotification } from '@strapi/helper-plugin';\nimport { Check } from '@strapi/icons';\nimport { useFormik, Form, FormikProvider, FormikErrors } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { useAdminRoles } from '../../../../../../../admin/src/hooks/useAdminRoles';\nimport { useContentTypes } from '../../../../../../../admin/src/hooks/useContentTypes';\nimport { useInjectReducer } from '../../../../../../../admin/src/hooks/useInjectReducer';\nimport { isBaseQueryError } from '../../../../../../../admin/src/utils/baseQuery';\nimport { useLicenseLimits } from '../../../../hooks/useLicenseLimits';\n\nimport {\n  addStage,\n  resetWorkflow,\n  setContentTypes,\n  setIsLoading,\n  setRoles,\n  setWorkflows,\n} from './actions';\nimport * as Layout from './components/Layout';\nimport { LimitsModal } from './components/LimitsModal';\nimport { Stages } from './components/Stages';\nimport { WorkflowAttributes } from './components/WorkflowAttributes';\nimport {\n  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,\n  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,\n  REDUX_NAMESPACE,\n} from './constants';\nimport { useReviewWorkflows } from './hooks/useReviewWorkflows';\nimport { CurrentWorkflow, reducer } from './reducer';\nimport {\n  selectIsLoading,\n  selectIsWorkflowDirty,\n  selectCurrentWorkflow,\n  selectRoles,\n} from './selectors';\nimport { validateWorkflow } from './utils/validateWorkflow';\n\nexport const ReviewWorkflowsCreatePage = () => {\n  const { formatMessage } = useIntl();\n  const { push } = useHistory();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const dispatch = useDispatch();\n  const toggleNotification = useNotification();\n  const { collectionTypes, singleTypes, isLoading: isLoadingContentTypes } = useContentTypes();\n  const { isLoading: isLoadingWorkflow, meta, workflows, createWorkflow } = useReviewWorkflows();\n  const { isLoading: isLoadingRoles, roles: serverRoles } = useAdminRoles();\n  const isLoading = useSelector(selectIsLoading);\n  const currentWorkflowIsDirty = useSelector(selectIsWorkflowDirty);\n  const currentWorkflow = useSelector(selectCurrentWorkflow);\n  const roles = useSelector(selectRoles);\n  const [showLimitModal, setShowLimitModal] = React.useState<'workflow' | 'stage' | null>(null);\n  const { isLoading: isLicenseLoading, getFeature } = useLicenseLimits();\n  const [initialErrors, setInitialErrors] = React.useState<FormikErrors<CurrentWorkflow>>();\n  const [savePrompts, setSavePrompts] = React.useState<{ hasReassignedContentTypes?: boolean }>({});\n\n  const limits = getFeature<string>('review-workflows');\n  const numberOfWorkflows = limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME];\n  const stagesPerWorkflow = limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME];\n  const contentTypesFromOtherWorkflows = workflows?.flatMap((workflow) => workflow.contentTypes);\n\n  const submitForm = async () => {\n    setSavePrompts({});\n\n    try {\n      const res = await createWorkflow({\n        // @ts-expect-error – currentWorkflow will have already been validated by formik before it gets here.\n        data: currentWorkflow,\n      });\n\n      if ('error' in res) {\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          setInitialErrors(formatValidationErrors(res.error));\n        }\n\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(res.error),\n        });\n\n        return;\n      }\n\n      toggleNotification({\n        type: 'success',\n        message: {\n          id: 'Settings.review-workflows.create.page.notification.success',\n          defaultMessage: 'Workflow successfully created',\n        },\n      });\n\n      push(`/settings/review-workflows/${res.data.id}`);\n    } catch (error) {\n      toggleNotification({\n        type: 'warning',\n        message: {\n          id: 'Settings.review-workflows.create.page.notification.error',\n          defaultMessage: 'An error occurred',\n        },\n      });\n    }\n  };\n\n  const handleConfirmDeleteDialog = async () => {\n    await submitForm();\n  };\n\n  const handleConfirmClose = () => {\n    setSavePrompts({});\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialErrors,\n    initialValues: currentWorkflow,\n    async onSubmit() {\n      const isContentTypeReassignment = currentWorkflow.contentTypes?.some((contentType) =>\n        contentTypesFromOtherWorkflows?.includes(contentType)\n      );\n\n      /**\n       * If the current license has a limit, check if the total count of workflows\n       * exceeds that limit and display the limits modal instead of sending the\n       * update, because it would throw an API error.\n       */\n\n      if (meta && numberOfWorkflows && meta?.workflowCount >= parseInt(numberOfWorkflows, 10)) {\n        setShowLimitModal('workflow');\n\n        /**\n         * If the current license has a limit, check if the total count of stages\n         * exceeds that limit and display the limits modal instead of sending the\n         * update, because it would throw an API error.\n         */\n      } else if (\n        currentWorkflow.stages &&\n        stagesPerWorkflow &&\n        currentWorkflow.stages.length >= parseInt(stagesPerWorkflow, 10)\n      ) {\n        setShowLimitModal('stage');\n      } else if (isContentTypeReassignment) {\n        setSavePrompts((prev) => ({ ...prev, hasReassignedContentTypes: true }));\n      } else {\n        submitForm();\n      }\n    },\n    validate(values) {\n      return validateWorkflow({ values, formatMessage });\n    },\n  });\n\n  useInjectReducer(REDUX_NAMESPACE, reducer);\n\n  React.useEffect(() => {\n    dispatch(resetWorkflow());\n\n    if (!isLoadingWorkflow && workflows) {\n      dispatch(setWorkflows({ workflows }));\n    }\n\n    if (!isLoadingContentTypes) {\n      dispatch(setContentTypes({ collectionTypes, singleTypes }));\n    }\n\n    if (!isLoadingRoles) {\n      dispatch(setRoles(serverRoles));\n    }\n\n    dispatch(setIsLoading(isLoadingContentTypes || isLoadingRoles));\n\n    // Create an empty default stage\n    dispatch(\n      addStage({\n        name: '',\n      })\n    );\n  }, [\n    collectionTypes,\n    dispatch,\n    isLoadingContentTypes,\n    isLoadingRoles,\n    isLoadingWorkflow,\n    serverRoles,\n    singleTypes,\n    workflows,\n  ]);\n\n  /**\n   * If the current license has a limit:\n   * check if the total count of workflows or stages exceeds that limit and display\n   * the limits modal on page load. It can be closed by the user, but the\n   * API will throw an error in case they try to create a new workflow or update the\n   * stages.\n   *\n   * If the current license does not have a limit (e.g. offline license):\n   * do nothing (for now). In case they are trying to create the 201st workflow/ stage\n   * the API will throw an error.\n   *\n   */\n  React.useEffect(() => {\n    if (!isLoadingWorkflow && !isLicenseLoading) {\n      if (\n        currentWorkflow.stages &&\n        limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME] &&\n        stagesPerWorkflow &&\n        currentWorkflow.stages.length >= parseInt(stagesPerWorkflow, 10)\n      ) {\n        setShowLimitModal('stage');\n      }\n    }\n  }, [isLicenseLoading, isLoadingWorkflow, limits, currentWorkflow.stages, stagesPerWorkflow]);\n\n  React.useEffect(() => {\n    if (!isLoading && roles?.length === 0) {\n      toggleNotification({\n        blockTransition: true,\n        type: 'warning',\n        message: formatMessage({\n          id: 'Settings.review-workflows.stage.permissions.noPermissions.description',\n          defaultMessage: 'You don’t have the permission to see roles',\n        }),\n      });\n    }\n  }, [formatMessage, isLoading, roles, toggleNotification]);\n\n  return (\n    <>\n      <Layout.DragLayerRendered />\n      <FormikProvider value={formik}>\n        <Form onSubmit={formik.handleSubmit}>\n          <Layout.Header\n            navigationAction={<Layout.Back href=\"/settings/review-workflows\" />}\n            primaryAction={\n              <Button\n                startIcon={<Check />}\n                type=\"submit\"\n                size=\"M\"\n                disabled={!currentWorkflowIsDirty}\n              >\n                {formatMessage({\n                  id: 'global.save',\n                  defaultMessage: 'Save',\n                })}\n              </Button>\n            }\n            title={formatMessage({\n              id: 'Settings.review-workflows.create.page.title',\n              defaultMessage: 'Create Review Workflow',\n            })}\n            subtitle={formatMessage(\n              {\n                id: 'Settings.review-workflows.page.subtitle',\n                defaultMessage: '{count, plural, one {# stage} other {# stages}}',\n              },\n              { count: currentWorkflow?.stages?.length ?? 0 }\n            )}\n          />\n          <Layout.Root>\n            <Flex alignItems=\"stretch\" direction=\"column\" gap={7}>\n              {isLoading ? (\n                <Loader>\n                  {formatMessage({\n                    id: 'Settings.review-workflows.page.isLoading',\n                    defaultMessage: 'Workflow is loading',\n                  })}\n                </Loader>\n              ) : (\n                <Flex alignItems=\"stretch\" direction=\"column\" gap={7}>\n                  <WorkflowAttributes />\n                  <Stages stages={formik.values?.stages} />\n                </Flex>\n              )}\n            </Flex>\n          </Layout.Root>\n        </Form>\n      </FormikProvider>\n\n      <ConfirmDialog.Root\n        isConfirmButtonLoading={isLoading}\n        isOpen={Object.keys(savePrompts).length > 0}\n        onToggleDialog={handleConfirmClose}\n        onConfirm={handleConfirmDeleteDialog}\n      >\n        <ConfirmDialog.Body>\n          <Flex direction=\"column\" gap={5}>\n            {savePrompts.hasReassignedContentTypes && (\n              <Typography textAlign=\"center\" variant=\"omega\">\n                {formatMessage(\n                  {\n                    id: 'Settings.review-workflows.page.delete.confirm.contentType.body',\n                    defaultMessage:\n                      '{count} {count, plural, one {content-type} other {content-types}} {count, plural, one {is} other {are}} already mapped to {count, plural, one {another workflow} other {other workflows}}. If you save changes, {count, plural, one {this} other {these}} {count, plural, one {content-type} other {{count} content-types}} will no more be mapped to the {count, plural, one {another workflow} other {other workflows}} and all corresponding information will be removed.',\n                  },\n                  {\n                    count: contentTypesFromOtherWorkflows?.filter((contentType) =>\n                      currentWorkflow.contentTypes?.includes(contentType)\n                    ).length,\n                  }\n                )}\n              </Typography>\n            )}\n\n            <Typography textAlign=\"center\" variant=\"omega\">\n              {formatMessage({\n                id: 'Settings.review-workflows.page.delete.confirm.confirm',\n                defaultMessage: 'Are you sure you want to save?',\n              })}\n            </Typography>\n          </Flex>\n        </ConfirmDialog.Body>\n      </ConfirmDialog.Root>\n\n      <LimitsModal.Root\n        isOpen={showLimitModal === 'workflow'}\n        onClose={() => setShowLimitModal(null)}\n      >\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'Settings.review-workflows.create.page.workflows.limit.title',\n            defaultMessage: 'You’ve reached the limit of workflows in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'Settings.review-workflows.create.page.workflows.limit.body',\n            defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n\n      <LimitsModal.Root isOpen={showLimitModal === 'stage'} onClose={() => setShowLimitModal(null)}>\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'Settings.review-workflows.create.page.stages.limit.title',\n            defaultMessage: 'You have reached the limit of stages for this workflow in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'Settings.review-workflows.create.page.stages.limit.body',\n            defaultMessage: 'Try deleting some stages or contact Sales to enable more stages.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n    </>\n  );\n};\n"],"names":["useIntl","useHistory","useAPIErrorHandler","useDispatch","useNotification","useContentTypes","useReviewWorkflows","useAdminRoles","useSelector","selectIsLoading","selectIsWorkflowDirty","selectCurrentWorkflow","selectRoles","React","useLicenseLimits","CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME","CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME","isBaseQueryError","formik","useFormik","validateWorkflow","useInjectReducer","REDUX_NAMESPACE","reducer","resetWorkflow","setWorkflows","setContentTypes","setRoles","setIsLoading","addStage","jsxs","Fragment","jsx","Layout.DragLayerRendered","FormikProvider","Form","Layout.Header","Layout.Back","Button","Check","Layout.Root","Flex","Loader","WorkflowAttributes","Stages","ConfirmDialog","Typography","LimitsModal"],"mappings":"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"}