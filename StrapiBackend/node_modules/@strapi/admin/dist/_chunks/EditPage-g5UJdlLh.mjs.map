{"version":3,"file":"EditPage-g5UJdlLh.mjs","sources":["../../admin/src/pages/Settings/pages/Webhooks/components/Events.tsx","../../admin/src/pages/Settings/pages/Webhooks/components/EventsTable.tsx","../../admin/src/pages/Settings/pages/Webhooks/components/HeadersInput.tsx","../../admin/src/pages/Settings/pages/Webhooks/components/TriggerContainer.tsx","../../admin/src/pages/Settings/pages/Webhooks/components/WebhookForm.tsx","../../admin/src/pages/Settings/pages/Webhooks/EditPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { createContext } from '@radix-ui/react-context';\nimport {\n  BaseCheckbox,\n  Checkbox,\n  FieldLabel,\n  Flex,\n  Loader,\n  RawTable as Table,\n  RawTbody as Tbody,\n  RawTd as Td,\n  RawTh as Th,\n  RawThead as Thead,\n  RawTr as Tr,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { useFormikContext, FieldInputProps } from 'formik';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { useContentTypes } from '../../../../../hooks/useContentTypes';\n\n/* -------------------------------------------------------------------------------------------------\n * EventsRoot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface WebhookEventContextValue {\n  isDraftAndPublish: boolean;\n}\n\nconst [WebhookEventProvider, useWebhookEvent] =\n  createContext<WebhookEventContextValue>('WebhookEvent');\n\ninterface EventsRootProps {\n  children: React.ReactNode;\n}\n\nconst EventsRoot = ({ children }: EventsRootProps) => {\n  const { formatMessage } = useIntl();\n  const { collectionTypes, isLoading } = useContentTypes();\n\n  const isDraftAndPublish = React.useMemo(\n    () => collectionTypes.some((ct) => ct.options?.draftAndPublish === true),\n    [collectionTypes]\n  );\n\n  const label = formatMessage({\n    id: 'Settings.webhooks.form.events',\n    defaultMessage: 'Events',\n  });\n\n  return (\n    <WebhookEventProvider isDraftAndPublish={isDraftAndPublish}>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n        <FieldLabel aria-hidden>{label}</FieldLabel>\n        {isLoading && (\n          <Loader>\n            {formatMessage({\n              id: 'Settings.webhooks.events.isLoading',\n              defaultMessage: 'Events loading',\n            })}\n          </Loader>\n        )}\n        <StyledTable aria-label={label}>{children}</StyledTable>\n      </Flex>\n    </WebhookEventProvider>\n  );\n};\n\n// TODO check whether we want to move alternating background colour tables to the design system\nconst StyledTable = styled(Table)`\n  tbody tr:nth-child(odd) {\n    background: ${({ theme }) => theme.colors.neutral100};\n  }\n\n  thead th span {\n    color: ${({ theme }) => theme.colors.neutral500};\n  }\n\n  td,\n  th {\n    padding-block-start: ${({ theme }) => theme.spaces[3]};\n    padding-block-end: ${({ theme }) => theme.spaces[3]};\n    width: 10%;\n    vertical-align: middle;\n    text-align: center;\n  }\n\n  tbody tr td:first-child {\n    /**\n     * Add padding to the start of the first column to avoid the checkbox appearing\n     * too close to the edge of the table\n     */\n    padding-inline-start: ${({ theme }) => theme.spaces[2]};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * EventsHeaders\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsHeadersProps {\n  getHeaders?: typeof getCEHeaders;\n}\n\nconst getCEHeaders = (isDraftAndPublish: boolean): MessageDescriptor[] => {\n  const headers = [\n    { id: 'Settings.webhooks.events.create', defaultMessage: 'Create' },\n    { id: 'Settings.webhooks.events.update', defaultMessage: 'Update' },\n    { id: 'app.utils.delete', defaultMessage: 'Delete' },\n  ];\n\n  if (isDraftAndPublish) {\n    headers.push({ id: 'app.utils.publish', defaultMessage: 'Publish' });\n    headers.push({ id: 'app.utils.unpublish', defaultMessage: 'Unpublish' });\n  }\n\n  return headers;\n};\n\nconst EventsHeaders = ({ getHeaders = getCEHeaders }: EventsHeadersProps) => {\n  const { isDraftAndPublish } = useWebhookEvent('Headers');\n\n  const { formatMessage } = useIntl();\n  const headers = getHeaders(isDraftAndPublish);\n\n  return (\n    <Thead>\n      <Tr>\n        <Th>\n          <VisuallyHidden>\n            {formatMessage({\n              id: 'Settings.webhooks.event.select',\n              defaultMessage: 'Select event',\n            })}\n          </VisuallyHidden>\n        </Th>\n        {headers.map((header) => {\n          if (['app.utils.publish', 'app.utils.unpublish'].includes(header?.id ?? '')) {\n            return (\n              <Th\n                key={header.id}\n                title={formatMessage({\n                  id: 'Settings.webhooks.event.publish-tooltip',\n                  defaultMessage: 'This event only exists for content with draft & publish enabled',\n                })}\n              >\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\n                  {formatMessage(header)}\n                </Typography>\n              </Th>\n            );\n          }\n\n          return (\n            <Th key={header.id}>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage(header)}\n              </Typography>\n            </Th>\n          );\n        })}\n      </Tr>\n    </Thead>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EventsBody\n * -----------------------------------------------------------------------------------------------*/\ninterface FormikContextValue {\n  events: string[];\n}\n\ninterface EventsBodyProps {\n  providedEvents?: Record<string, FormikContextValue['events']>;\n}\n\nconst EventsBody = ({ providedEvents }: EventsBodyProps) => {\n  const { isDraftAndPublish } = useWebhookEvent('Body');\n\n  const events = providedEvents || getCEEvents(isDraftAndPublish);\n  const { values, handleChange: onChange } = useFormikContext<FormikContextValue>();\n\n  const inputName = 'events';\n  const inputValue = values.events;\n  const disabledEvents: string[] = [];\n\n  const formattedValue = inputValue.reduce<Record<string, string[]>>((acc, curr) => {\n    const key = curr.split('.')[0];\n\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(curr);\n\n    return acc;\n  }, {});\n\n  const handleSelect: React.ChangeEventHandler<HTMLInputElement> = ({\n    target: { name, value },\n  }) => {\n    const set = new Set(inputValue);\n\n    if (value) {\n      set.add(name);\n    } else {\n      set.delete(name);\n    }\n    onChange({ target: { name: inputName, value: Array.from(set) } });\n  };\n\n  const handleSelectAll: React.ChangeEventHandler<HTMLInputElement> = ({\n    target: { name, value },\n  }) => {\n    const set = new Set(inputValue);\n\n    if (value) {\n      events[name].forEach((event) => {\n        if (!disabledEvents.includes(event)) {\n          set.add(event);\n        }\n      });\n    } else {\n      events[name].forEach((event) => set.delete(event));\n    }\n    onChange({ target: { name: inputName, value: Array.from(set) } });\n  };\n\n  return (\n    <Tbody>\n      {Object.entries(events).map(([event, value]) => {\n        return (\n          <EventsRow\n            disabledEvents={disabledEvents}\n            key={event}\n            name={event}\n            events={value}\n            inputValue={formattedValue[event]}\n            handleSelect={handleSelect}\n            handleSelectAll={handleSelectAll}\n          />\n        );\n      })}\n    </Tbody>\n  );\n};\n\nconst getCEEvents = (\n  isDraftAndPublish: boolean\n): Required<Pick<EventsBodyProps, 'providedEvents'>>['providedEvents'] => {\n  const entryEvents: FormikContextValue['events'] = [\n    'entry.create',\n    'entry.update',\n    'entry.delete',\n  ];\n\n  if (isDraftAndPublish) {\n    entryEvents.push('entry.publish', 'entry.unpublish');\n  }\n\n  return {\n    entry: entryEvents,\n    media: ['media.create', 'media.update', 'media.delete'],\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EventsRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsRowProps {\n  disabledEvents?: string[];\n  events?: string[];\n  inputValue?: string[];\n  handleSelect: FieldInputProps<string>['onChange'];\n  handleSelectAll: FieldInputProps<string>['onChange'];\n  name: string;\n}\n\nconst EventsRow = ({\n  disabledEvents = [],\n  name,\n  events = [],\n  inputValue = [],\n  handleSelect,\n  handleSelectAll,\n}: EventsRowProps) => {\n  const { formatMessage } = useIntl();\n  const enabledCheckboxes = events.filter((event) => !disabledEvents.includes(event));\n\n  const hasSomeCheckboxSelected = inputValue.length > 0;\n  const areAllCheckboxesSelected = inputValue.length === enabledCheckboxes.length;\n\n  const onChangeAll: React.ChangeEventHandler<HTMLInputElement> = ({ target: { name } }) => {\n    const valueToSet = !areAllCheckboxesSelected;\n\n    handleSelectAll({\n      target: { name, value: valueToSet },\n    });\n  };\n\n  const targetColumns = 5;\n\n  return (\n    <Tr>\n      <Td>\n        <Checkbox\n          indeterminate={hasSomeCheckboxSelected && !areAllCheckboxesSelected}\n          aria-label={formatMessage({\n            id: 'global.select-all-entries',\n            defaultMessage: 'Select all entries',\n          })}\n          name={name}\n          onChange={onChangeAll}\n          value={areAllCheckboxesSelected}\n        >\n          {removeHyphensAndTitleCase(name)}\n        </Checkbox>\n      </Td>\n\n      {events.map((event) => {\n        return (\n          <Td key={event}>\n            <BaseCheckbox\n              disabled={disabledEvents.includes(event)}\n              aria-label={event}\n              name={event}\n              value={inputValue.includes(event)}\n              onValueChange={(value) => handleSelect({ target: { name: event, value } })}\n            />\n          </Td>\n        );\n      })}\n      {events.length < targetColumns && <Td colSpan={targetColumns - events.length} />}\n    </Tr>\n  );\n};\n\n/**\n * Converts a string to title case and removes hyphens.\n */\nconst removeHyphensAndTitleCase = (str: string): string =>\n  str\n    .replace(/-/g, ' ')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n\nconst Events = { Root: EventsRoot, Headers: EventsHeaders, Body: EventsBody, Row: EventsRow };\n\nexport { Events };\nexport type { EventsRowProps, EventsHeadersProps, EventsRootProps, EventsBodyProps };\n","import { Events } from './Events';\n\nconst EventTableCE = () => {\n  return (\n    <Events.Root>\n      <Events.Headers />\n      <Events.Body />\n    </Events.Root>\n  );\n};\n\nexport { EventTableCE };\n","import * as React from 'react';\n\nimport {\n  Box,\n  FieldLabel,\n  Flex,\n  Grid,\n  GridItem,\n  TextButton,\n  TextInput,\n  ComboboxOption,\n  CreatableCombobox,\n  ComboboxProps,\n} from '@strapi/design-system';\nimport { RemoveRoundedButton } from '@strapi/helper-plugin';\nimport { Plus } from '@strapi/icons';\nimport { Field, FieldArray, FieldInputProps, useFormikContext } from 'formik';\nimport { useIntl } from 'react-intl';\n\n/* -------------------------------------------------------------------------------------------------\n * HeadersInput\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FormikContext {\n  headers: Array<{ key: HTTPHeaders; value: string }>;\n}\n\nconst HeadersInput = () => {\n  const { formatMessage } = useIntl();\n  const { values, errors } = useFormikContext<FormikContext>();\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n      <FieldLabel>\n        {formatMessage({\n          id: 'Settings.webhooks.form.headers',\n          defaultMessage: 'Headers',\n        })}\n      </FieldLabel>\n      <Box padding={8} background=\"neutral100\" hasRadius>\n        <FieldArray\n          validateOnChange={false}\n          name=\"headers\"\n          render={({ push, remove }) => (\n            <Grid gap={4}>\n              {values.headers.map((header, index) => {\n                const formikError = errors.headers?.[index];\n\n                const comboboxError = typeof formikError === 'object' ? formikError.key : undefined;\n                const textInputError =\n                  typeof formikError === 'object' ? formikError.value : undefined;\n\n                return (\n                  <React.Fragment key={`${index}.${header.key}`}>\n                    <GridItem col={6}>\n                      <Field\n                        as={HeaderCombobox}\n                        name={`headers.${index}.key`}\n                        aria-label={`row ${index + 1} key`}\n                        label={formatMessage({\n                          id: 'Settings.webhooks.key',\n                          defaultMessage: 'Key',\n                        })}\n                        error={comboboxError}\n                      />\n                    </GridItem>\n                    <GridItem col={6}>\n                      <Flex alignItems=\"flex-end\">\n                        <Box style={{ flex: 1 }}>\n                          <Field\n                            as={TextInput}\n                            name={`headers.${index}.value`}\n                            aria-label={`row ${index + 1} value`}\n                            label={formatMessage({\n                              id: 'Settings.webhooks.value',\n                              defaultMessage: 'Value',\n                            })}\n                            error={textInputError}\n                          />\n                        </Box>\n                        <Flex\n                          paddingLeft={2}\n                          style={{ alignSelf: 'center' }}\n                          paddingTop={textInputError ? 0 : 5}\n                        >\n                          <RemoveRoundedButton\n                            disabled={values.headers.length === 1}\n                            onClick={() => remove(index)}\n                            label={formatMessage(\n                              {\n                                id: 'Settings.webhooks.headers.remove',\n                                defaultMessage: 'Remove header row {number}',\n                              },\n                              { number: index + 1 }\n                            )}\n                          />\n                        </Flex>\n                      </Flex>\n                    </GridItem>\n                  </React.Fragment>\n                );\n              })}\n              <GridItem col={12}>\n                <TextButton\n                  type=\"button\"\n                  onClick={() => {\n                    push({ key: '', value: '' });\n                  }}\n                  startIcon={<Plus />}\n                >\n                  {formatMessage({\n                    id: 'Settings.webhooks.create.header',\n                    defaultMessage: 'Create new header',\n                  })}\n                </TextButton>\n              </GridItem>\n            </Grid>\n          )}\n        />\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderCombobox\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderComboboxProps\n  extends FieldInputProps<string>,\n    Required<Pick<ComboboxProps, 'label' | 'error'>> {}\n\nconst HeaderCombobox = ({ name, onChange, value, ...restProps }: HeaderComboboxProps) => {\n  const {\n    values: { headers },\n  } = useFormikContext<FormikContext>();\n  const [options, setOptions] = React.useState<HTTPHeaders[]>([...HTTP_HEADERS]);\n\n  React.useEffect(() => {\n    const headerOptions = HTTP_HEADERS.filter(\n      (key) => !headers?.some((header) => header.key !== value && header.key === key)\n    );\n\n    setOptions(headerOptions);\n  }, [headers, value]);\n\n  const handleChange: ComboboxProps['onChange'] = (value) => {\n    onChange({ target: { name, value } });\n  };\n\n  const handleCreateOption = (value: string) => {\n    setOptions((prev) => [...prev, value as HTTPHeaders]);\n\n    handleChange(value);\n  };\n\n  return (\n    <CreatableCombobox\n      {...restProps}\n      onClear={() => handleChange('')}\n      onChange={handleChange}\n      onCreateOption={handleCreateOption}\n      placeholder=\"\"\n      value={value}\n    >\n      {options.map((key) => (\n        <ComboboxOption value={key} key={key}>\n          {key}\n        </ComboboxOption>\n      ))}\n    </CreatableCombobox>\n  );\n};\n\nconst HTTP_HEADERS = [\n  'A-IM',\n  'Accept',\n  'Accept-Charset',\n  'Accept-Encoding',\n  'Accept-Language',\n  'Accept-Datetime',\n  'Access-Control-Request-Method',\n  'Access-Control-Request-Headers',\n  'Authorization',\n  'Cache-Control',\n  'Connection',\n  'Content-Length',\n  'Content-Type',\n  'Cookie',\n  'Date',\n  'Expect',\n  'Forwarded',\n  'From',\n  'Host',\n  'If-Match',\n  'If-Modified-Since',\n  'If-None-Match',\n  'If-Range',\n  'If-Unmodified-Since',\n  'Max-Forwards',\n  'Origin',\n  'Pragma',\n  'Proxy-Authorization',\n  'Range',\n  'Referer',\n  'TE',\n  'User-Agent',\n  'Upgrade',\n  'Via',\n  'Warning',\n] as const;\n\ntype HTTPHeaders = (typeof HTTP_HEADERS)[number];\n\nexport { HeadersInput };\n","import { Box, Flex, Grid, GridItem, Typography } from '@strapi/design-system';\nimport { pxToRem } from '@strapi/helper-plugin';\nimport { Check, Cross, Loader } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport styled, { DefaultTheme, css } from 'styled-components';\n\n/* -------------------------------------------------------------------------------------------------\n * TriggerContainer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TriggerContainerProps extends Pick<StatusProps, 'isPending'> {\n  onCancel: () => void;\n  response?: {\n    statusCode: number;\n    message?: string;\n  };\n}\n\nconst TriggerContainer = ({ isPending, onCancel, response }: TriggerContainerProps) => {\n  const { statusCode, message } = response ?? {};\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box background=\"neutral0\" padding={5} shadow=\"filterShadow\" hasRadius>\n      <Grid gap={4} style={{ alignItems: 'center' }}>\n        <GridItem col={3}>\n          <Typography>\n            {formatMessage({\n              id: 'Settings.webhooks.trigger.test',\n              defaultMessage: 'Test-trigger',\n            })}\n          </Typography>\n        </GridItem>\n        <GridItem col={3}>\n          <Status isPending={isPending} statusCode={statusCode} />\n        </GridItem>\n        <GridItem col={6}>\n          {!isPending ? (\n            <Message statusCode={statusCode} message={message} />\n          ) : (\n            <Flex justifyContent=\"flex-end\">\n              <button onClick={onCancel} type=\"button\">\n                <Flex gap={2} alignItems=\"center\">\n                  <Typography textColor=\"neutral400\">\n                    {formatMessage({\n                      id: 'Settings.webhooks.trigger.cancel',\n                      defaultMessage: 'cancel',\n                    })}\n                  </Typography>\n                  <Icon as={Cross} color=\"neutral400\" />\n                </Flex>\n              </button>\n            </Flex>\n          )}\n        </GridItem>\n      </Grid>\n    </Box>\n  );\n};\n\nconst Icon = styled.svg<{ color?: keyof DefaultTheme['colors'] }>(\n  ({ theme, color }) => `\n  width: ${12 / 16}rem;\n  height: ${12 / 16}rem;\n\n\n  ${\n    color\n      ? css`\n          path {\n            fill: ${theme.colors[color]};\n          }\n        `\n      : ''\n  }\n`\n);\n\n/* -------------------------------------------------------------------------------------------------\n * Status\n * -----------------------------------------------------------------------------------------------*/\n\ninterface StatusProps {\n  isPending: boolean;\n  statusCode?: number;\n}\n\nconst Status = ({ isPending, statusCode }: StatusProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isPending || !statusCode) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Icon as={Loader} />\n        <Typography>\n          {formatMessage({ id: 'Settings.webhooks.trigger.pending', defaultMessage: 'pending' })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Icon as={Check} color=\"success700\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.webhooks.trigger.success', defaultMessage: 'success' })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 300) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Icon as={Cross} color=\"danger700\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.error', defaultMessage: 'error' })} {statusCode}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  return null;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Message\n * -----------------------------------------------------------------------------------------------*/\n\ninterface MessageProps {\n  statusCode?: number;\n  message?: string;\n}\n\nconst Message = ({ statusCode, message }: MessageProps) => {\n  const { formatMessage } = useIntl();\n\n  if (!statusCode) {\n    return null;\n  }\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <Typography textColor=\"neutral600\" ellipsis>\n          {formatMessage({\n            id: 'Settings.webhooks.trigger.success.label',\n            defaultMessage: 'Trigger succeeded',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 300) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <Flex maxWidth={pxToRem(250)} justifyContent=\"flex-end\" title={message}>\n          <Typography ellipsis textColor=\"neutral600\">\n            {message}\n          </Typography>\n        </Flex>\n      </Flex>\n    );\n  }\n\n  return null;\n};\n\nexport { TriggerContainer };\n","import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  ContentLayout,\n  Flex,\n  Grid,\n  GridItem,\n  HeaderLayout,\n  TextInput,\n} from '@strapi/design-system';\nimport { Link } from '@strapi/design-system/v2';\nimport { Form } from '@strapi/helper-plugin';\nimport { ArrowLeft, Check, Play as Publish } from '@strapi/icons';\nimport { Webhook } from '@strapi/types';\nimport { Field, FormikHelpers, FormikProvider, useFormik } from 'formik';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { TriggerWebhook } from '../../../../../../../shared/contracts/webhooks';\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\n\nimport { EventTableCE } from './EventsTable';\nimport { HeadersInput } from './HeadersInput';\nimport { TriggerContainer } from './TriggerContainer';\n\ninterface WebhookFormValues {\n  name: Webhook['name'];\n  url: Webhook['url'];\n  headers: Array<{ key: string; value: string }>;\n  events: Webhook['events'];\n}\n\ninterface WebhookFormProps {\n  data?: Webhook;\n  handleSubmit: (\n    values: WebhookFormValues,\n    formik: FormikHelpers<WebhookFormValues>\n  ) => Promise<void>;\n  isCreating: boolean;\n  isTriggering: boolean;\n  triggerWebhook: () => void;\n  triggerResponse?: TriggerWebhook.Response['data'];\n}\n\nconst WebhookForm = ({\n  handleSubmit,\n  triggerWebhook,\n  isCreating,\n  isTriggering,\n  triggerResponse,\n  data,\n}: WebhookFormProps) => {\n  const { formatMessage } = useIntl();\n  const [showTriggerResponse, setShowTriggerResponse] = React.useState(false);\n  const EventTable = useEnterprise(\n    EventTableCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Webhooks/components/EventsTable'\n        )\n      ).EventsTableEE\n  );\n\n  /**\n   * Map the headers into a form that can be used within the formik form\n   */\n  const mapHeaders = (headers: Webhook['headers']) => {\n    if (!Object.keys(headers).length) {\n      return [{ key: '', value: '' }];\n    }\n\n    return Object.entries(headers).map(([key, value]) => ({ key, value }));\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: data?.name || '',\n      url: data?.url || '',\n      headers: mapHeaders(data?.headers || {}),\n      events: data?.events || [],\n    },\n    async onSubmit(values, formik) {\n      await handleSubmit(values, formik);\n\n      formik.resetForm({ values });\n    },\n    validationSchema: makeWebhookValidationSchema({ formatMessage }),\n    validateOnChange: false,\n    validateOnBlur: false,\n  });\n\n  // block rendering until the EE component is fully loaded\n  if (!EventTable) {\n    return null;\n  }\n\n  return (\n    <FormikProvider value={formik}>\n      <Form>\n        <HeaderLayout\n          primaryAction={\n            <Flex gap={2}>\n              <Button\n                onClick={() => {\n                  triggerWebhook();\n                  setShowTriggerResponse(true);\n                }}\n                variant=\"tertiary\"\n                startIcon={<Publish />}\n                disabled={isCreating || isTriggering}\n                size=\"L\"\n              >\n                {formatMessage({\n                  id: 'Settings.webhooks.trigger',\n                  defaultMessage: 'Trigger',\n                })}\n              </Button>\n              <Button\n                startIcon={<Check />}\n                type=\"submit\"\n                size=\"L\"\n                disabled={!formik.dirty}\n                loading={formik.isSubmitting}\n              >\n                {formatMessage({\n                  id: 'global.save',\n                  defaultMessage: 'Save',\n                })}\n              </Button>\n            </Flex>\n          }\n          title={\n            isCreating\n              ? formatMessage({\n                  id: 'Settings.webhooks.create',\n                  defaultMessage: 'Create a webhook',\n                })\n              : data?.name\n          }\n          navigationAction={\n            // @ts-expect-error – as components props are not inferred correctly.\n            <Link as={NavLink} startIcon={<ArrowLeft />} to=\"/settings/webhooks\">\n              {formatMessage({\n                id: 'global.back',\n                defaultMessage: 'Back',\n              })}\n            </Link>\n          }\n        />\n        <ContentLayout>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n            {showTriggerResponse && (\n              <TriggerContainer\n                isPending={isTriggering}\n                response={triggerResponse}\n                onCancel={() => setShowTriggerResponse(false)}\n              />\n            )}\n            <Box background=\"neutral0\" padding={8} shadow=\"filterShadow\" hasRadius>\n              <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                <Grid gap={6}>\n                  <GridItem col={6}>\n                    <Field\n                      as={TextInput}\n                      name=\"name\"\n                      error={formik.errors.name}\n                      label={formatMessage({\n                        id: 'global.name',\n                        defaultMessage: 'Name',\n                      })}\n                      required\n                    />\n                  </GridItem>\n                  <GridItem col={12}>\n                    <Field\n                      as={TextInput}\n                      name=\"url\"\n                      error={formik.errors.url}\n                      label={formatMessage({\n                        id: 'Settings.roles.form.input.url',\n                        defaultMessage: 'Url',\n                      })}\n                      required\n                    />\n                  </GridItem>\n                </Grid>\n                <HeadersInput />\n                <EventTable />\n              </Flex>\n            </Box>\n          </Flex>\n        </ContentLayout>\n      </Form>\n    </FormikProvider>\n  );\n};\n\nconst NAME_REGEX = /(^$)|(^[A-Za-z][_0-9A-Za-z ]*$)/;\nconst URL_REGEX = /(^$)|((https?:\\/\\/.*)(d*)\\/?(.*))/;\n\nconst makeWebhookValidationSchema = ({ formatMessage }: Pick<IntlShape, 'formatMessage'>) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .required(\n        formatMessage({\n          id: 'Settings.webhooks.validation.name.required',\n          defaultMessage: 'Name is required',\n        })\n      )\n      .matches(\n        NAME_REGEX,\n        formatMessage({\n          id: 'Settings.webhooks.validation.name.regex',\n          defaultMessage:\n            'The name must start with a letter and only contain letters, numbers, spaces and underscores',\n        })\n      ),\n    url: yup\n      .string()\n      .required(\n        formatMessage({\n          id: 'Settings.webhooks.validation.url.required',\n          defaultMessage: 'Url is required',\n        })\n      )\n      .matches(\n        URL_REGEX,\n        formatMessage({\n          id: 'Settings.webhooks.validation.url.regex',\n          defaultMessage: 'The value must be a valid Url',\n        })\n      ),\n    headers: yup.lazy((array) => {\n      const baseSchema = yup.array();\n\n      if (array.length === 1) {\n        const { key, value } = array[0];\n\n        if (!key && !value) {\n          return baseSchema;\n        }\n      }\n\n      return baseSchema.of(\n        yup.object().shape({\n          key: yup.string().required(\n            formatMessage({\n              id: 'Settings.webhooks.validation.key',\n              defaultMessage: 'Key is required',\n            })\n          ),\n          value: yup.string().required(\n            formatMessage({\n              id: 'Settings.webhooks.validation.value',\n              defaultMessage: 'Value is required',\n            })\n          ),\n        })\n      );\n    }),\n    events: yup.array(),\n  });\n\nexport { WebhookForm };\nexport type { WebhookFormValues, WebhookFormProps };\n","import * as React from 'react';\n\nimport { Main } from '@strapi/design-system';\nimport {\n  CheckPagePermissions,\n  LoadingIndicatorPage,\n  SettingsPageTitle,\n  useAPIErrorHandler,\n  useNotification,\n} from '@strapi/helper-plugin';\nimport { Webhook } from '@strapi/types';\nimport { FormikHelpers } from 'formik';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport { CreateWebhook, TriggerWebhook } from '../../../../../../shared/contracts/webhooks';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useContentTypes } from '../../../../hooks/useContentTypes';\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\n\nimport { WebhookForm, WebhookFormValues } from './components/WebhookForm';\nimport { useWebhooks } from './hooks/useWebhooks';\n\n/* -------------------------------------------------------------------------------------------------\n * EditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst cleanData = (\n  data: WebhookFormValues\n): Omit<CreateWebhook.Request['body'], 'id' | 'isEnabled'> => ({\n  ...data,\n  headers: data.headers.reduce<Webhook['headers']>((acc, { key, value }) => {\n    if (key !== '') {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {}),\n});\n\nconst EditPage = () => {\n  const match = useRouteMatch<{ id: string }>('/settings/webhooks/:id');\n  const id = match?.params.id;\n  const isCreating = id === 'create';\n\n  const { replace } = useHistory();\n  const toggleNotification = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const { isLoading: isLoadingForModels } = useContentTypes();\n  const [isTriggering, setIsTriggering] = React.useState(false);\n  const [triggerResponse, setTriggerResponse] = React.useState<TriggerWebhook.Response['data']>();\n\n  const { isLoading, webhooks, error, createWebhook, updateWebhook, triggerWebhook } = useWebhooks(\n    { id: id! },\n    {\n      skip: isCreating,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'warning',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, toggleNotification, formatAPIError]);\n\n  const handleTriggerWebhook = async () => {\n    try {\n      setIsTriggering(true);\n\n      const res = await triggerWebhook(id!);\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(res.error),\n        });\n\n        return;\n      }\n\n      setTriggerResponse(res.data);\n    } catch {\n      toggleNotification({\n        type: 'warning',\n        message: {\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        },\n      });\n    } finally {\n      setIsTriggering(false);\n    }\n  };\n\n  const handleSubmit = async (\n    data: WebhookFormValues,\n    formik: FormikHelpers<WebhookFormValues>\n  ) => {\n    try {\n      if (isCreating) {\n        const res = await createWebhook(cleanData(data));\n\n        if ('error' in res) {\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n            formik.setErrors(formatValidationErrors(res.error));\n          } else {\n            toggleNotification({\n              type: 'warning',\n              message: formatAPIError(res.error),\n            });\n          }\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: { id: 'Settings.webhooks.created' },\n        });\n\n        replace(`/settings/webhooks/${res.data.id}`);\n      } else {\n        const res = await updateWebhook({ id: id!, ...cleanData(data) });\n\n        if ('error' in res) {\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n            formik.setErrors(formatValidationErrors(res.error));\n          } else {\n            toggleNotification({\n              type: 'warning',\n              message: formatAPIError(res.error),\n            });\n          }\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: { id: 'notification.form.success.fields' },\n        });\n      }\n    } catch {\n      toggleNotification({\n        type: 'warning',\n        message: {\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        },\n      });\n    }\n  };\n\n  if (isLoading || isLoadingForModels) {\n    return <LoadingIndicatorPage />;\n  }\n\n  const [webhook] = webhooks ?? [];\n\n  return (\n    <Main>\n      <SettingsPageTitle name=\"Webhooks\" />\n      <WebhookForm\n        data={webhook}\n        handleSubmit={handleSubmit}\n        triggerWebhook={handleTriggerWebhook}\n        isCreating={isCreating}\n        isTriggering={isTriggering}\n        triggerResponse={triggerResponse}\n      />\n    </Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector(selectAdminPermissions);\n\n  return (\n    <CheckPagePermissions permissions={permissions.settings?.webhooks.update}>\n      <EditPage />\n    </CheckPagePermissions>\n  );\n};\n\nexport { ProtectedEditPage, EditPage };\n"],"names":["Table","Thead","Tr","Th","Tbody","name","Td","value","Loader","formik","Publish"],"mappings":"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"}