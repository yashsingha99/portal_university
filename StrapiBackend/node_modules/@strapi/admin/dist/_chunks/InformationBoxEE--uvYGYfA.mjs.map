{"version":3,"file":"InformationBoxEE--uvYGYfA.mjs","sources":["../../ee/admin/src/content-manager/pages/EditView/components/AssigneeSelect.tsx","../../ee/admin/src/content-manager/pages/EditView/components/StageSelect.tsx","../../ee/admin/src/content-manager/pages/EditView/components/InformationBoxEE.tsx"],"sourcesContent":["import { Combobox, ComboboxOption, Field, Flex } from '@strapi/design-system';\nimport {\n  useCMEditViewDataManager,\n  useAPIErrorHandler,\n  useNotification,\n  useRBAC,\n} from '@strapi/helper-plugin';\nimport { useIntl } from 'react-intl';\n\nimport { getDisplayName } from '../../../../../../../admin/src/content-manager/utils/users';\nimport { useTypedSelector } from '../../../../../../../admin/src/core/store/hooks';\nimport { useAdminUsers } from '../../../../../../../admin/src/services/users';\nimport { useUpdateAssigneeMutation } from '../../../../services/reviewWorkflows';\n\nimport { ASSIGNEE_ATTRIBUTE_NAME } from './constants';\n\nconst AssigneeSelect = () => {\n  const { initialData, layout, isSingleType, onChange } = useCMEditViewDataManager();\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\n  const { formatMessage } = useIntl();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const toggleNotification = useNotification();\n  const {\n    allowedActions: { canRead },\n    isLoading: isLoadingPermissions,\n  } = useRBAC(permissions.settings?.users);\n  const { data, isLoading, isError } = useAdminUsers(\n    {},\n    {\n      skip: isLoadingPermissions || !canRead,\n    }\n  );\n\n  const users = data?.users || [];\n\n  const currentAssignee = initialData?.[ASSIGNEE_ATTRIBUTE_NAME] ?? null;\n\n  const [updateAssignee, { error, isLoading: isMutating }] = useUpdateAssigneeMutation();\n\n  const handleChange = async (assigneeId: string | null) => {\n    const res = await updateAssignee({\n      slug: isSingleType ? 'single-types' : 'collection-types',\n      model: layout!.uid,\n      id: initialData.id!,\n      data: {\n        id: assigneeId ? parseInt(assigneeId, 10) : null,\n      },\n    });\n\n    if ('data' in res) {\n      // initialData and modifiedData have to stay in sync, otherwise the entity would be flagged\n      // as modified, which is what the boolean flag is for\n      onChange?.(\n        {\n          target: {\n            type: '',\n            name: ASSIGNEE_ATTRIBUTE_NAME,\n            value: res.data[ASSIGNEE_ATTRIBUTE_NAME],\n          },\n        },\n        true\n      );\n\n      toggleNotification({\n        type: 'success',\n        message: {\n          id: 'content-manager.reviewWorkflows.assignee.notification.saved',\n          defaultMessage: 'Assignee updated',\n        },\n      });\n    }\n  };\n\n  return (\n    <Field name={ASSIGNEE_ATTRIBUTE_NAME} id={ASSIGNEE_ATTRIBUTE_NAME}>\n      <Flex direction=\"column\" gap={2} alignItems=\"stretch\">\n        <Combobox\n          clearLabel={formatMessage({\n            id: 'content-manager.reviewWorkflows.assignee.clear',\n            defaultMessage: 'Clear assignee',\n          })}\n          error={\n            ((isError &&\n              canRead &&\n              formatMessage({\n                id: 'content-manager.reviewWorkflows.assignee.error',\n                defaultMessage: 'An error occurred while fetching users',\n              })) ||\n              (error && formatAPIError(error))) ??\n            undefined\n          }\n          disabled={!isLoadingPermissions && !isLoading && users.length === 0}\n          name={ASSIGNEE_ATTRIBUTE_NAME}\n          id={ASSIGNEE_ATTRIBUTE_NAME}\n          value={currentAssignee ? currentAssignee.id.toString() : null}\n          // @ts-expect-error - DS Combobox wants to return number or string, this will be fixed in V2.\n          onChange={handleChange}\n          onClear={() => handleChange(null)}\n          placeholder={formatMessage({\n            id: 'content-manager.reviewWorkflows.assignee.placeholder',\n            defaultMessage: 'Select …',\n          })}\n          label={formatMessage({\n            id: 'content-manager.reviewWorkflows.assignee.label',\n            defaultMessage: 'Assignee',\n          })}\n          loading={isLoading || isLoadingPermissions || isMutating}\n        >\n          {users.map((user) => {\n            return (\n              <ComboboxOption\n                key={user.id}\n                value={user.id.toString()}\n                textValue={getDisplayName(user, formatMessage)}\n              >\n                {getDisplayName(user, formatMessage)}\n              </ComboboxOption>\n            );\n          })}\n        </Combobox>\n      </Flex>\n    </Field>\n  );\n};\n\nexport { AssigneeSelect };\n","import * as React from 'react';\n\nimport {\n  SingleSelect,\n  SingleSelectOption,\n  Field,\n  FieldError,\n  FieldHint,\n  Flex,\n  Loader,\n  Typography,\n} from '@strapi/design-system';\nimport {\n  useCMEditViewDataManager,\n  useAPIErrorHandler,\n  useNotification,\n} from '@strapi/helper-plugin';\nimport { Entity } from '@strapi/types';\nimport { useIntl } from 'react-intl';\n\nimport { useLicenseLimits } from '../../../../hooks/useLicenseLimits';\nimport { LimitsModal } from '../../../../pages/SettingsPage/pages/ReviewWorkflows/components/LimitsModal';\nimport {\n  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,\n  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,\n} from '../../../../pages/SettingsPage/pages/ReviewWorkflows/constants';\nimport { getStageColorByHex } from '../../../../pages/SettingsPage/pages/ReviewWorkflows/utils/colors';\nimport { useGetStagesQuery, useUpdateStageMutation } from '../../../../services/reviewWorkflows';\n\nimport { STAGE_ATTRIBUTE_NAME } from './constants';\n\nexport const StageSelect = () => {\n  const { initialData, layout: contentType, isSingleType, onChange } = useCMEditViewDataManager();\n  const { formatMessage } = useIntl();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const toggleNotification = useNotification();\n  const { data, isLoading } = useGetStagesQuery(\n    {\n      slug: isSingleType ? 'single-types' : 'collection-types',\n      model: contentType!.uid,\n      id: initialData!.id!,\n    },\n    {\n      skip: !initialData?.id || !contentType?.uid,\n    }\n  );\n\n  const { meta, stages = [] } = data ?? {};\n\n  const { getFeature } = useLicenseLimits();\n  const [showLimitModal, setShowLimitModal] = React.useState<'stage' | 'workflow' | null>(null);\n\n  const limits = getFeature<string>('review-workflows') ?? {};\n  // it is possible to rely on initialData here, because it always will\n  // be updated at the same time when modifiedData is updated, otherwise\n  // the entity is flagged as modified\n  const activeWorkflowStage = initialData?.[STAGE_ATTRIBUTE_NAME] ?? null;\n\n  const [updateStage, { error }] = useUpdateStageMutation();\n\n  const handleChange = async (stageId: Entity.ID) => {\n    try {\n      /**\n       * If the current license has a limit:\n       * check if the total count of workflows exceeds that limit and display\n       * the limits modal.\n       *\n       * If the current license does not have a limit (e.g. offline license):\n       * do nothing (for now).\n       *\n       */\n\n      if (\n        limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME] &&\n        parseInt(limits[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME], 10) < (meta?.workflowCount ?? 0)\n      ) {\n        setShowLimitModal('workflow');\n\n        /**\n         * If the current license has a limit:\n         * check if the total count of stages exceeds that limit and display\n         * the limits modal.\n         *\n         * If the current license does not have a limit (e.g. offline license):\n         * do nothing (for now).\n         *\n         */\n      } else if (\n        limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME] &&\n        parseInt(limits[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME], 10) < stages.length\n      ) {\n        setShowLimitModal('stage');\n      } else {\n        if (initialData.id && contentType) {\n          const res = await updateStage({\n            model: contentType.uid,\n            id: initialData.id,\n            slug: isSingleType ? 'single-types' : 'collection-types',\n            data: { id: stageId },\n          });\n\n          if ('data' in res) {\n            // initialData and modifiedData have to stay in sync, otherwise the entity would be flagged\n            // as modified, which is what the boolean flag is for\n            onChange?.(\n              {\n                target: {\n                  name: STAGE_ATTRIBUTE_NAME,\n                  value: res.data[STAGE_ATTRIBUTE_NAME],\n                  type: '',\n                },\n              },\n              true\n            );\n\n            toggleNotification({\n              type: 'success',\n              message: {\n                id: 'content-manager.reviewWorkflows.stage.notification.saved',\n                defaultMessage: 'Review stage updated',\n              },\n            });\n          }\n        }\n      }\n    } catch (error) {\n      // react-query@v3: the error doesn't have to be handled here\n      // see: https://github.com/TanStack/query/issues/121\n    }\n  };\n\n  const { themeColorName } = getStageColorByHex(activeWorkflowStage?.color) ?? {};\n\n  return (\n    <>\n      <Field\n        hint={\n          stages.length === 0 &&\n          formatMessage({\n            id: 'content-manager.reviewWorkflows.stages.no-transition',\n            defaultMessage: 'You don’t have the permission to update this stage.',\n          })\n        }\n        name={STAGE_ATTRIBUTE_NAME}\n        id={STAGE_ATTRIBUTE_NAME}\n      >\n        <Flex direction=\"column\" gap={2} alignItems=\"stretch\">\n          <SingleSelect\n            disabled={stages.length === 0}\n            error={(error && formatAPIError(error)) || undefined}\n            name={STAGE_ATTRIBUTE_NAME}\n            id={STAGE_ATTRIBUTE_NAME}\n            value={activeWorkflowStage?.id}\n            onChange={handleChange}\n            label={formatMessage({\n              id: 'content-manager.reviewWorkflows.stage.label',\n              defaultMessage: 'Review stage',\n            })}\n            startIcon={\n              activeWorkflowStage && (\n                <Flex\n                  as=\"span\"\n                  height={2}\n                  background={activeWorkflowStage?.color}\n                  borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\n                  hasRadius\n                  shrink={0}\n                  width={2}\n                  marginRight=\"-3px\"\n                />\n              )\n            }\n            // @ts-expect-error – `customizeContent` is not correctly typed in the DS.\n            customizeContent={() => (\n              <Flex as=\"span\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n                <Typography textColor=\"neutral800\" ellipsis>\n                  {activeWorkflowStage?.name ?? ''}\n                </Typography>\n                {isLoading ? (\n                  <Loader small style={{ display: 'flex' }} data-testid=\"loader\" />\n                ) : null}\n              </Flex>\n            )}\n          >\n            {stages.map(({ id, color, name }) => {\n              const { themeColorName } = getStageColorByHex(color) ?? {};\n\n              return (\n                <SingleSelectOption\n                  key={id}\n                  startIcon={\n                    <Flex\n                      height={2}\n                      background={color}\n                      borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\n                      hasRadius\n                      shrink={0}\n                      width={2}\n                    />\n                  }\n                  value={id}\n                  textValue={name}\n                >\n                  {name}\n                </SingleSelectOption>\n              );\n            })}\n          </SingleSelect>\n          <FieldHint />\n          <FieldError />\n        </Flex>\n      </Field>\n\n      <LimitsModal.Root\n        isOpen={showLimitModal === 'workflow'}\n        onClose={() => setShowLimitModal(null)}\n      >\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'content-manager.reviewWorkflows.workflows.limit.title',\n            defaultMessage: 'You’ve reached the limit of workflows in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'content-manager.reviewWorkflows.workflows.limit.body',\n            defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n\n      <LimitsModal.Root isOpen={showLimitModal === 'stage'} onClose={() => setShowLimitModal(null)}>\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'content-manager.reviewWorkflows.stages.limit.title',\n            defaultMessage: 'You have reached the limit of stages for this workflow in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'content-manager.reviewWorkflows.stages.limit.body',\n            defaultMessage: 'Try deleting some stages or contact Sales to enable more stages.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n    </>\n  );\n};\n","import { useCMEditViewDataManager } from '@strapi/helper-plugin';\n\nimport { Information } from '../../../../../../../admin/src/content-manager/pages/EditView/components/Information';\n\nimport { AssigneeSelect } from './AssigneeSelect';\nimport { StageSelect } from './StageSelect';\n\nconst InformationBoxEE = () => {\n  const { isCreatingEntry, layout } = useCMEditViewDataManager();\n\n  const hasReviewWorkflowsEnabled = layout?.options?.reviewWorkflows ?? false;\n\n  return (\n    <Information.Root>\n      <Information.Title />\n      {hasReviewWorkflowsEnabled && !isCreatingEntry && (\n        <>\n          <StageSelect />\n          <AssigneeSelect />\n        </>\n      )}\n      <Information.Body />\n    </Information.Root>\n  );\n};\n\nexport { InformationBoxEE };\n"],"names":["error","themeColorName"],"mappings":"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"}