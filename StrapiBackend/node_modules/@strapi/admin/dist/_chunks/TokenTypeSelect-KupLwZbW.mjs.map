{"version":3,"file":"TokenTypeSelect-KupLwZbW.mjs","sources":["../../admin/src/pages/Settings/components/Tokens/FormHead.tsx","../../admin/src/pages/Settings/components/Tokens/TokenBox.tsx","../../admin/src/pages/Settings/pages/ApiTokens/EditView/utils/getDateOfExpiration.ts","../../admin/src/pages/Settings/utils/forms.ts","../../admin/src/pages/Settings/components/Tokens/LifeSpanInput.tsx","../../admin/src/pages/Settings/components/Tokens/TokenDescription.tsx","../../admin/src/pages/Settings/components/Tokens/TokenName.tsx","../../admin/src/pages/Settings/components/Tokens/TokenTypeSelect.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Button, Flex, HeaderLayout } from '@strapi/design-system';\nimport { Link } from '@strapi/design-system/v2';\nimport { ConfirmDialog, useAPIErrorHandler, useNotification } from '@strapi/helper-plugin';\nimport { ArrowLeft, Check, Refresh } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\n\nimport { useRegenerateTokenMutation } from '../../../../services/api';\n\nimport type { Entity } from '@strapi/types';\n\ninterface RegenerateProps {\n  onRegenerate?: (newKey: string) => void;\n  url: string;\n}\n\nconst Regenerate = ({ onRegenerate, url }: RegenerateProps) => {\n  const { formatMessage } = useIntl();\n  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\n\n  const [isLoadingConfirmation, setIsLoadingConfirmation] = React.useState(false);\n  const toggleNotification = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const [regenerateToken] = useRegenerateTokenMutation();\n\n  const regenerateData = async () => {\n    try {\n      const res = await regenerateToken(url);\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(res.error),\n        });\n\n        return;\n      }\n\n      if (onRegenerate) {\n        onRegenerate(res.data.accessKey);\n      }\n    } catch (error) {\n      toggleNotification({\n        type: 'warning',\n        message: {\n          id: 'notification.error',\n          defaultMessage: 'Something went wrong',\n        },\n      });\n    } finally {\n      setIsLoadingConfirmation(false);\n    }\n  };\n\n  const handleConfirmRegeneration = async () => {\n    regenerateData();\n    setShowConfirmDialog(false);\n  };\n\n  return (\n    <>\n      <Button\n        startIcon={<Refresh />}\n        type=\"button\"\n        size=\"S\"\n        variant=\"tertiary\"\n        onClick={() => setShowConfirmDialog(true)}\n        name=\"regenerate\"\n      >\n        {formatMessage({\n          id: 'Settings.tokens.regenerate',\n          defaultMessage: 'Regenerate',\n        })}\n      </Button>\n\n      <ConfirmDialog\n        bodyText={{\n          id: 'Settings.tokens.popUpWarning.message',\n          defaultMessage: 'Are you sure you want to regenerate this token?',\n        }}\n        iconRightButton={<Refresh />}\n        isConfirmButtonLoading={isLoadingConfirmation}\n        isOpen={showConfirmDialog}\n        onToggleDialog={() => setShowConfirmDialog(false)}\n        onConfirm={handleConfirmRegeneration}\n        leftButtonText={{\n          id: 'Settings.tokens.Button.cancel',\n          defaultMessage: 'Cancel',\n        }}\n        rightButtonText={{\n          id: 'Settings.tokens.Button.regenerate',\n          defaultMessage: 'Regenerate',\n        }}\n        title={{\n          id: 'Settings.tokens.RegenerateDialog.title',\n          defaultMessage: 'Regenerate token',\n        }}\n      />\n    </>\n  );\n};\n\ninterface Token {\n  id: Entity.ID;\n  name: string;\n}\n\ninterface FormHeadProps<TToken extends Token | null> {\n  title: MessageDescriptor;\n  token: TToken;\n  canEditInputs: boolean;\n  canRegenerate: boolean;\n  setToken: (token: TToken) => void;\n  isSubmitting: boolean;\n  backUrl: string;\n  regenerateUrl: string;\n}\n\nexport const FormHead = <TToken extends Token | null>({\n  title,\n  token,\n  setToken,\n  canEditInputs,\n  canRegenerate,\n  isSubmitting,\n  backUrl,\n  regenerateUrl,\n}: FormHeadProps<TToken>) => {\n  const { formatMessage } = useIntl();\n  const handleRegenerate = (newKey: string) => {\n    setToken({\n      ...token,\n      accessKey: newKey,\n    });\n  };\n\n  return (\n    <HeaderLayout\n      title={token?.name || formatMessage(title)}\n      primaryAction={\n        canEditInputs ? (\n          <Flex gap={2}>\n            {canRegenerate && token?.id && (\n              <Regenerate\n                onRegenerate={handleRegenerate}\n                url={`${regenerateUrl}${token?.id ?? ''}`}\n              />\n            )}\n            <Button\n              disabled={isSubmitting}\n              loading={isSubmitting}\n              startIcon={<Check />}\n              type=\"submit\"\n              size=\"S\"\n            >\n              {formatMessage({\n                id: 'global.save',\n                defaultMessage: 'Save',\n              })}\n            </Button>\n          </Flex>\n        ) : (\n          canRegenerate &&\n          token?.id && (\n            <Regenerate\n              onRegenerate={handleRegenerate}\n              url={`${regenerateUrl}${token?.id ?? ''}`}\n            />\n          )\n        )\n      }\n      navigationAction={\n        <>\n          {/* @ts-expect-error polymorphic */}\n          <Link as={NavLink} startIcon={<ArrowLeft />} to={backUrl}>\n            {formatMessage({\n              id: 'global.back',\n              defaultMessage: 'Back',\n            })}\n          </Link>\n        </>\n      }\n      ellipsis\n    />\n  );\n};\n","import { IconButton } from '@strapi/design-system';\nimport { ContentBox, useClipboard, useNotification, useTracking } from '@strapi/helper-plugin';\nimport { Duplicate, Key } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\ninterface TokenBoxProps {\n  token?: string;\n  tokenType: 'transfer-token' | 'api-token';\n}\n\nexport const TokenBox = ({ token, tokenType }: TokenBoxProps) => {\n  const { formatMessage } = useIntl();\n  const toggleNotification = useNotification();\n  const { trackUsage } = useTracking();\n\n  const { copy } = useClipboard();\n\n  const handleClick = (token: TokenBoxProps['token']) => async () => {\n    if (token) {\n      const didCopy = await copy(token);\n\n      if (didCopy) {\n        trackUsage('didCopyTokenKey', {\n          tokenType,\n        });\n        toggleNotification({\n          type: 'success',\n          message: { id: 'Settings.tokens.notification.copied' },\n        });\n      }\n    }\n  };\n\n  return (\n    <ContentBox\n      endAction={\n        token && (\n          <span style={{ alignSelf: 'start' }}>\n            <IconButton\n              label={formatMessage({\n                id: 'app.component.CopyToClipboard.label',\n                defaultMessage: 'Copy to clipboard',\n              })}\n              onClick={handleClick(token)}\n              borderWidth={0}\n              icon={<Duplicate />}\n              style={{ padding: 0, height: '1rem' }}\n            />\n          </span>\n        )\n      }\n      title={\n        token ||\n        formatMessage({\n          id: 'Settings.tokens.copy.editTitle',\n          defaultMessage: 'This token isn’t accessible anymore.',\n        })\n      }\n      subtitle={\n        token\n          ? formatMessage({\n              id: 'Settings.tokens.copy.lastWarning',\n              defaultMessage: 'Make sure to copy this token, you won’t be able to see it again!',\n            })\n          : formatMessage({\n              id: 'Settings.tokens.copy.editMessage',\n              defaultMessage: 'For security reasons, you can only see your token once.',\n            })\n      }\n      icon={<Key />}\n      iconBackground=\"neutral100\"\n    />\n  );\n};\n","import { addDays, format } from 'date-fns';\nimport * as locales from 'date-fns/locale';\n\nexport const getDateOfExpiration = (\n  createdAt: string,\n  duration: number | null,\n  language: string = 'en'\n) => {\n  if (duration && typeof duration === 'number') {\n    const durationInDays = duration / 24 / 60 / 60 / 1000;\n\n    return format(addDays(new Date(createdAt), durationInDays), 'PPP', {\n      // @ts-expect-error I don't know how to fix this\n      locale: locales[language],\n    });\n  }\n\n  return 'Unlimited';\n};\n","import { MessageDescriptor } from 'react-intl';\n\nconst isErrorMessageMessageDescriptor = (\n  message: string | MessageDescriptor\n): message is MessageDescriptor => {\n  return typeof message === 'object' && message !== null && 'id' in message;\n};\n\nexport { isErrorMessageMessageDescriptor };\n","import { SingleSelectOption, SingleSelect, Typography } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { getDateOfExpiration } from '../../pages/ApiTokens/EditView/utils/getDateOfExpiration';\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\nimport type { ApiToken } from '../../../../../../shared/contracts/api-token';\nimport type { TransferToken } from '../../../../../../shared/contracts/transfer';\n\ninterface LifeSpanInputProps {\n  error?: string | MessageDescriptor;\n  value?: string | number | null;\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  isCreating: boolean;\n  token: Partial<TransferToken> | Partial<ApiToken> | null;\n}\n\nexport const LifeSpanInput = ({\n  token,\n  error,\n  value,\n  onChange,\n  isCreating,\n}: LifeSpanInputProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      <SingleSelect\n        name=\"lifespan\"\n        label={formatMessage({\n          id: 'Settings.tokens.form.duration',\n          defaultMessage: 'Token duration',\n        })}\n        value={value}\n        error={\n          error\n            ? formatMessage(\n                isErrorMessageMessageDescriptor(error)\n                  ? error\n                  : { id: error, defaultMessage: error }\n              )\n            : undefined\n        }\n        onChange={(value) => {\n          // @ts-expect-error – DS v2 won't support number types for select\n          onChange({ target: { name: 'lifespan', value } });\n        }}\n        required\n        disabled={!isCreating}\n        placeholder=\"Select\"\n      >\n        <SingleSelectOption value=\"604800000\">\n          {formatMessage({\n            id: 'Settings.tokens.duration.7-days',\n            defaultMessage: '7 days',\n          })}\n        </SingleSelectOption>\n        <SingleSelectOption value=\"2592000000\">\n          {formatMessage({\n            id: 'Settings.tokens.duration.30-days',\n            defaultMessage: '30 days',\n          })}\n        </SingleSelectOption>\n        <SingleSelectOption value=\"7776000000\">\n          {formatMessage({\n            id: 'Settings.tokens.duration.90-days',\n            defaultMessage: '90 days',\n          })}\n        </SingleSelectOption>\n        <SingleSelectOption value=\"0\">\n          {formatMessage({\n            id: 'Settings.tokens.duration.unlimited',\n            defaultMessage: 'Unlimited',\n          })}\n        </SingleSelectOption>\n      </SingleSelect>\n      <Typography variant=\"pi\" textColor=\"neutral600\">\n        {!isCreating &&\n          `${formatMessage({\n            id: 'Settings.tokens.duration.expiration-date',\n            defaultMessage: 'Expiration date',\n            // @ts-expect-error – TODO: fix this.\n          })}: ${getDateOfExpiration(token?.createdAt, parseInt(value ?? '', 10))}`}\n      </Typography>\n    </>\n  );\n};\n","import { Textarea, TextareaProps } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\ninterface TokenDescriptionProps extends Pick<TextareaProps, 'onChange' | 'value'> {\n  error?: string | MessageDescriptor;\n  canEditInputs: boolean;\n}\n\nexport const TokenDescription = ({\n  error,\n  value,\n  onChange,\n  canEditInputs,\n}: TokenDescriptionProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Textarea\n      label={formatMessage({\n        id: 'Settings.tokens.form.description',\n        defaultMessage: 'Description',\n      })}\n      id=\"description\"\n      error={\n        error\n          ? formatMessage(\n              isErrorMessageMessageDescriptor(error)\n                ? error\n                : {\n                    id: error,\n                    defaultMessage: error,\n                  }\n            )\n          : undefined\n      }\n      onChange={onChange}\n      disabled={!canEditInputs}\n    >\n      {value}\n    </Textarea>\n  );\n};\n","import { TextInput, TextInputProps } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\ninterface TokenNameProps extends Pick<TextInputProps, 'onChange' | 'value'> {\n  error?: string | MessageDescriptor;\n  canEditInputs: boolean;\n}\n\nexport const TokenName = ({ error, value, onChange, canEditInputs }: TokenNameProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <TextInput\n      name=\"name\"\n      error={\n        error\n          ? formatMessage(\n              isErrorMessageMessageDescriptor(error) ? error : { id: error, defaultMessage: error }\n            )\n          : undefined\n      }\n      label={formatMessage({\n        id: 'Settings.tokens.form.name',\n        defaultMessage: 'Name',\n      })}\n      onChange={onChange}\n      value={value}\n      disabled={!canEditInputs}\n      required\n    />\n  );\n};\n","import { SingleSelectOption, SingleSelect, SingleSelectProps } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\ninterface TokenTypeSelectProps extends Pick<SingleSelectProps, 'onChange' | 'value'> {\n  name?: string;\n  options: Array<{\n    label: MessageDescriptor;\n    value: string;\n  }>;\n  error?: string | MessageDescriptor;\n  canEditInputs: boolean;\n  label: MessageDescriptor;\n}\n\nexport const TokenTypeSelect = ({\n  name = 'type',\n  error,\n  value,\n  onChange,\n  canEditInputs,\n  options = [],\n  label,\n}: TokenTypeSelectProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <SingleSelect\n      name={name}\n      label={formatMessage({\n        id: label.id,\n        defaultMessage: label.defaultMessage,\n      })}\n      value={value}\n      error={\n        error\n          ? formatMessage(\n              isErrorMessageMessageDescriptor(error) ? error : { id: error, defaultMessage: error }\n            )\n          : undefined\n      }\n      onChange={onChange}\n      placeholder=\"Select\"\n      required\n      disabled={!canEditInputs}\n    >\n      {options &&\n        options.map(({ value, label }) => (\n          <SingleSelectOption key={value} value={value}>\n            {formatMessage(label)}\n          </SingleSelectOption>\n        ))}\n    </SingleSelect>\n  );\n};\n"],"names":["token","value","label"],"mappings":"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"}