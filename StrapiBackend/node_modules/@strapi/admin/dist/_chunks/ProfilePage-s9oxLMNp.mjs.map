{"version":3,"file":"ProfilePage-s9oxLMNp.mjs","sources":["../../admin/src/pages/ProfilePage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  ContentLayout,\n  Flex,\n  HeaderLayout,\n  Main,\n  useNotifyAT,\n  Grid,\n  GridItem,\n  Typography,\n  SingleSelect,\n  SingleSelectOption,\n  TextInput,\n  FieldAction,\n} from '@strapi/design-system';\nimport {\n  Form,\n  GenericInput,\n  GenericInputProps,\n  LoadingIndicatorPage,\n  pxToRem,\n  translatedErrors,\n  useFocusWhenNavigate,\n  useNotification,\n  useOverlayBlocker,\n  useTracking,\n  useAPIErrorHandler,\n} from '@strapi/helper-plugin';\nimport { Check, Eye, EyeStriked } from '@strapi/icons';\nimport { Formik, FormikHelpers } from 'formik';\nimport upperFirst from 'lodash/upperFirst';\nimport { Helmet } from 'react-helmet';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\n\nimport { useTypedDispatch, useTypedSelector } from '../core/store/hooks';\nimport { useAuth } from '../features/Auth';\nimport { AppState, setAppTheme } from '../reducer';\nimport { useIsSSOLockedQuery, useUpdateMeMutation } from '../services/auth';\nimport { isBaseQueryError } from '../utils/baseQuery';\nimport { getFullName } from '../utils/getFullName';\n\nimport { COMMON_USER_SCHEMA } from './Settings/pages/Users/utils/validation';\n\nimport type { UpdateMe } from '../../../shared/contracts/users';\n\nconst PROFILE_VALIDTION_SCHEMA = yup.object().shape({\n  ...COMMON_USER_SCHEMA,\n  currentPassword: yup\n    .string()\n    // @ts-expect-error – no idea why this is failing.\n    .when(['password', 'confirmPassword'], (password, confirmPassword, passSchema) => {\n      return password || confirmPassword\n        ? passSchema.required(translatedErrors.required)\n        : passSchema;\n    }),\n  preferedLanguage: yup.string().nullable(),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ProfilePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProfilePage = () => {\n  const localeNames = useTypedSelector((state) => state.admin_app.language.localeNames);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const toggleNotification = useNotification();\n  const { lockApp, unlockApp } = useOverlayBlocker();\n  const { notifyStatus } = useNotifyAT();\n  const currentTheme = useTypedSelector((state) => state.admin_app.theme.currentTheme);\n  const dispatch = useTypedDispatch();\n  const {\n    _unstableFormatValidationErrors: formatValidationErrors,\n    _unstableFormatAPIError: formatApiError,\n  } = useAPIErrorHandler();\n\n  useFocusWhenNavigate();\n\n  const user = useAuth('ProfilePage', (state) => state.user);\n\n  React.useEffect(() => {\n    if (user) {\n      notifyStatus(\n        formatMessage({\n          id: 'Settings.profile.form.notify.data.loaded',\n          defaultMessage: 'Your profile data has been loaded',\n        })\n      );\n    } else {\n      toggleNotification({\n        type: 'warning',\n        message: { id: 'notification.error', defaultMessage: 'An error occured' },\n      });\n    }\n  }, [formatMessage, notifyStatus, toggleNotification, user]);\n\n  const [updateMe, { isLoading: isSubmittingForm }] = useUpdateMeMutation();\n\n  const {\n    isLoading,\n    data: dataSSO,\n    error,\n  } = useIsSSOLockedQuery(undefined, {\n    skip: !(window.strapi.isEE && window.strapi.features.isEnabled('sso')),\n  });\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'warning',\n        message: { id: 'Settings.permissions.users.sso.provider.error' },\n      });\n    }\n  }, [error, toggleNotification]);\n\n  type UpdateUsersMeBody = UpdateMe.Request['body'] & {\n    confirmPassword: string;\n    currentTheme: AppState['theme']['currentTheme'];\n  };\n\n  const handleSubmit = async (\n    body: UpdateUsersMeBody,\n    { setErrors }: FormikHelpers<UpdateUsersMeBody>\n  ) => {\n    // @ts-expect-error – we're going to implement a context assertion to avoid this\n    lockApp();\n\n    const { confirmPassword: _confirmPassword, currentTheme, ...bodyRest } = body;\n    let dataToSend = bodyRest;\n\n    // The password fields are optional. If the user didn't touch them, don't send any password\n    // to the API, because an empty string would throw a validation error\n    if (dataToSend.password === '') {\n      const {\n        password: _password,\n        currentPassword: _currentPassword,\n        ...passwordRequestBodyRest\n      } = dataToSend;\n      dataToSend = passwordRequestBodyRest;\n    }\n\n    const res = await updateMe(dataToSend);\n\n    if ('data' in res) {\n      dispatch(setAppTheme(currentTheme));\n\n      trackUsage('didChangeMode', { newMode: currentTheme });\n\n      toggleNotification({\n        type: 'success',\n        message: { id: 'notification.success.saved', defaultMessage: 'Saved' },\n      });\n    }\n\n    if ('error' in res) {\n      if (\n        isBaseQueryError(res.error) &&\n        (res.error.name === 'ValidationError' || res.error.message === 'ValidationError')\n      ) {\n        // @ts-expect-error – We get a BadRequest error here instead of a ValidationError if the currentPassword is wrong.\n        setErrors(formatValidationErrors(res.error));\n      } else if (isBaseQueryError(res.error)) {\n        toggleNotification({\n          type: 'warning',\n          message: formatApiError(res.error),\n        });\n      } else {\n        toggleNotification({\n          type: 'warning',\n          message: { id: 'notification.error', defaultMessage: 'An error occured' },\n        });\n      }\n    }\n\n    unlockApp?.();\n  };\n\n  if (isLoading) {\n    return (\n      <Main aria-busy=\"true\">\n        <Helmet\n          title={formatMessage({\n            id: 'Settings.profile.form.section.helmet.title',\n            defaultMessage: 'User profile',\n          })}\n        />\n        <HeaderLayout\n          title={formatMessage({\n            id: 'Settings.profile.form.section.profile.page.title',\n            defaultMessage: 'Profile page',\n          })}\n        />\n        <ContentLayout>\n          <LoadingIndicatorPage />\n        </ContentLayout>\n      </Main>\n    );\n  }\n\n  const hasLockedRole = dataSSO?.isSSOLocked ?? false;\n  const { email, firstname, lastname, username, preferedLanguage } = user ?? {};\n  const initialData = {\n    email,\n    firstname,\n    lastname,\n    username,\n    preferedLanguage,\n    currentTheme,\n    confirmPassword: '',\n    password: '',\n  };\n\n  return (\n    <Main aria-busy={isSubmittingForm}>\n      <Helmet\n        title={formatMessage({\n          id: 'Settings.profile.form.section.helmet.title',\n          defaultMessage: 'User profile',\n        })}\n      />\n      <Formik\n        onSubmit={handleSubmit}\n        initialValues={initialData}\n        validateOnChange={false}\n        validationSchema={PROFILE_VALIDTION_SCHEMA}\n        enableReinitialize\n      >\n        {({\n          errors,\n          values: {\n            email,\n            firstname,\n            lastname,\n            username,\n            preferedLanguage,\n            currentTheme,\n            ...passwordValues\n          },\n          handleChange,\n          isSubmitting,\n          dirty,\n        }) => {\n          return (\n            <Form>\n              <HeaderLayout\n                title={username || getFullName(firstname ?? '', lastname)}\n                primaryAction={\n                  <Button\n                    startIcon={<Check />}\n                    loading={isSubmitting}\n                    type=\"submit\"\n                    disabled={!dirty}\n                  >\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                }\n              />\n              <Box paddingBottom={10}>\n                <ContentLayout>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <UserInfoSection\n                      errors={errors}\n                      onChange={handleChange}\n                      values={{\n                        firstname,\n                        lastname,\n                        username,\n                        email,\n                      }}\n                    />\n                    {!hasLockedRole && (\n                      <PasswordSection\n                        errors={errors}\n                        onChange={handleChange}\n                        values={passwordValues}\n                      />\n                    )}\n                    <PreferencesSection\n                      onChange={handleChange}\n                      values={{\n                        preferedLanguage,\n                        currentTheme,\n                      }}\n                      localeNames={localeNames}\n                    />\n                  </Flex>\n                </ContentLayout>\n              </Box>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PasswordSection\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PasswordSectionProps {\n  errors: { currentPassword?: string; password?: string; confirmPassword?: string };\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n  values: {\n    currentPassword?: string;\n    password?: string;\n    confirmPassword?: string;\n  };\n}\n\nconst PasswordSection = ({ errors, onChange, values }: PasswordSectionProps) => {\n  const { formatMessage } = useIntl();\n  const [currentPasswordShown, setCurrentPasswordShown] = React.useState(false);\n  const [passwordShown, setPasswordShown] = React.useState(false);\n  const [passwordConfirmShown, setPasswordConfirmShown] = React.useState(false);\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Typography variant=\"delta\" as=\"h2\">\n          {formatMessage({\n            id: 'global.change-password',\n            defaultMessage: 'Change password',\n          })}\n        </Typography>\n        <Grid gap={5}>\n          <GridItem s={12} col={6}>\n            <TextInput\n              error={\n                errors.currentPassword\n                  ? formatMessage({\n                      id: errors.currentPassword,\n                      defaultMessage: errors.currentPassword,\n                    })\n                  : ''\n              }\n              onChange={onChange}\n              value={values.currentPassword}\n              label={formatMessage({\n                id: 'Auth.form.currentPassword.label',\n                defaultMessage: 'Current Password',\n              })}\n              name=\"currentPassword\"\n              type={currentPasswordShown ? 'text' : 'password'}\n              endAction={\n                <FieldActionWrapper\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setCurrentPasswordShown((prev) => !prev);\n                  }}\n                  label={formatMessage(\n                    currentPasswordShown\n                      ? {\n                          id: 'Auth.form.password.show-password',\n                          defaultMessage: 'Show password',\n                        }\n                      : {\n                          id: 'Auth.form.password.hide-password',\n                          defaultMessage: 'Hide password',\n                        }\n                  )}\n                >\n                  {currentPasswordShown ? <Eye /> : <EyeStriked />}\n                </FieldActionWrapper>\n              }\n            />\n          </GridItem>\n        </Grid>\n        <Grid gap={5}>\n          <GridItem s={12} col={6}>\n            <PasswordInput\n              error={\n                errors.password\n                  ? formatMessage({\n                      id: errors.password,\n                      defaultMessage: errors.password,\n                    })\n                  : ''\n              }\n              onChange={onChange}\n              value={values.password}\n              label={formatMessage({\n                id: 'global.password',\n                defaultMessage: 'Password',\n              })}\n              name=\"password\"\n              type={passwordShown ? 'text' : 'password'}\n              autoComplete=\"new-password\"\n              endAction={\n                <FieldActionWrapper\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setPasswordShown((prev) => !prev);\n                  }}\n                  label={formatMessage(\n                    passwordShown\n                      ? {\n                          id: 'Auth.form.password.show-password',\n                          defaultMessage: 'Show password',\n                        }\n                      : {\n                          id: 'Auth.form.password.hide-password',\n                          defaultMessage: 'Hide password',\n                        }\n                  )}\n                >\n                  {passwordShown ? <Eye /> : <EyeStriked />}\n                </FieldActionWrapper>\n              }\n            />\n          </GridItem>\n          <GridItem s={12} col={6}>\n            <PasswordInput\n              error={\n                errors.confirmPassword\n                  ? formatMessage({\n                      id: errors.confirmPassword,\n                      defaultMessage: errors.confirmPassword,\n                    })\n                  : ''\n              }\n              onChange={onChange}\n              value={values.confirmPassword}\n              label={formatMessage({\n                id: 'Auth.form.confirmPassword.label',\n                defaultMessage: 'Confirm Password',\n              })}\n              name=\"confirmPassword\"\n              type={passwordConfirmShown ? 'text' : 'password'}\n              autoComplete=\"new-password\"\n              endAction={\n                <FieldActionWrapper\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setPasswordConfirmShown((prev) => !prev);\n                  }}\n                  label={formatMessage(\n                    passwordConfirmShown\n                      ? {\n                          id: 'Auth.form.password.show-password',\n                          defaultMessage: 'Show password',\n                        }\n                      : {\n                          id: 'Auth.form.password.hide-password',\n                          defaultMessage: 'Hide password',\n                        }\n                  )}\n                >\n                  {passwordConfirmShown ? <Eye /> : <EyeStriked />}\n                </FieldActionWrapper>\n              }\n            />\n          </GridItem>\n        </Grid>\n      </Flex>\n    </Box>\n  );\n};\n\nconst PasswordInput = styled(TextInput)`\n  ::-ms-reveal {\n    display: none;\n  }\n`;\n\n// Wrapper of the Eye Icon able to show or hide the Password inside the field\nconst FieldActionWrapper = styled(FieldAction)`\n  svg {\n    height: ${pxToRem(16)};\n    width: ${pxToRem(16)};\n    path {\n      fill: ${({ theme }) => theme.colors.neutral600};\n    }\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * PreferencesSection\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PreferencesSectionProps extends Pick<GenericInputProps, 'onChange'> {\n  values: {\n    preferedLanguage?: string;\n    currentTheme?: string;\n  };\n  localeNames: Record<string, string>;\n}\n\nconst PreferencesSection = ({ onChange, values, localeNames }: PreferencesSectionProps) => {\n  const { formatMessage } = useIntl();\n  const themesToDisplay = useTypedSelector((state) => state.admin_app.theme.availableThemes);\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n          <Typography variant=\"delta\" as=\"h2\">\n            {formatMessage({\n              id: 'Settings.profile.form.section.experience.title',\n              defaultMessage: 'Experience',\n            })}\n          </Typography>\n          <Typography>\n            {formatMessage(\n              {\n                id: 'Settings.profile.form.section.experience.interfaceLanguageHelp',\n                defaultMessage:\n                  'Preference changes will apply only to you. More information is available {here}.',\n              },\n              {\n                here: (\n                  <Box\n                    as=\"a\"\n                    color=\"primary600\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#locales\"\n                  >\n                    {formatMessage({\n                      id: 'Settings.profile.form.section.experience.here',\n                      defaultMessage: 'here',\n                    })}\n                  </Box>\n                ),\n              }\n            )}\n          </Typography>\n        </Flex>\n        <Grid gap={5}>\n          <GridItem s={12} col={6}>\n            <SingleSelect\n              label={formatMessage({\n                id: 'Settings.profile.form.section.experience.interfaceLanguage',\n                defaultMessage: 'Interface language',\n              })}\n              placeholder={formatMessage({\n                id: 'global.select',\n                defaultMessage: 'Select',\n              })}\n              hint={formatMessage({\n                id: 'Settings.profile.form.section.experience.interfaceLanguage.hint',\n                defaultMessage: 'This will only display your own interface in the chosen language.',\n              })}\n              onClear={() => {\n                onChange({\n                  target: { name: 'preferedLanguage', value: null },\n                });\n              }}\n              clearLabel={formatMessage({\n                id: 'Settings.profile.form.section.experience.clear.select',\n                defaultMessage: 'Clear the interface language selected',\n              })}\n              value={values.preferedLanguage}\n              onChange={(e) => {\n                onChange({\n                  target: { name: 'preferedLanguage', value: e },\n                });\n              }}\n            >\n              {Object.entries(localeNames).map(([language, langName]) => (\n                <SingleSelectOption value={language} key={language}>\n                  {langName}\n                </SingleSelectOption>\n              ))}\n            </SingleSelect>\n          </GridItem>\n          <GridItem s={12} col={6}>\n            <SingleSelect\n              label={formatMessage({\n                id: 'Settings.profile.form.section.experience.mode.label',\n                defaultMessage: 'Interface mode',\n              })}\n              placeholder={formatMessage({\n                id: 'components.Select.placeholder',\n                defaultMessage: 'Select',\n              })}\n              hint={formatMessage({\n                id: 'Settings.profile.form.section.experience.mode.hint',\n                defaultMessage: 'Displays your interface in the chosen mode.',\n              })}\n              value={values.currentTheme}\n              onChange={(e) => {\n                onChange({\n                  target: { name: 'currentTheme', value: e },\n                });\n              }}\n            >\n              <SingleSelectOption value=\"system\">\n                {formatMessage({\n                  id: 'Settings.profile.form.section.experience.mode.option-system-label',\n                  defaultMessage: 'Use system settings',\n                })}\n              </SingleSelectOption>\n              {themesToDisplay.map((theme) => (\n                <SingleSelectOption value={theme} key={theme}>\n                  {formatMessage(\n                    {\n                      id: 'Settings.profile.form.section.experience.mode.option-label',\n                      defaultMessage: '{name} mode',\n                    },\n                    {\n                      name: formatMessage({\n                        id: theme,\n                        defaultMessage: upperFirst(theme),\n                      }),\n                    }\n                  )}\n                </SingleSelectOption>\n              ))}\n            </SingleSelect>\n          </GridItem>\n        </Grid>\n      </Flex>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * UserInfoSection\n * -----------------------------------------------------------------------------------------------*/\n\ninterface UserInfoSectionProps extends Pick<GenericInputProps, 'onChange'> {\n  errors: { firstname?: string; lastname?: string; username?: string; email?: string };\n  values: {\n    firstname?: string;\n    lastname?: string;\n    username?: string;\n    email?: string;\n  };\n}\n\nconst UserInfoSection = ({ errors, onChange, values }: UserInfoSectionProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Typography variant=\"delta\" as=\"h2\">\n          {formatMessage({\n            id: 'global.profile',\n            defaultMessage: 'Profile',\n          })}\n        </Typography>\n        <Grid gap={5}>\n          <GridItem s={12} col={6}>\n            <GenericInput\n              intlLabel={{\n                id: 'Auth.form.firstname.label',\n                defaultMessage: 'First name',\n              }}\n              error={errors.firstname}\n              onChange={onChange}\n              value={values.firstname}\n              type=\"text\"\n              name=\"firstname\"\n              required\n            />\n          </GridItem>\n          <GridItem s={12} col={6}>\n            <GenericInput\n              intlLabel={{\n                id: 'Auth.form.lastname.label',\n                defaultMessage: 'Last name',\n              }}\n              error={errors.lastname}\n              onChange={onChange}\n              value={values.lastname}\n              type=\"text\"\n              name=\"lastname\"\n            />\n          </GridItem>\n          <GridItem s={12} col={6}>\n            <GenericInput\n              intlLabel={{ id: 'Auth.form.email.label', defaultMessage: 'Email' }}\n              error={errors.email}\n              onChange={onChange}\n              value={values.email}\n              type=\"email\"\n              name=\"email\"\n              required\n            />\n          </GridItem>\n          <GridItem s={12} col={6}>\n            <GenericInput\n              intlLabel={{\n                id: 'Auth.form.username.label',\n                defaultMessage: 'Username',\n              }}\n              error={errors.username}\n              onChange={onChange}\n              value={values.username}\n              type=\"text\"\n              name=\"username\"\n            />\n          </GridItem>\n        </Grid>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { ProfilePage };\n"],"names":["currentTheme","email","firstname","lastname","username","preferedLanguage"],"mappings":"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"}