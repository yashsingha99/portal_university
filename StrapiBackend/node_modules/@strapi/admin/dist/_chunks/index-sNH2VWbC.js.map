{"version":3,"file":"index-sNH2VWbC.js","sources":["../../_internal/cli/index.ts","../../_internal/node/core/managers.ts","../../_internal/node/core/dependencies.ts","../../_internal/node/core/timer.ts","../../admin/src/components/NoJavascript.tsx","../../admin/src/components/DefaultDocument.tsx","../../_internal/node/staticFiles.ts","../../_internal/node/core/files.ts","../../_internal/node/core/env.ts","../../_internal/node/core/errors.ts","../../_internal/node/core/plugins.ts","../../_internal/node/core/admin-customisations.ts","../../_internal/node/createBuildContext.ts","../../_internal/node/build.ts","../../_internal/node/develop.ts"],"sourcesContent":["import type { StrapiCommand } from '@strapi/strapi';\nimport type { BuildCLIOptions } from './commands/build';\nimport type { DevelopCLIOptions } from './commands/develop';\n\n/**\n * `$ strapi build`\n */\nconst build: StrapiCommand = ({ command, ctx }) => {\n  command\n    .command('build')\n    .option('--bundler [bundler]', 'Bundler to use (webpack or vite)', 'webpack')\n    .option('--ignore-prompts', 'Ignore all prompts', false)\n    .option('-d, --debug', 'Enable debugging mode with verbose logs', false)\n    .option('--ignore-prompts', 'Ignore all prompts', false)\n    .option('--minify', 'Minify the output', true)\n    .option('--no-optimization', '[deprecated]: use minify instead')\n    .option('--silent', \"Don't log anything\", false)\n    .option('--sourcemap', 'Produce sourcemaps', false)\n    .option('--stats', 'Print build statistics to the console', false)\n    .description('Build the strapi admin app')\n    .action(async (options: BuildCLIOptions) => {\n      const { build } = await import('./commands/build');\n\n      return build({ ...options, ...ctx });\n    });\n};\n\n/**\n * `$ strapi develop`\n */\nconst develop: StrapiCommand = ({ command, ctx }) => {\n  command\n    .command('develop')\n    .alias('dev')\n    .option('--bundler [bundler]', 'Bundler to use (webpack or vite)', 'webpack')\n    .option('--ignore-prompts', 'Ignore all prompts', false)\n    .option('--watch-admin', 'Watch the admin panel for hot changes', false)\n    .option('-d, --debug', 'Enable debugging mode with verbose logs', false)\n    .option('--silent', \"Don't log anything\", false)\n    .option('--ignore-prompts', 'Ignore all prompts', false)\n    .option('--polling', 'Watch for file changes in network directories', false)\n    .option('--watch-admin', 'Watch the admin panel for hot changes', false)\n    .option(\n      '--no-build',\n      '[deprecated]: there is middleware for the server, it is no longer a separate process'\n    )\n    .option(\n      '--watch-admin',\n      '[deprecated]: there is now middleware for watching, it is no longer a separate process'\n    )\n    .option('--browser <name>', '[deprecated]: use open instead')\n    .option('--open', 'Open the admin in your browser', true)\n    .description('Start your Strapi application in development mode')\n    .action(async (options: DevelopCLIOptions) => {\n      const { develop } = await import('./commands/develop');\n\n      return develop({ ...options, ...ctx });\n    });\n};\n\nexport { build, develop };\n","/**\n * @description Supports the following managers:\n * – npm\n * – yarn\n * – pnpm\n */\nconst getPackageManager = () => {\n  // Yes, the env var is lowercase - it is set by the package managers themselves\n  const agent = process.env.npm_config_user_agent || '';\n\n  if (agent.includes('yarn')) {\n    return 'yarn';\n  }\n\n  if (agent.includes('pnpm')) {\n    return 'pnpm';\n  }\n\n  // Both yarn and pnpm does a `npm/?` thing, thus the slightly different match here\n  // Theoretically not needed since we check for yarn/pnpm above, but in case other\n  // package managers do the same thing, we'll (hopefully) catch them here.\n  if (/^npm\\/\\d/.test(agent)) {\n    return 'npm';\n  }\n\n  return undefined;\n};\n\nexport { getPackageManager };\n","import os from 'node:os';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport inquirer from 'inquirer';\nimport semver, { SemVer } from 'semver';\nimport resolveFrom from 'resolve-from';\nimport execa, { CommonOptions, ExecaReturnValue } from 'execa';\nimport readPkgUp, { PackageJson } from 'read-pkg-up';\nimport type { BuildOptions } from '../build';\nimport { getPackageManager } from './managers';\n\n/**\n * From V5 this will be imported from the package.json of `@strapi/strapi`.\n */\nconst PEER_DEPS = {\n  react: '^18.0.0',\n  'react-dom': '^18.0.0',\n  'react-router-dom': '^5.2.0',\n  'styled-components': '^5.2.1',\n};\n\ninterface CheckRequiredDependenciesResult {\n  didInstall: boolean;\n}\n\ninterface DepToInstall {\n  name: string;\n  wantedVersion: string;\n  declaredVersion?: never;\n}\n\n/**\n * Checks the user's project that it has declared and installed the required dependencies\n * needed by the Strapi admin project. Whilst generally speaking most modules will be\n * declared by the actual packages there are some packages where you only really want one of\n * and thus they are declared as peer dependencies – react / styled-components / etc.\n *\n * If these deps are not installed or declared, then we prompt the user to correct this. In\n * V4 this is not a hard requirement, but in V5 it will be. Might as well get people started now.\n */\nconst checkRequiredDependencies = async ({\n  cwd,\n  logger,\n  ignorePrompts,\n}: Pick<\n  BuildOptions,\n  'cwd' | 'logger' | 'ignorePrompts'\n>): Promise<CheckRequiredDependenciesResult> => {\n  const pkg = await readPkgUp({ cwd });\n\n  if (!pkg) {\n    throw new Error(`Could not find package.json at path: ${cwd}`);\n  }\n\n  logger.debug('Loaded package.json:', os.EOL, pkg.packageJson);\n\n  interface DepToReview {\n    name: string;\n    wantedVersion: string;\n    declaredVersion: string;\n  }\n\n  /**\n   * Run through each of the peer deps and figure out if they need to be\n   * installed or they need their version checked against.\n   */\n  const { install, review } = Object.entries(PEER_DEPS).reduce<{\n    install: DepToInstall[];\n    review: DepToReview[];\n  }>(\n    (acc, [name, version]) => {\n      if (!pkg.packageJson.dependencies) {\n        throw new Error(`Could not find dependencies in package.json at path: ${cwd}`);\n      }\n\n      const declaredVersion = pkg.packageJson.dependencies[name];\n\n      if (!declaredVersion) {\n        acc.install.push({\n          name,\n          wantedVersion: version,\n        });\n      } else {\n        acc.review.push({\n          name,\n          wantedVersion: version,\n          declaredVersion,\n        });\n      }\n\n      return acc;\n    },\n    {\n      install: [],\n      review: [],\n    }\n  );\n\n  if (install.length > 0) {\n    logger.info(\n      'The Strapi admin needs to install the following dependencies:',\n      os.EOL,\n      install.map(({ name, wantedVersion }) => `  - ${name}@${wantedVersion}`).join(os.EOL)\n    );\n\n    /**\n     * temporary until V5 when we _will_ be enforcing these dependencies as required.\n     */\n    if (process.env.NODE_ENV !== 'development' || ignorePrompts) {\n      return { didInstall: false };\n    }\n\n    /**\n     * This prompt can be removed in V5 & therefore the code underneath can be refactored to\n     * only install the deps and return that we installed deps.\n     */\n    const { install: installAns } = await inquirer.prompt({\n      type: 'confirm',\n      name: 'install',\n      default: true,\n      message:\n        'Would you like to install these dependencies now? These are not required but are recommended, from V5 these will be required.',\n    });\n\n    if (installAns) {\n      await installDependencies(install, {\n        cwd,\n        logger,\n      });\n\n      const [file, ...args] = process.argv;\n\n      /**\n       * Re-run the same command after installation e.g. strapi build because the yarn.lock might\n       * not be the same and could break installations. It's not the best solution, but it works.\n       */\n      await execa(file, args, { cwd, stdio: 'inherit' });\n      return { didInstall: true };\n    } else {\n      return { didInstall: false };\n    }\n  }\n\n  if (review.length) {\n    const errors: string[] = [];\n\n    for (const dep of review) {\n      // The version specified in package.json could be incorrect, eg `foo`\n      let minDeclaredVersion: SemVer | null = null;\n      try {\n        minDeclaredVersion = semver.minVersion(dep.declaredVersion);\n      } catch (err) {\n        // Intentional fall-through (variable will be left as null, throwing below)\n      }\n\n      if (!minDeclaredVersion) {\n        errors.push(\n          `The declared dependency, ${dep.name} has an invalid version in package.json: ${dep.declaredVersion}`\n        );\n      } else if (!semver.satisfies(minDeclaredVersion, dep.wantedVersion)) {\n        /**\n         * The delcared version should be semver compatible with our required version\n         * of the dependency. If it's not, we should advise the user to change it.\n         */\n        logger.warn(\n          [\n            `Declared version of ${dep.name} (${minDeclaredVersion}) is not compatible with the version required by Strapi (${dep.wantedVersion}).`,\n            'You may experience issues, we recommend you change this.',\n          ].join(os.EOL)\n        );\n      }\n\n      const installedVersion = await getModuleVersion(dep.name, cwd);\n\n      if (!installedVersion) {\n        /**\n         * TODO: when we know the packageManager we can advise the actual install command.\n         */\n        errors.push(\n          `The declared dependency, ${dep.name} is not installed. You should install before re-running this command`\n        );\n      } else if (!semver.satisfies(installedVersion, dep.wantedVersion)) {\n        logger.warn(\n          [\n            `Declared version of ${dep.name} (${installedVersion}) is not compatible with the version required by Strapi (${dep.wantedVersion}).`,\n            'You may experience issues, we recommend you change this.',\n          ].join(os.EOL)\n        );\n      }\n    }\n\n    if (errors.length > 0 && process.env.NODE_ENV === 'development') {\n      throw new Error(`${os.EOL}- ${errors.join(`${os.EOL}- `)}`);\n    }\n  }\n\n  return { didInstall: false };\n};\n\nconst getModule = async (name: string, cwd: string): Promise<PackageJson | null> => {\n  const modulePackagePath = resolveFrom.silent(cwd, path.join(name, 'package.json'));\n  if (!modulePackagePath) {\n    return null;\n  }\n  const file = await fs.readFile(modulePackagePath, 'utf8').then((res) => JSON.parse(res));\n\n  return file;\n};\n\nconst getModuleVersion = async (name: string, cwd: string): Promise<string | null> => {\n  const pkg = await getModule(name, cwd);\n\n  return pkg?.version || null;\n};\n\nconst installDependencies = async (\n  install: DepToInstall[],\n  { cwd, logger }: Pick<BuildOptions, 'cwd' | 'logger'>\n) => {\n  const packageManager = getPackageManager();\n\n  if (!packageManager) {\n    logger.error(\n      'Could not find a supported package manager, please install the dependencies manually.'\n    );\n    process.exit(1);\n  }\n\n  const execOptions: CommonOptions<'utf8'> = {\n    encoding: 'utf8',\n    cwd,\n    stdio: 'inherit',\n  };\n\n  const packages = install.map(({ name, wantedVersion }) => `${name}@${wantedVersion}`);\n\n  let result: ExecaReturnValue<string> | undefined;\n\n  if (packageManager === 'npm') {\n    const npmArgs = ['install', '--legacy-peer-deps', '--save', ...packages];\n    logger.info(`Running 'npm ${npmArgs.join(' ')}'`);\n    result = await execa('npm', npmArgs, execOptions);\n  } else if (packageManager === 'yarn') {\n    const yarnArgs = ['add', ...packages];\n    logger.info(`Running 'yarn ${yarnArgs.join(' ')}'`);\n    result = await execa('yarn', yarnArgs, execOptions);\n  } else if (packageManager === 'pnpm') {\n    const pnpmArgs = ['add', '--save-prod', ...packages];\n    logger.info(`Running 'pnpm ${pnpmArgs.join(' ')}'`);\n    result = await execa('pnpm', pnpmArgs, execOptions);\n  }\n\n  if (result?.exitCode || result?.failed) {\n    throw new Error('Package installation failed');\n  }\n};\n\nexport { checkRequiredDependencies, getModule };\nexport type { CheckRequiredDependenciesResult, PackageJson };\n","import { performance } from 'perf_hooks';\n\nexport interface TimeMeasurer {\n  start: (name: string) => void;\n  end: (name: string) => number;\n  getTimings: () => Record<string, number>;\n}\n\nexport function getTimer(): TimeMeasurer {\n  const timings: Record<string, number> = {};\n  const startTimes: Record<string, number> = {};\n\n  function start(name: string): void {\n    if (typeof startTimes[name] !== 'undefined') {\n      throw new Error(`Timer \"${name}\" already started, cannot overwrite`);\n    }\n\n    startTimes[name] = performance.now();\n  }\n\n  function end(name: string): number {\n    if (typeof startTimes[name] === 'undefined') {\n      throw new Error(`Timer \"${name}\" never started, cannot end`);\n    }\n\n    timings[name] = performance.now() - startTimes[name];\n    return timings[name];\n  }\n\n  return { start, end, getTimings: () => timings };\n}\n\nexport const prettyTime = (timeInMs: number): string => {\n  return Math.ceil(timeInMs) + 'ms';\n};\n","const styles = `\n.strapi--root {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  background: #fff;\n}\n\n.strapi--no-js {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  font-family: helvetica, arial, sans-serif;\n}\n`;\n\n/**\n * @internal\n *\n * @description this belongs to our default document that we render.\n */\nconst NoJavascript = () => {\n  return (\n    <noscript>\n      <div className=\"strapi--root\">\n        <div className=\"strapi--no-js\">\n          <style type=\"text/css\">{styles}</style>\n          <h1>JavaScript disabled</h1>\n          <p>\n            Please <a href=\"https://www.enable-javascript.com/\">enable JavaScript</a> in your\n            browser and reload the page to proceed.\n          </p>\n        </div>\n      </div>\n    </noscript>\n  );\n};\n\nexport { NoJavascript };\n","import { NoJavascript } from './NoJavascript';\n\n/**\n * TODO: add favicons.........\n */\n\nconst globalStyles = `\n  html,\n  body,\n  #strapi {\n    height: 100%;\n  }\n  body {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n  }\n`;\n\ninterface DefaultDocumentProps {\n  entryPath?: string;\n}\n\n/**\n * @internal\n */\nconst DefaultDocument = ({ entryPath }: DefaultDocumentProps) => {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\" />\n        <meta name=\"robots\" content=\"noindex\" />\n        <meta name=\"referrer\" content=\"same-origin\" />\n\n        <title>Strapi Admin</title>\n        <style>{globalStyles}</style>\n      </head>\n      <body>\n        <div id=\"strapi\" />\n        <NoJavascript />\n        {entryPath ? <script type=\"module\" src={entryPath} /> : null}\n      </body>\n    </html>\n  );\n};\n\nexport { DefaultDocument };\n","import fs from 'node:fs/promises';\nimport path from 'node:path';\nimport outdent from 'outdent';\nimport { format } from 'prettier';\nimport { createElement } from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { DefaultDocument } from '../../admin/src/components/DefaultDocument';\n\nimport type { BuildContext } from './createBuildContext';\n\nconst getEntryModule = (ctx: BuildContext): string => {\n  const pluginsObject = ctx.plugins\n    .map(({ name, importName }) => `'${name}': ${importName}`)\n    .join(',\\n');\n\n  const pluginsImport = ctx.plugins\n    .map(({ importName, modulePath }) => `import ${importName} from '${modulePath}';`)\n    .join('\\n');\n\n  return outdent`\n        /**\n         * This file was automatically generated by Strapi.\n         * Any modifications made will be discarded.\n         */\n        ${pluginsImport}\n        import { renderAdmin } from \"@strapi/strapi/admin\"\n\n        ${\n          ctx.customisations?.modulePath\n            ? `import customisations from '${ctx.customisations.modulePath}'`\n            : ''\n        }\n\n        renderAdmin(\n          document.getElementById(\"strapi\"),\n          {\n            ${ctx.customisations?.modulePath ? 'customisations,' : ''}\n            ${ctx.features ? `features: ${JSON.stringify(ctx.features)},` : ''}\n            plugins: {\n        ${pluginsObject}\n            }\n        })\n      `;\n};\n\ninterface GetDocumentHTMLArgs extends Pick<BuildContext, 'logger'> {\n  props?: {\n    entryPath?: string;\n  };\n}\n\n/**\n * TODO: Here in the future we could add the ability\n * to load a user's Document component?\n */\nconst getDocumentHTML = ({ logger, props = {} }: GetDocumentHTMLArgs) => {\n  const result = renderToStaticMarkup(createElement(DefaultDocument, props));\n  logger.debug('Rendered the HTML');\n\n  return outdent`<!DOCTYPE html>${result}`;\n};\n\nconst AUTO_GENERATED_WARNING = `\nThis file was automatically generated by Strapi.\nAny modifications made will be discarded.\n`.trim();\n\n/**\n * Because we now auto-generate the index.html file,\n * we should be clear that people _should not_ modify it.\n *\n * @internal\n */\nconst decorateHTMLWithAutoGeneratedWarning = (htmlTemplate: string): string =>\n  htmlTemplate.replace(/<head/, `\\n<!--\\n${AUTO_GENERATED_WARNING}\\n-->\\n<head`);\n\nconst writeStaticClientFiles = async (ctx: BuildContext) => {\n  /**\n   * For everything to work effectively we create a client folder in `.strapi` at the cwd level.\n   * We then use the function we need to \"createAdmin\" as well as generate the Document index.html as well.\n   *\n   * All this links together an imaginary \"src/index\" that then allows vite to correctly build the admin panel.\n   */\n\n  await fs.mkdir(ctx.runtimeDir, { recursive: true });\n  ctx.logger.debug('Created the runtime directory');\n\n  const indexHtml = decorateHTMLWithAutoGeneratedWarning(\n    await getDocumentHTML({\n      logger: ctx.logger,\n      props:\n        ctx.bundler === 'vite'\n          ? {\n              entryPath: `/${ctx.entry}`,\n            }\n          : undefined,\n    })\n  );\n\n  await fs.writeFile(\n    path.join(ctx.runtimeDir, 'index.html'),\n    format(indexHtml, {\n      parser: 'html',\n    })\n  );\n  ctx.logger.debug('Wrote the index.html file');\n  await fs.writeFile(\n    path.join(ctx.runtimeDir, 'app.js'),\n    format(getEntryModule(ctx), {\n      parser: 'babel',\n    })\n  );\n  ctx.logger.debug('Wrote the app.js file');\n};\n\nexport { writeStaticClientFiles, getDocumentHTML };\n","import path from 'node:path';\nimport { access } from 'node:fs/promises';\nimport { register } from 'esbuild-register/dist/node';\n\n/**\n * @internal\n */\nconst pathExists = async (path: string) => {\n  try {\n    await access(path);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * @internal\n */\nconst loadFile = async (path: string): Promise<undefined | any> => {\n  if (await pathExists(path)) {\n    const esbuildOptions: Parameters<typeof register>[0] = {\n      extensions: ['.js', '.mjs', '.ts'],\n    };\n\n    const { unregister } = register(esbuildOptions);\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const mod = require(path);\n\n    unregister();\n\n    /**\n     * handles esm or cjs exporting.\n     */\n    const file = mod?.default || mod || undefined;\n\n    return file;\n  }\n\n  return undefined;\n};\n\n/**\n * @internal\n *\n * @description Converts a system path to a module path mainly for `Windows` systems.\n * where the path separator is `\\` instead of `/`, on linux systems the path separator\n * is identical to the module path separator.\n */\nconst convertSystemPathToModulePath = (sysPath: string) => {\n  if (process.platform === 'win32') {\n    return sysPath.split(path.sep).join(path.posix.sep);\n  } else {\n    return sysPath;\n  }\n};\n\n/**\n * @internal\n *\n * @description Converts a module path to a system path, again largely used for Windows systems.\n * The original use case was plugins where the resolve path was in module format but we want to\n * have it relative to the runtime directory.\n */\nconst convertModulePathToSystemPath = (modulePath: string) => {\n  if (process.platform === 'win32') {\n    return modulePath.split(path.posix.sep).join(path.sep);\n  } else {\n    return modulePath;\n  }\n};\n\nexport { pathExists, loadFile, convertSystemPathToModulePath, convertModulePathToSystemPath };\n","import path from 'node:path';\nimport dotenv from 'dotenv';\nimport { pathExists } from './files';\n\n/**\n * This is the base of _any_ env set for a strapi project,\n * to build a strapi admin panel we require these env variables.\n */\ninterface DefaultEnv {\n  ADMIN_PATH: string;\n  STRAPI_ADMIN_BACKEND_URL: string;\n  STRAPI_TELEMETRY_DISABLED: string;\n}\n\n/**\n * @internal\n *\n * @description Load the .env file if it exists\n */\nconst loadEnv = async (cwd: string) => {\n  const pathToEnv = path.resolve(cwd, '.env');\n\n  if (await pathExists(pathToEnv)) {\n    dotenv.config({ path: pathToEnv });\n  }\n};\n\n/**\n * @internal\n *\n * @description Get all the environment variables that start with `STRAPI_ADMIN_`\n */\nconst getStrapiAdminEnvVars = (defaultEnv: DefaultEnv): Record<string, string> => {\n  return Object.keys(process.env)\n    .filter((key) => key.toUpperCase().startsWith('STRAPI_ADMIN_'))\n    .reduce((acc, key) => {\n      acc[key] = process.env[key] as string;\n\n      return acc;\n    }, defaultEnv as unknown as Record<string, string>);\n};\n\nexport { getStrapiAdminEnvVars, loadEnv };\n","import boxen from 'boxen';\nimport chalk from 'chalk';\nimport os from 'node:os';\n\nconst isError = (err: unknown): err is Error => err instanceof Error;\n\n/**\n * @description Handle unexpected errors. No, but really, your CLI should anticipate error cases.\n * If a user hits an error we don't expect, then we need to flag to them that this is not normal\n * and they should use the `--debug` flag to get more information (assuming you've implemented this\n * in your action).\n */\nconst handleUnexpectedError = (err: unknown) => {\n  console.error(\n    chalk.red(\n      `[ERROR] `,\n      'There seems to be an unexpected error, try again with --debug for more information',\n      os.EOL\n    )\n  );\n\n  if (isError(err) && err.stack) {\n    // eslint-disable-next-line no-console\n    console.log(\n      chalk.red(\n        boxen(err.stack, {\n          padding: 1,\n          align: 'left',\n        })\n      )\n    );\n  }\n\n  process.exit(1);\n};\n\nexport { handleUnexpectedError, isError };\n","import os from 'node:os';\nimport path from 'node:path';\nimport fs from 'node:fs';\nimport camelCase from 'lodash/camelCase';\nimport { env } from '@strapi/utils';\nimport { getModule, PackageJson } from './dependencies';\nimport { convertModulePathToSystemPath, convertSystemPathToModulePath, loadFile } from './files';\nimport { BuildContext } from '../createBuildContext';\nimport { isError } from './errors';\n\ninterface LocalPluginMeta {\n  name: string;\n  /**\n   * camelCased version of the plugin name\n   */\n  importName: string;\n  /**\n   * The path to the plugin, relative to the app's root directory\n   * in system format\n   */\n  path: string;\n  /**\n   * The path to the plugin, relative to the runtime directory\n   * in module format (i.e. with forward slashes) because thats\n   * where it should be used as an import\n   */\n  modulePath: string;\n  type: 'local';\n}\n\ninterface ModulePluginMeta {\n  name: string;\n  /**\n   * camelCased version of the plugin name\n   */\n  importName: string;\n  /**\n   * Modules don't have a path because we never resolve them to their node_modules\n   * because we simply do not require it.\n   */\n  path?: never;\n  /**\n   * The path to the plugin, relative to the app's root directory\n   * in module format (i.e. with forward slashes)\n   */\n  modulePath: string;\n  type: 'module';\n}\n\ntype PluginMeta = LocalPluginMeta | ModulePluginMeta;\n\ninterface StrapiPlugin extends PackageJson {\n  strapi: {\n    description?: string;\n    displayName?: string;\n    kind: 'plugin';\n    name?: string;\n    required?: boolean;\n  };\n}\n\nconst validatePackageHasStrapi = (\n  pkg: PackageJson\n): pkg is PackageJson & { strapi: Record<string, unknown> } =>\n  'strapi' in pkg &&\n  typeof pkg.strapi === 'object' &&\n  !Array.isArray(pkg.strapi) &&\n  pkg.strapi !== null;\n\nconst validatePackageIsPlugin = (pkg: PackageJson): pkg is StrapiPlugin =>\n  validatePackageHasStrapi(pkg) && pkg.strapi.kind === 'plugin';\n\nconst getEnabledPlugins = async ({\n  cwd,\n  logger,\n  runtimeDir,\n  strapi,\n}: Pick<BuildContext, 'cwd' | 'logger' | 'strapi' | 'runtimeDir'>): Promise<\n  Record<string, PluginMeta>\n> => {\n  const plugins: Record<string, PluginMeta> = {};\n\n  /**\n   * This is the list of dependencies that are installed in the user's project.\n   * It will include libraries like \"react\", so we need to collect the ones that\n   * are plugins.\n   */\n  const deps = strapi.config.get('info.dependencies', {});\n\n  logger.debug(\"Dependencies from user's project\", os.EOL, deps);\n\n  for (const dep of Object.keys(deps)) {\n    const pkg = await getModule(dep, cwd);\n\n    if (pkg && validatePackageIsPlugin(pkg)) {\n      const name = pkg.strapi.name || pkg.name;\n\n      if (!name) {\n        /**\n         * Unlikely to happen, but you never know.\n         */\n        throw Error(\n          \"You're trying to import a plugin that doesn't have a name – check the package.json of that plugin!\"\n        );\n      }\n\n      plugins[name] = {\n        name,\n        importName: camelCase(name),\n        type: 'module',\n        modulePath: dep,\n      };\n    }\n  }\n\n  const userPluginsFile = await loadUserPluginsFile(strapi.dirs.app.config);\n\n  logger.debug(\"User's plugins file\", os.EOL, userPluginsFile);\n\n  for (const [userPluginName, userPluginConfig] of Object.entries(userPluginsFile)) {\n    if (userPluginConfig.enabled && userPluginConfig.resolve) {\n      const sysPath = convertModulePathToSystemPath(userPluginConfig.resolve);\n      plugins[userPluginName] = {\n        name: userPluginName,\n        importName: camelCase(userPluginName),\n        type: 'local',\n        /**\n         * User plugin paths are resolved from the entry point\n         * of the app, because that's how you import them.\n         */\n        modulePath: convertSystemPathToModulePath(path.relative(runtimeDir, sysPath)),\n        path: sysPath,\n      };\n    }\n  }\n\n  return plugins;\n};\n\nconst PLUGIN_CONFIGS = ['plugins.js', 'plugins.mjs', 'plugins.ts'];\n\ntype UserPluginConfigFile = Record<string, { enabled: boolean; resolve: string }>;\n\nconst loadUserPluginsFile = async (root: string): Promise<UserPluginConfigFile> => {\n  for (const file of PLUGIN_CONFIGS) {\n    const filePath = path.join(root, file);\n    const configFile = await loadFile(filePath);\n\n    if (configFile) {\n      /**\n       * Configs can be a function or they can be just an object!\n       */\n      return typeof configFile === 'function' ? configFile({ env }) : configFile;\n    }\n  }\n\n  return {};\n};\n\nconst getMapOfPluginsWithAdmin = (plugins: Record<string, PluginMeta>) =>\n  Object.values(plugins)\n    .filter((plugin) => {\n      if (!plugin) {\n        return false;\n      }\n\n      /**\n       * There are two ways a plugin should be imported, either it's local to the strapi app,\n       * or it's an actual npm module that's installed and resolved via node_modules.\n       *\n       * We first check if the plugin is local to the strapi app, using a regular `fs.existsSync` because\n       * the pathToPlugin will be relative i.e. `/Users/my-name/strapi-app/src/plugins/my-plugin`.\n       *\n       * If the file doesn't exist well then it's probably a node_module, so instead we use `require.resolve`\n       * which will resolve the path to the module in node_modules. If it fails with the specific code `MODULE_NOT_FOUND`\n       * then it doesn't have an admin part to the package.\n       */\n      try {\n        const isLocalPluginWithLegacyAdminFile =\n          plugin.path && fs.existsSync(path.join(plugin.path, 'strapi-admin.js'));\n\n        if (!isLocalPluginWithLegacyAdminFile) {\n          const isModuleWithFE = require.resolve(`${plugin.modulePath}/strapi-admin`);\n\n          return isModuleWithFE;\n        }\n\n        return isLocalPluginWithLegacyAdminFile;\n      } catch (err) {\n        if (\n          isError(err) &&\n          'code' in err &&\n          (err.code === 'MODULE_NOT_FOUND' || err.code === 'ERR_PACKAGE_PATH_NOT_EXPORTED')\n        ) {\n          /**\n           * the plugin does not contain FE code, so we\n           * don't want to import it anyway\n           */\n          return false;\n        }\n\n        throw err;\n      }\n    })\n    .map((plugin) => ({\n      ...plugin,\n      modulePath: `${plugin.modulePath}/strapi-admin`,\n    }));\n\nexport { getEnabledPlugins, getMapOfPluginsWithAdmin };\nexport type { PluginMeta, LocalPluginMeta, ModulePluginMeta };\n","import path from 'node:path';\nimport { convertSystemPathToModulePath, pathExists } from '../core/files';\nimport { BuildContext } from '../createBuildContext';\n\nconst ADMIN_APP_FILES = ['app.js', 'app.mjs', 'app.ts', 'app.jsx', 'app.tsx'];\n\ninterface AdminCustomisations {\n  config?: {\n    locales?: string[];\n  };\n  bootstrap?: Function;\n}\n\ninterface AppFile {\n  /**\n   * The system path to the file\n   */\n  path: string;\n  /**\n   * The module path to the file i.e. how you would import it\n   */\n  modulePath: string;\n}\n\nconst loadUserAppFile = async ({\n  runtimeDir,\n  appDir,\n}: Pick<BuildContext, 'appDir' | 'runtimeDir'>): Promise<AppFile | undefined> => {\n  for (const file of ADMIN_APP_FILES) {\n    const filePath = path.join(appDir, 'src', 'admin', file);\n\n    if (await pathExists(filePath)) {\n      return {\n        path: filePath,\n        modulePath: convertSystemPathToModulePath(path.relative(runtimeDir, filePath)),\n      };\n    }\n  }\n\n  return undefined;\n};\n\nexport { loadUserAppFile };\nexport type { AdminCustomisations, AppFile };\n","import os from 'node:os';\nimport path from 'node:path';\nimport fs from 'node:fs/promises';\nimport browserslist from 'browserslist';\nimport strapiFactory, { CLIContext } from '@strapi/strapi';\nimport { getConfigUrls } from '@strapi/utils';\n\nimport { getStrapiAdminEnvVars, loadEnv } from './core/env';\n\nimport type { BuildOptions } from './build';\nimport { DevelopOptions } from './develop';\nimport { PluginMeta, getEnabledPlugins, getMapOfPluginsWithAdmin } from './core/plugins';\nimport { Strapi, FeaturesService } from '@strapi/types';\nimport { AppFile, loadUserAppFile } from './core/admin-customisations';\n\ninterface BuildContext {\n  /**\n   * The absolute path to the app directory defined by the Strapi instance\n   */\n  appDir: string;\n  /**\n   * If a user is deploying the project under a nested public path, we use\n   * this path so all asset paths will be rewritten accordingly\n   */\n  basePath: string;\n  /**\n   * The customisations defined by the user in their app.js file\n   */\n  customisations?: AppFile;\n  /**\n   * The bundler to use for building & watching\n   */\n  bundler: Pick<Required<BuildOptions>, 'bundler'>['bundler'];\n  /**\n   * The current working directory\n   */\n  cwd: string;\n  /**\n   * The absolute path to the dist directory\n   */\n  distPath: string;\n  /**\n   * The relative path to the dist directory\n   */\n  distDir: string;\n  /**\n   * The absolute path to the entry file\n   */\n  entry: string;\n  /**\n   * The environment variables to be included in the JS bundle\n   */\n  env: Record<string, string>;\n  /**\n   * Features object with future flags\n   */\n  features?: FeaturesService['config'];\n  logger: CLIContext['logger'];\n  /**\n   * The build options\n   */\n  options: Pick<BuildOptions, 'minify' | 'sourcemaps' | 'stats'> & Pick<DevelopOptions, 'open'>;\n  /**\n   * The plugins to be included in the JS bundle\n   * incl. internal plugins, third party plugins & local plugins\n   */\n  plugins: PluginMeta[];\n  /**\n   * The absolute path to the runtime directory\n   */\n  runtimeDir: string;\n  /**\n   * The Strapi instance\n   */\n  strapi: Strapi;\n  /**\n   * The browserslist target either loaded from the user's workspace or falling back to the default\n   */\n  target: string[];\n  tsconfig?: CLIContext['tsconfig'];\n}\n\ninterface CreateBuildContextArgs extends CLIContext {\n  strapi?: Strapi;\n  options?: BuildContext['options'] & { bundler?: BuildOptions['bundler'] };\n}\n\nconst DEFAULT_BROWSERSLIST = [\n  'last 3 major versions',\n  'Firefox ESR',\n  'last 2 Opera versions',\n  'not dead',\n];\n\nconst createBuildContext = async ({\n  cwd,\n  logger,\n  tsconfig,\n  strapi,\n  options = {},\n}: CreateBuildContextArgs): Promise<BuildContext> => {\n  /**\n   * If you make a new strapi instance when one already exists,\n   * you will overwrite the global and the app will _most likely_\n   * crash and die.\n   */\n  const strapiInstance =\n    strapi ??\n    strapiFactory({\n      // Directories\n      appDir: cwd,\n      distDir: tsconfig?.config.options.outDir ?? '',\n      // Options\n      autoReload: true,\n      serveAdminPanel: false,\n    });\n\n  const { serverUrl, adminPath } = getConfigUrls(strapiInstance.config, true);\n\n  const appDir = strapiInstance.dirs.app.root;\n\n  await loadEnv(cwd);\n\n  const env = getStrapiAdminEnvVars({\n    ADMIN_PATH: adminPath,\n    STRAPI_ADMIN_BACKEND_URL: serverUrl,\n    STRAPI_TELEMETRY_DISABLED: String(strapiInstance.telemetry.isDisabled),\n  });\n\n  const envKeys = Object.keys(env);\n\n  if (envKeys.length > 0) {\n    logger.info(\n      [\n        'Including the following ENV variables as part of the JS bundle:',\n        ...envKeys.map((key) => `    - ${key}`),\n      ].join(os.EOL)\n    );\n  }\n\n  const distPath = path.join(strapiInstance.dirs.dist.root, 'build');\n  const distDir = path.relative(cwd, distPath);\n\n  /**\n   * If the distPath already exists, clean it\n   */\n  try {\n    logger.debug(`Cleaning dist folder: ${distPath}`);\n    await fs.rm(distPath, { recursive: true, force: true });\n    logger.debug('Cleaned dist folder');\n  } catch {\n    // do nothing, it will fail if the folder does not exist\n    logger.debug('There was no dist folder to clean');\n  }\n\n  const runtimeDir = path.join(cwd, '.strapi', 'client');\n  const entry = path.relative(cwd, path.join(runtimeDir, 'app.js'));\n\n  const plugins = await getEnabledPlugins({ cwd, logger, runtimeDir, strapi: strapiInstance });\n\n  logger.debug('Enabled plugins', os.EOL, plugins);\n\n  const pluginsWithFront = getMapOfPluginsWithAdmin(plugins);\n\n  logger.debug('Enabled plugins with FE', os.EOL, pluginsWithFront);\n\n  const target = browserslist.loadConfig({ path: cwd }) ?? DEFAULT_BROWSERSLIST;\n\n  const customisations = await loadUserAppFile({ appDir, runtimeDir });\n\n  const features = strapiInstance.config.get('features', undefined);\n\n  const { bundler = 'webpack', ...restOptions } = options;\n\n  const buildContext = {\n    appDir,\n    basePath: `${adminPath}/`,\n    bundler,\n    customisations,\n    cwd,\n    distDir,\n    distPath,\n    entry,\n    env,\n    logger,\n    options: restOptions,\n    plugins: pluginsWithFront,\n    runtimeDir,\n    strapi: strapiInstance,\n    target,\n    tsconfig,\n    features,\n  } satisfies BuildContext;\n\n  return buildContext;\n};\n\nexport { createBuildContext };\nexport type { BuildContext, CreateBuildContextArgs };\n","import type { CLIContext } from '@strapi/strapi';\nimport EE from '@strapi/strapi/dist/utils/ee';\nimport * as tsUtils from '@strapi/typescript-utils';\nimport { checkRequiredDependencies } from './core/dependencies';\nimport { getTimer, prettyTime } from './core/timer';\nimport { writeStaticClientFiles } from './staticFiles';\nimport { createBuildContext } from './createBuildContext';\n\ninterface BuildOptions extends CLIContext {\n  /**\n   * @default false\n   */\n  ignorePrompts?: boolean;\n  /**\n   * Which bundler to use for building.\n   *\n   * @default webpack\n   */\n  bundler?: 'webpack' | 'vite';\n  /**\n   * Minify the output\n   *\n   * @default true\n   */\n  minify?: boolean;\n  /**\n   * Generate sourcemaps – useful for debugging bugs in the admin panel UI.\n   */\n  sourcemaps?: boolean;\n  /**\n   * Print stats for build\n   */\n  stats?: boolean;\n}\n\n/**\n * @example `$ strapi build`\n *\n * @description Builds the admin panel of the strapi application.\n */\nconst build = async ({ logger, cwd, tsconfig, ignorePrompts, ...options }: BuildOptions) => {\n  const timer = getTimer();\n\n  const { didInstall } = await checkRequiredDependencies({ cwd, logger, ignorePrompts }).catch(\n    (err) => {\n      logger.error(err.message);\n      process.exit(1);\n    }\n  );\n\n  if (didInstall) {\n    return;\n  }\n\n  if (tsconfig?.config) {\n    timer.start('compilingTS');\n    const compilingTsSpinner = logger.spinner(`Compiling TS`).start();\n\n    tsUtils.compile(cwd, { configOptions: { ignoreDiagnostics: false } });\n\n    const compilingDuration = timer.end('compilingTS');\n    compilingTsSpinner.text = `Compiling TS (${prettyTime(compilingDuration)})`;\n    compilingTsSpinner.succeed();\n  }\n\n  timer.start('createBuildContext');\n  const contextSpinner = logger.spinner(`Building build context`).start();\n  console.log('');\n\n  const ctx = await createBuildContext({\n    cwd,\n    logger,\n    tsconfig,\n    options,\n  });\n  const contextDuration = timer.end('createBuildContext');\n  contextSpinner.text = `Building build context (${prettyTime(contextDuration)})`;\n  contextSpinner.succeed();\n\n  timer.start('buildAdmin');\n  const buildingSpinner = logger.spinner(`Building admin panel`).start();\n  console.log('');\n\n  try {\n    EE.init(cwd);\n\n    await writeStaticClientFiles(ctx);\n\n    if (ctx.bundler === 'webpack') {\n      const { build: buildWebpack } = await import('./webpack/build');\n      await buildWebpack(ctx);\n    } else if (ctx.bundler === 'vite') {\n      const { build: buildVite } = await import('./vite/build');\n      await buildVite(ctx);\n    }\n\n    const buildDuration = timer.end('buildAdmin');\n    buildingSpinner.text = `Building admin panel (${prettyTime(buildDuration)})`;\n    buildingSpinner.succeed();\n  } catch (err) {\n    buildingSpinner.fail();\n    throw err;\n  }\n};\n\nexport { build };\nexport type { BuildOptions };\n","import type { CLIContext } from '@strapi/strapi';\nimport * as tsUtils from '@strapi/typescript-utils';\nimport { joinBy } from '@strapi/utils';\nimport chokidar from 'chokidar';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\n\nimport cluster from 'node:cluster';\nimport strapiFactory from '@strapi/strapi';\n\nimport { checkRequiredDependencies } from './core/dependencies';\nimport { getTimer, prettyTime, type TimeMeasurer } from './core/timer';\nimport { createBuildContext } from './createBuildContext';\nimport type { WebpackWatcher } from './webpack/watch';\nimport type { ViteWatcher } from './vite/watch';\n\nimport EE from '@strapi/strapi/dist/utils/ee';\nimport { writeStaticClientFiles } from './staticFiles';\n\ninterface DevelopOptions extends CLIContext {\n  /**\n   * @default false\n   */\n  ignorePrompts?: boolean;\n  /**\n   * Which bundler to use for building.\n   *\n   * @default webpack\n   */\n  bundler?: 'webpack' | 'vite';\n  polling?: boolean;\n  open?: boolean;\n  watchAdmin?: boolean;\n}\n\n// This method removes all non-admin build files from the dist directory\nconst cleanupDistDirectory = async ({\n  tsconfig,\n  logger,\n  timer,\n}: Pick<DevelopOptions, 'tsconfig' | 'logger'> & { timer: TimeMeasurer }) => {\n  const distDir = tsconfig?.config?.options?.outDir;\n\n  if (\n    !distDir || // we don't have a dist dir\n    (await fs\n      .access(distDir)\n      .then(() => false)\n      .catch(() => true)) // it doesn't exist -- if it does but no access, that will be caught later\n  ) {\n    return;\n  }\n\n  const timerName = 'cleaningDist' + Date.now();\n  timer.start(timerName);\n  const cleaningSpinner = logger.spinner(`Cleaning dist dir ${distDir}`).start();\n\n  try {\n    const dirContent = await fs.readdir(distDir);\n    const validFilenames = dirContent\n      // Ignore the admin build folder\n      .filter((filename) => filename !== 'build');\n    for (const filename of validFilenames) {\n      await fs.rm(path.resolve(distDir, filename), { recursive: true });\n    }\n  } catch (err: unknown) {\n    const generatingDuration = timer.end(timerName);\n    cleaningSpinner.text = `Error cleaning dist dir: ${err} (${prettyTime(generatingDuration)})`;\n    cleaningSpinner?.fail();\n    return;\n  }\n\n  const generatingDuration = timer.end(timerName);\n  cleaningSpinner.text = `Cleaning dist dir (${prettyTime(generatingDuration)})`;\n  cleaningSpinner?.succeed();\n};\n\nconst develop = async ({\n  cwd,\n  polling,\n  logger,\n  tsconfig,\n  ignorePrompts,\n  watchAdmin,\n  ...options\n}: DevelopOptions) => {\n  const timer = getTimer();\n\n  if (cluster.isPrimary) {\n    const { didInstall } = await checkRequiredDependencies({ cwd, logger, ignorePrompts }).catch(\n      (err) => {\n        logger.error(err.message);\n        process.exit(1);\n      }\n    );\n\n    if (didInstall) {\n      return;\n    }\n\n    if (tsconfig?.config) {\n      // Build without diagnostics in case schemas have changed\n      await cleanupDistDirectory({ tsconfig, logger, timer });\n      await tsUtils.compile(cwd, { configOptions: { ignoreDiagnostics: true } });\n    }\n\n    /**\n     * IF we're not watching the admin we're going to build it, this makes\n     * sure that at least the admin is built for users & they can interact\n     * with the application.\n     */\n    if (!watchAdmin) {\n      timer.start('createBuildContext');\n      const contextSpinner = logger.spinner(`Building build context`).start();\n      console.log('');\n\n      const ctx = await createBuildContext({\n        cwd,\n        logger,\n        tsconfig,\n        options,\n      });\n      const contextDuration = timer.end('createBuildContext');\n      contextSpinner.text = `Building build context (${prettyTime(contextDuration)})`;\n      contextSpinner.succeed();\n\n      timer.start('creatingAdmin');\n      const adminSpinner = logger.spinner(`Creating admin`).start();\n\n      EE.init(cwd);\n      await writeStaticClientFiles(ctx);\n\n      if (ctx.bundler === 'webpack') {\n        const { build: buildWebpack } = await import('./webpack/build');\n        await buildWebpack(ctx);\n      } else if (ctx.bundler === 'vite') {\n        const { build: buildVite } = await import('./vite/build');\n        await buildVite(ctx);\n      }\n\n      const adminDuration = timer.end('creatingAdmin');\n      adminSpinner.text = `Creating admin (${prettyTime(adminDuration)})`;\n      adminSpinner.succeed();\n    }\n\n    cluster.on('message', async (worker, message) => {\n      switch (message) {\n        case 'reload': {\n          if (tsconfig?.config) {\n            // Build without diagnostics in case schemas have changed\n            await cleanupDistDirectory({ tsconfig, logger, timer });\n            await tsUtils.compile(cwd, { configOptions: { ignoreDiagnostics: true } });\n          }\n          logger.debug('cluster has the reload message, sending the worker kill message');\n          worker.send('kill');\n          break;\n        }\n        case 'killed': {\n          logger.debug('cluster has the killed message, forking the cluster');\n          cluster.fork();\n          break;\n        }\n        case 'stop': {\n          process.exit(1);\n          break;\n        }\n        default:\n          break;\n      }\n    });\n\n    cluster.fork();\n  }\n\n  if (cluster.isWorker) {\n    timer.start('loadStrapi');\n    const loadStrapiSpinner = logger.spinner(`Loading Strapi`).start();\n\n    const strapi = strapiFactory({\n      appDir: cwd,\n      distDir: tsconfig?.config.options.outDir ?? '',\n      autoReload: true,\n      serveAdminPanel: !watchAdmin,\n    });\n\n    /**\n     * If we're watching the admin panel then we're going to attach the watcher\n     * as a strapi middleware.\n     */\n    let bundleWatcher: WebpackWatcher | ViteWatcher | undefined;\n\n    if (watchAdmin) {\n      timer.start('createBuildContext');\n      const contextSpinner = logger.spinner(`Building build context`).start();\n      console.log('');\n\n      const ctx = await createBuildContext({\n        cwd,\n        logger,\n        strapi,\n        tsconfig,\n        options,\n      });\n      const contextDuration = timer.end('createBuildContext');\n      contextSpinner.text = `Building build context (${prettyTime(contextDuration)})`;\n      contextSpinner.succeed();\n\n      timer.start('creatingAdmin');\n      const adminSpinner = logger.spinner(`Creating admin`).start();\n\n      EE.init(cwd);\n      await writeStaticClientFiles(ctx);\n\n      if (ctx.bundler === 'webpack') {\n        const { watch: watchWebpack } = await import('./webpack/watch');\n        bundleWatcher = await watchWebpack(ctx);\n      } else if (ctx.bundler === 'vite') {\n        const { watch: watchVite } = await import('./vite/watch');\n        bundleWatcher = await watchVite(ctx);\n      }\n\n      const adminDuration = timer.end('creatingAdmin');\n      adminSpinner.text = `Creating admin (${prettyTime(adminDuration)})`;\n      adminSpinner.succeed();\n    }\n\n    const strapiInstance = await strapi.load();\n\n    const loadStrapiDuration = timer.end('loadStrapi');\n    loadStrapiSpinner.text = `Loading Strapi (${prettyTime(loadStrapiDuration)})`;\n    loadStrapiSpinner.succeed();\n\n    // For TS projects, type generation is a requirement for the develop command so that the server can restart\n    // For JS projects, we respect the experimental autogenerate setting\n    if (tsconfig?.config || strapi.config.get('typescript.autogenerate') !== false) {\n      timer.start('generatingTS');\n      const generatingTsSpinner = logger.spinner(`Generating types`).start();\n\n      await tsUtils.generators.generate({\n        strapi: strapiInstance,\n        pwd: cwd,\n        rootDir: undefined,\n        logger: { silent: true, debug: false },\n        artifacts: { contentTypes: true, components: true },\n      });\n\n      const generatingDuration = timer.end('generatingTS');\n      generatingTsSpinner.text = `Generating types (${prettyTime(generatingDuration)})`;\n      generatingTsSpinner.succeed();\n    }\n\n    if (tsconfig?.config) {\n      timer.start('compilingTS');\n      const compilingTsSpinner = logger.spinner(`Compiling TS`).start();\n\n      await cleanupDistDirectory({ tsconfig, logger, timer });\n      await tsUtils.compile(cwd, { configOptions: { ignoreDiagnostics: false } });\n\n      const compilingDuration = timer.end('compilingTS');\n      compilingTsSpinner.text = `Compiling TS (${prettyTime(compilingDuration)})`;\n      compilingTsSpinner.succeed();\n    }\n\n    const restart = async () => {\n      if (strapiInstance.reload.isWatching && !strapiInstance.reload.isReloading) {\n        strapiInstance.reload.isReloading = true;\n        strapiInstance.reload();\n      }\n    };\n\n    const watcher = chokidar\n      .watch(cwd, {\n        ignoreInitial: true,\n        usePolling: polling,\n        ignored: [\n          /(^|[/\\\\])\\../, // dot files\n          /tmp/,\n          '**/src/admin/**',\n          '**/src/plugins/**/admin/**',\n          '**/dist/src/plugins/test/admin/**',\n          '**/documentation',\n          '**/documentation/**',\n          '**/node_modules',\n          '**/node_modules/**',\n          '**/plugins.json',\n          '**/build',\n          '**/build/**',\n          '**/index.html',\n          '**/public',\n          '**/public/**',\n          strapiInstance.dirs.static.public,\n          joinBy('/', strapiInstance.dirs.static.public, '**'),\n          '**/*.db*',\n          '**/exports/**',\n          '**/dist/**',\n          '**/*.d.ts',\n          '**/.yalc/**',\n          '**/yalc.lock',\n          ...strapiInstance.config.get('admin.watchIgnoreFiles', []),\n        ],\n      })\n      .on('add', (path) => {\n        strapiInstance.log.info(`File created: ${path}`);\n        restart();\n      })\n      .on('change', (path) => {\n        strapiInstance.log.info(`File changed: ${path}`);\n        restart();\n      })\n      .on('unlink', (path) => {\n        strapiInstance.log.info(`File deleted: ${path}`);\n        restart();\n      });\n\n    process.on('message', async (message) => {\n      switch (message) {\n        case 'kill': {\n          logger.debug(\n            'child process has the kill message, destroying the strapi instance and sending the killed process message'\n          );\n          await watcher.close();\n\n          await strapiInstance.destroy();\n\n          if (bundleWatcher) {\n            bundleWatcher.close();\n          }\n          process.send?.('killed');\n          break;\n        }\n        default:\n          break;\n      }\n    });\n\n    strapiInstance.start();\n  }\n};\n\nexport { develop };\nexport type { DevelopOptions };\n"],"names":["build","develop","readPkgUp","os","inquirer","execa","semver","resolveFrom","path","fs","performance","jsx","jsxs","outdent","renderToStaticMarkup","createElement","format","access","register","dotenv","chalk","boxen","camelCase","env","strapiFactory","getConfigUrls","browserslist","tsUtils","EE","generatingDuration","cluster","chokidar","joinBy"],"mappings":"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"}