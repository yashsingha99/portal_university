{"version":3,"file":"apiTokens-qt8r04rl.mjs","sources":["../../admin/src/services/apiTokens.ts"],"sourcesContent":["import * as ApiToken from '../../../shared/contracts/api-token';\n\nimport { adminApi } from './api';\n\nconst transferTokenService = adminApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getAPITokens: builder.query<ApiToken.List.Response['data'], void>({\n      query: () => '/admin/api-tokens',\n      transformResponse: (response: ApiToken.List.Response) => response.data,\n      providesTags: (res, _err) => [\n        ...(res?.map(({ id }) => ({ type: 'ApiToken' as const, id })) ?? []),\n        { type: 'ApiToken' as const, id: 'LIST' },\n      ],\n    }),\n    getAPIToken: builder.query<ApiToken.Get.Response['data'], ApiToken.Get.Params['id']>({\n      query: (id) => `/admin/api-tokens/${id}`,\n      transformResponse: (response: ApiToken.Get.Response) => response.data,\n      providesTags: (res, _err, id) => [{ type: 'ApiToken' as const, id }],\n    }),\n    createAPIToken: builder.mutation<\n      ApiToken.Create.Response['data'],\n      ApiToken.Create.Request['body']\n    >({\n      query: (body) => ({\n        url: '/admin/api-tokens',\n        method: 'POST',\n        data: body,\n      }),\n      transformResponse: (response: ApiToken.Create.Response) => response.data,\n      invalidatesTags: [{ type: 'ApiToken' as const, id: 'LIST' }],\n    }),\n    deleteAPIToken: builder.mutation<\n      ApiToken.Revoke.Response['data'],\n      ApiToken.Revoke.Params['id']\n    >({\n      query: (id) => ({\n        url: `/admin/api-tokens/${id}`,\n        method: 'DELETE',\n      }),\n      transformResponse: (response: ApiToken.Revoke.Response) => response.data,\n      invalidatesTags: (_res, _err, id) => [{ type: 'ApiToken' as const, id }],\n    }),\n    updateAPIToken: builder.mutation<\n      ApiToken.Update.Response['data'],\n      ApiToken.Update.Params & ApiToken.Update.Request['body']\n    >({\n      query: ({ id, ...body }) => ({\n        url: `/admin/api-tokens/${id}`,\n        method: 'PUT',\n        data: body,\n      }),\n      transformResponse: (response: ApiToken.Update.Response) => response.data,\n      invalidatesTags: (_res, _err, { id }) => [{ type: 'ApiToken' as const, id }],\n    }),\n  }),\n  overrideExisting: false,\n});\n\nconst {\n  useGetAPITokensQuery,\n  useGetAPITokenQuery,\n  useCreateAPITokenMutation,\n  useDeleteAPITokenMutation,\n  useUpdateAPITokenMutation,\n} = transferTokenService;\n\nexport {\n  useGetAPITokensQuery,\n  useGetAPITokenQuery,\n  useCreateAPITokenMutation,\n  useDeleteAPITokenMutation,\n  useUpdateAPITokenMutation,\n};\n"],"names":[],"mappings":";AAIA,MAAM,uBAAuB,SAAS,gBAAgB;AAAA,EACpD,WAAW,CAAC,aAAa;AAAA,IACvB,cAAc,QAAQ,MAA4C;AAAA,MAChE,OAAO,MAAM;AAAA,MACb,mBAAmB,CAAC,aAAqC,SAAS;AAAA,MAClE,cAAc,CAAC,KAAK,SAAS;AAAA,QAC3B,GAAI,KAAK,IAAI,CAAC,EAAE,GAAU,OAAA,EAAE,MAAM,YAAqB,KAAK,KAAK,CAAC;AAAA,QAClE,EAAE,MAAM,YAAqB,IAAI,OAAO;AAAA,MAC1C;AAAA,IAAA,CACD;AAAA,IACD,aAAa,QAAQ,MAAgE;AAAA,MACnF,OAAO,CAAC,OAAO,qBAAqB,EAAE;AAAA,MACtC,mBAAmB,CAAC,aAAoC,SAAS;AAAA,MACjE,cAAc,CAAC,KAAK,MAAM,OAAO,CAAC,EAAE,MAAM,YAAqB,IAAI;AAAA,IAAA,CACpE;AAAA,IACD,gBAAgB,QAAQ,SAGtB;AAAA,MACA,OAAO,CAAC,UAAU;AAAA,QAChB,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,MAAA;AAAA,MAER,mBAAmB,CAAC,aAAuC,SAAS;AAAA,MACpE,iBAAiB,CAAC,EAAE,MAAM,YAAqB,IAAI,QAAQ;AAAA,IAAA,CAC5D;AAAA,IACD,gBAAgB,QAAQ,SAGtB;AAAA,MACA,OAAO,CAAC,QAAQ;AAAA,QACd,KAAK,qBAAqB,EAAE;AAAA,QAC5B,QAAQ;AAAA,MAAA;AAAA,MAEV,mBAAmB,CAAC,aAAuC,SAAS;AAAA,MACpE,iBAAiB,CAAC,MAAM,MAAM,OAAO,CAAC,EAAE,MAAM,YAAqB,IAAI;AAAA,IAAA,CACxE;AAAA,IACD,gBAAgB,QAAQ,SAGtB;AAAA,MACA,OAAO,CAAC,EAAE,IAAI,GAAG,YAAY;AAAA,QAC3B,KAAK,qBAAqB,EAAE;AAAA,QAC5B,QAAQ;AAAA,QACR,MAAM;AAAA,MAAA;AAAA,MAER,mBAAmB,CAAC,aAAuC,SAAS;AAAA,MACpE,iBAAiB,CAAC,MAAM,MAAM,EAAE,SAAS,CAAC,EAAE,MAAM,YAAqB,IAAI;AAAA,IAAA,CAC5E;AAAA,EAAA;AAAA,EAEH,kBAAkB;AACpB,CAAC;AAEK,MAAA;AAAA,EACJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,IAAI;"}