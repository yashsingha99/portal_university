{"version":3,"file":"Table-T-qYlZ1f.js","sources":["../../admin/src/pages/Settings/components/Tokens/Table.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Flex, IconButton, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { Link } from '@strapi/design-system/v2';\nimport {\n  ConfirmDialog,\n  DynamicTable,\n  onRowClick,\n  pxToRem,\n  RelativeTime,\n  useQueryParams,\n  useTracking,\n  TableProps as DynamicTableProps,\n  TableRowProps,\n} from '@strapi/helper-plugin';\nimport { Eye, Pencil, Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { ApiToken } from '../../../../../../shared/contracts/api-token';\nimport { SanitizedTransferToken } from '../../../../../../shared/contracts/transfer';\n\nimport type { Entity } from '@strapi/types';\n\ninterface TokenTableRowData {\n  id: Entity.ID;\n  name: string;\n  description: string;\n  createdAt: string;\n  lastUsedAt: string;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Table\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableProps\n  extends Pick<\n    DynamicTableProps<TokenTableRowData>,\n    'contentType' | 'onConfirmDelete' | 'headers' | 'isLoading'\n  > {\n  permissions: {\n    canRead: boolean;\n    canDelete: boolean;\n    canUpdate: boolean;\n  };\n  tokens: SanitizedTransferToken[] | ApiToken[];\n  tokenType: 'api-token' | 'transfer-token';\n}\n\nconst Table = ({\n  permissions,\n  headers = [],\n  contentType,\n  isLoading = false,\n  tokens = [],\n  onConfirmDelete,\n  tokenType,\n}: TableProps) => {\n  const { canDelete, canUpdate, canRead } = permissions;\n\n  /**\n   * TODO: This needs refactoring to the new `Table` component.\n   */\n  return (\n    <DynamicTable\n      headers={headers}\n      contentType={contentType}\n      rows={tokens}\n      withBulkActions={canDelete || canUpdate || canRead}\n      isLoading={isLoading}\n      onConfirmDelete={onConfirmDelete}\n    >\n      <TableRows\n        tokenType={tokenType}\n        permissions={permissions}\n        onConfirmDelete={onConfirmDelete}\n      />\n    </DynamicTable>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * TableRows\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableRowsProps\n  extends Pick<DynamicTableProps<TokenTableRowData>, 'onConfirmDelete'>,\n    Pick<TableRowProps<TokenTableRowData>, 'withBulkActions' | 'rows'>,\n    Pick<TableProps, 'tokenType'> {\n  permissions: {\n    canRead: boolean;\n    canDelete: boolean;\n    canUpdate: boolean;\n  };\n}\n\nconst TableRows = ({\n  tokenType,\n  permissions,\n  rows = [],\n  withBulkActions,\n  onConfirmDelete,\n}: TableRowsProps) => {\n  const { canDelete, canUpdate, canRead } = permissions;\n\n  const [{ query }] = useQueryParams<{ sort?: string }>();\n  const { formatMessage } = useIntl();\n  const [, sortOrder] = query && query.sort ? query.sort.split(':') : [undefined, 'ASC'];\n  const {\n    push,\n    location: { pathname },\n  } = useHistory();\n  const { trackUsage } = useTracking();\n\n  const sortedTokens = [...rows].sort((a, b) => {\n    const comparison = a.name.localeCompare(b.name);\n\n    return sortOrder === 'DESC' ? -comparison : comparison;\n  });\n\n  return (\n    <Tbody>\n      {sortedTokens.map((token) => {\n        return (\n          <Tr\n            key={token.id}\n            {...onRowClick({\n              fn() {\n                trackUsage('willEditTokenFromList', {\n                  tokenType,\n                });\n                push(`${pathname}/${token.id}`);\n              },\n              condition: canUpdate,\n            })}\n          >\n            <Td maxWidth={pxToRem(250)}>\n              <Typography textColor=\"neutral800\" fontWeight=\"bold\" ellipsis>\n                {token.name}\n              </Typography>\n            </Td>\n            <Td maxWidth={pxToRem(250)}>\n              <Typography textColor=\"neutral800\" ellipsis>\n                {token.description}\n              </Typography>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral800\">\n                <RelativeTime timestamp={new Date(token.createdAt)} />\n              </Typography>\n            </Td>\n            <Td>\n              {token.lastUsedAt && (\n                <Typography textColor=\"neutral800\">\n                  <RelativeTime\n                    timestamp={new Date(token.lastUsedAt)}\n                    customIntervals={[\n                      {\n                        unit: 'hours',\n                        threshold: 1,\n                        text: formatMessage({\n                          id: 'Settings.apiTokens.lastHour',\n                          defaultMessage: 'last hour',\n                        }),\n                      },\n                    ]}\n                  />\n                </Typography>\n              )}\n            </Td>\n\n            {withBulkActions && (\n              <Td>\n                <Flex justifyContent=\"end\">\n                  {canUpdate && <UpdateButton tokenName={token.name} tokenId={token.id} />}\n                  {!canUpdate && canRead && (\n                    <ReadButton tokenName={token.name} tokenId={token.id} />\n                  )}\n                  {canDelete && (\n                    <DeleteButton\n                      tokenName={token.name}\n                      onClickDelete={() => onConfirmDelete?.(token.id)}\n                      tokenType={tokenType}\n                    />\n                  )}\n                </Flex>\n              </Td>\n            )}\n          </Tr>\n        );\n      })}\n    </Tbody>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * CRUD Buttons\n * -----------------------------------------------------------------------------------------------*/\n\nconst MESSAGES_MAP = {\n  edit: {\n    id: 'app.component.table.edit',\n    defaultMessage: 'Edit {target}',\n  },\n  read: {\n    id: 'app.component.table.read',\n    defaultMessage: 'Read {target}',\n  },\n};\n\ninterface DefaultButtonProps {\n  tokenName: string;\n  tokenId: Entity.ID;\n  buttonType?: 'edit' | 'read';\n  children: React.ReactNode;\n}\n\nconst DefaultButton = ({\n  tokenName,\n  tokenId,\n  buttonType = 'edit',\n  children,\n}: DefaultButtonProps) => {\n  const { formatMessage } = useIntl();\n  const {\n    location: { pathname },\n  } = useHistory();\n\n  return (\n    <LinkStyled\n      forwardedAs={NavLink}\n      to={`${pathname}/${tokenId}`}\n      title={formatMessage(MESSAGES_MAP[buttonType], { target: tokenName })}\n    >\n      {children}\n    </LinkStyled>\n  );\n};\n\nconst LinkStyled = styled(Link)`\n  svg {\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n\n  &:hover,\n  &:focus {\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.neutral800};\n      }\n    }\n  }\n`;\n\ninterface DeleteButtonProps extends Pick<ButtonProps, 'tokenName'>, Pick<TableProps, 'tokenType'> {\n  onClickDelete: () => void;\n}\n\nconst DeleteButton = ({ tokenName, onClickDelete, tokenType }: DeleteButtonProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\n  const handleClickDelete = () => {\n    setShowConfirmDialog(false);\n    trackUsage('willDeleteToken', {\n      tokenType,\n    });\n    onClickDelete();\n  };\n\n  return (\n    <Box paddingLeft={1} onClick={(e) => e.stopPropagation()}>\n      <IconButton\n        onClick={() => {\n          setShowConfirmDialog(true);\n        }}\n        label={formatMessage(\n          {\n            id: 'global.delete-target',\n            defaultMessage: 'Delete {target}',\n          },\n          { target: `${tokenName}` }\n        )}\n        name=\"delete\"\n        borderWidth={0}\n        icon={<Trash />}\n      />\n      <ConfirmDialog\n        onToggleDialog={() => setShowConfirmDialog(false)}\n        onConfirm={handleClickDelete}\n        isOpen={showConfirmDialog}\n      />\n    </Box>\n  );\n};\n\ninterface ButtonProps {\n  tokenName: string;\n  tokenId: Entity.ID;\n}\n\nconst ReadButton = ({ tokenName, tokenId }: ButtonProps) => {\n  return (\n    <DefaultButton tokenName={tokenName} tokenId={tokenId} buttonType=\"read\">\n      <Eye />\n    </DefaultButton>\n  );\n};\n\nconst UpdateButton = ({ tokenName, tokenId }: ButtonProps) => {\n  return (\n    <DefaultButton tokenName={tokenName} tokenId={tokenId}>\n      <Pencil width={12} />\n    </DefaultButton>\n  );\n};\n\nexport { Table };\nexport type { TableProps };\n"],"names":["jsx","DynamicTable","useQueryParams","useIntl","useHistory","useTracking","Tbody","jsxs","Tr","onRowClick","Td","pxToRem","Typography","RelativeTime","Flex","NavLink","styled","Link","React","Box","IconButton","Trash","ConfirmDialog","Eye","Pencil"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,MAAM,QAAQ,CAAC;AAAA,EACb;AAAA,EACA,UAAU,CAAC;AAAA,EACX;AAAA,EACA,YAAY;AAAA,EACZ,SAAS,CAAC;AAAA,EACV;AAAA,EACA;AACF,MAAkB;AAChB,QAAM,EAAE,WAAW,WAAW,QAAA,IAAY;AAMxC,SAAAA,2BAAA;AAAA,IAACC,aAAA;AAAA,IAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,iBAAiB,aAAa,aAAa;AAAA,MAC3C;AAAA,MACA;AAAA,MAEA,UAAAD,2BAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,IAAA;AAAA,EAAA;AAGN;AAiBA,MAAM,YAAY,CAAC;AAAA,EACjB;AAAA,EACA;AAAA,EACA,OAAO,CAAC;AAAA,EACR;AAAA,EACA;AACF,MAAsB;AACpB,QAAM,EAAE,WAAW,WAAW,QAAA,IAAY;AAE1C,QAAM,CAAC,EAAE,OAAO,IAAIE,aAAkC,eAAA;AAChD,QAAA,EAAE,kBAAkBC,UAAAA;AAC1B,QAAM,CAAG,EAAA,SAAS,IAAI,SAAS,MAAM,OAAO,MAAM,KAAK,MAAM,GAAG,IAAI,CAAC,QAAW,KAAK;AAC/E,QAAA;AAAA,IACJ;AAAA,IACA,UAAU,EAAE,SAAS;AAAA,MACnBC,eAAW,WAAA;AACT,QAAA,EAAE,eAAeC,aAAAA;AAEjB,QAAA,eAAe,CAAC,GAAG,IAAI,EAAE,KAAK,CAAC,GAAG,MAAM;AAC5C,UAAM,aAAa,EAAE,KAAK,cAAc,EAAE,IAAI;AAEvC,WAAA,cAAc,SAAS,CAAC,aAAa;AAAA,EAAA,CAC7C;AAED,SACGL,2BAAAA,IAAAM,aAAAA,OAAA,EACE,UAAa,aAAA,IAAI,CAAC,UAAU;AAEzB,WAAAC,2BAAA;AAAA,MAACC,aAAA;AAAA,MAAA;AAAA,QAEE,GAAGC,wBAAW;AAAA,UACb,KAAK;AACH,uBAAW,yBAAyB;AAAA,cAClC;AAAA,YAAA,CACD;AACD,iBAAK,GAAG,QAAQ,IAAI,MAAM,EAAE,EAAE;AAAA,UAChC;AAAA,UACA,WAAW;AAAA,QAAA,CACZ;AAAA,QAED,UAAA;AAAA,UAAAT,+BAACU,aAAAA,IAAG,EAAA,UAAUC,aAAAA,QAAQ,GAAG,GACvB,UAACX,2BAAA,IAAAY,yBAAA,EAAW,WAAU,cAAa,YAAW,QAAO,UAAQ,MAC1D,UAAA,MAAM,KACT,CAAA,GACF;AAAA,UACCZ,2BAAA,IAAAU,aAAA,IAAA,EAAG,UAAUC,aAAA,QAAQ,GAAG,GACvB,UAAAX,+BAACY,aAAAA,YAAW,EAAA,WAAU,cAAa,UAAQ,MACxC,UAAA,MAAM,YACT,CAAA,GACF;AAAA,UACCZ,+BAAAU,aAAAA,IAAA,EACC,UAACV,2BAAAA,IAAAY,aAAAA,YAAA,EAAW,WAAU,cACpB,UAAAZ,2BAAA,IAACa,2BAAa,EAAA,WAAW,IAAI,KAAK,MAAM,SAAS,EAAA,CAAG,EACtD,CAAA,GACF;AAAA,yCACCH,aACE,IAAA,EAAA,UAAA,MAAM,cACJV,+BAAAY,aAAAA,YAAA,EAAW,WAAU,cACpB,UAAAZ,2BAAA;AAAA,YAACa,aAAA;AAAA,YAAA;AAAA,cACC,WAAW,IAAI,KAAK,MAAM,UAAU;AAAA,cACpC,iBAAiB;AAAA,gBACf;AAAA,kBACE,MAAM;AAAA,kBACN,WAAW;AAAA,kBACX,MAAM,cAAc;AAAA,oBAClB,IAAI;AAAA,oBACJ,gBAAgB;AAAA,kBAAA,CACjB;AAAA,gBACH;AAAA,cACF;AAAA,YAAA;AAAA,aAEJ,EAEJ,CAAA;AAAA,UAEC,mBACEb,2BAAAA,IAAAU,aAAA,IAAA,EACC,UAACH,gCAAAO,aAAAA,MAAA,EAAK,gBAAe,OAClB,UAAA;AAAA,YAAA,4CAAc,cAAa,EAAA,WAAW,MAAM,MAAM,SAAS,MAAM,IAAI;AAAA,YACrE,CAAC,aAAa,WACZd,2BAAA,IAAA,YAAA,EAAW,WAAW,MAAM,MAAM,SAAS,MAAM,GAAI,CAAA;AAAA,YAEvD,aACCA,2BAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,WAAW,MAAM;AAAA,gBACjB,eAAe,MAAM,kBAAkB,MAAM,EAAE;AAAA,gBAC/C;AAAA,cAAA;AAAA,YACF;AAAA,UAAA,EAAA,CAEJ,EACF,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,MA7DG,MAAM;AAAA,IAAA;AAAA,EAiEhB,CAAA,EACH,CAAA;AAEJ;AAMA,MAAM,eAAe;AAAA,EACnB,MAAM;AAAA,IACJ,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAClB;AAAA,EACA,MAAM;AAAA,IACJ,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAClB;AACF;AASA,MAAM,gBAAgB,CAAC;AAAA,EACrB;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb;AACF,MAA0B;AAClB,QAAA,EAAE,kBAAkBG,UAAAA;AACpB,QAAA;AAAA,IACJ,UAAU,EAAE,SAAS;AAAA,MACnBC,eAAW,WAAA;AAGb,SAAAJ,2BAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,aAAae,eAAA;AAAA,MACb,IAAI,GAAG,QAAQ,IAAI,OAAO;AAAA,MAC1B,OAAO,cAAc,aAAa,UAAU,GAAG,EAAE,QAAQ,WAAW;AAAA,MAEnE;AAAA,IAAA;AAAA,EAAA;AAGP;AAEA,MAAM,aAAaC,gBAAAA,QAAOC,GAAAA,IAAI;AAAA;AAAA;AAAA,cAGhB,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQpC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAUtD,MAAM,eAAe,CAAC,EAAE,WAAW,eAAe,gBAAmC;AAC7E,QAAA,EAAE,kBAAkBd,UAAAA;AACpB,QAAA,EAAE,eAAeE,aAAAA;AACvB,QAAM,CAAC,mBAAmB,oBAAoB,IAAIa,iBAAM,SAAS,KAAK;AACtE,QAAM,oBAAoB,MAAM;AAC9B,yBAAqB,KAAK;AAC1B,eAAW,mBAAmB;AAAA,MAC5B;AAAA,IAAA,CACD;AACa;EAAA;AAId,SAAAX,gCAACY,aAAAA,OAAI,aAAa,GAAG,SAAS,CAAC,MAAM,EAAE,gBAAA,GACrC,UAAA;AAAA,IAAAnB,2BAAA;AAAA,MAACoB,aAAA;AAAA,MAAA;AAAA,QACC,SAAS,MAAM;AACb,+BAAqB,IAAI;AAAA,QAC3B;AAAA,QACA,OAAO;AAAA,UACL;AAAA,YACE,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,EAAE,QAAQ,GAAG,SAAS,GAAG;AAAA,QAC3B;AAAA,QACA,MAAK;AAAA,QACL,aAAa;AAAA,QACb,qCAAOC,MAAM,OAAA,EAAA;AAAA,MAAA;AAAA,IACf;AAAA,IACArB,2BAAA;AAAA,MAACsB,aAAA;AAAA,MAAA;AAAA,QACC,gBAAgB,MAAM,qBAAqB,KAAK;AAAA,QAChD,WAAW;AAAA,QACX,QAAQ;AAAA,MAAA;AAAA,IACV;AAAA,EACF,EAAA,CAAA;AAEJ;AAOA,MAAM,aAAa,CAAC,EAAE,WAAW,cAA2B;AAExD,SAAAtB,2BAAA,IAAC,iBAAc,WAAsB,SAAkB,YAAW,QAChE,UAAAA,2BAAAA,IAACuB,MAAAA,MAAI,CAAA,EACP,CAAA;AAEJ;AAEA,MAAM,eAAe,CAAC,EAAE,WAAW,cAA2B;AAE1D,SAAAvB,2BAAA,IAAC,iBAAc,WAAsB,SACnC,yCAACwB,MAAAA,QAAO,EAAA,OAAO,GAAI,CAAA,EACrB,CAAA;AAEJ;;"}