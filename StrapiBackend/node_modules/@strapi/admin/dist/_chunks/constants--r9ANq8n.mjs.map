{"version":3,"file":"constants--r9ANq8n.mjs","sources":["../../ee/admin/src/pages/AuthPage/components/Providers.tsx","../../ee/admin/src/pages/AuthPage/constants.ts"],"sourcesContent":["import { Box, Button, Divider, Flex, Loader, Main, Typography } from '@strapi/design-system';\nimport { Link } from '@strapi/design-system/v2';\nimport { useIntl } from 'react-intl';\nimport { NavLink, Redirect, useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { Logo } from '../../../../../../admin/src/components/UnauthenticatedLogo';\nimport {\n  Column,\n  LayoutContent,\n  UnauthenticatedLayout,\n} from '../../../../../../admin/src/layouts/UnauthenticatedLayout';\nimport { useGetProvidersQuery } from '../../../../../../admin/src/services/auth';\n\nimport { SSOProviders } from './SSOProviders';\n\nconst Providers = () => {\n  const { push } = useHistory();\n  const { formatMessage } = useIntl();\n  const { isLoading, data: providers = [] } = useGetProvidersQuery(undefined, {\n    skip: !window.strapi.features.isEnabled(window.strapi.features.SSO),\n  });\n\n  const handleClick = () => {\n    push('/auth/login');\n  };\n\n  if (\n    !window.strapi.features.isEnabled(window.strapi.features.SSO) ||\n    (!isLoading && providers.length === 0)\n  ) {\n    return <Redirect to=\"/auth/login\" />;\n  }\n\n  return (\n    <UnauthenticatedLayout>\n      <Main>\n        <LayoutContent>\n          <Column>\n            <Logo />\n            <Box paddingTop={6} paddingBottom={1}>\n              <Typography as=\"h1\" variant=\"alpha\">\n                {formatMessage({ id: 'Auth.form.welcome.title' })}\n              </Typography>\n            </Box>\n            <Box paddingBottom={7}>\n              <Typography variant=\"epsilon\" textColor=\"neutral600\">\n                {formatMessage({ id: 'Auth.login.sso.subtitle' })}\n              </Typography>\n            </Box>\n          </Column>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={7}>\n            {isLoading ? (\n              <Flex justifyContent=\"center\">\n                <Loader>{formatMessage({ id: 'Auth.login.sso.loading' })}</Loader>\n              </Flex>\n            ) : (\n              <SSOProviders providers={providers} />\n            )}\n            <Flex>\n              <DividerFull />\n              <Box paddingLeft={3} paddingRight={3}>\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\n                  {formatMessage({ id: 'or' })}\n                </Typography>\n              </Box>\n              <DividerFull />\n            </Flex>\n            <Button fullWidth size=\"L\" onClick={handleClick}>\n              {formatMessage({ id: 'Auth.form.button.login.strapi' })}\n            </Button>\n          </Flex>\n        </LayoutContent>\n        <Flex justifyContent=\"center\">\n          <Box paddingTop={4}>\n            {/* @ts-expect-error â€“ error with inferring the props from the as component */}\n            <Link as={NavLink} to=\"/auth/forgot-password\">\n              <Typography variant=\"pi\">\n                {formatMessage({ id: 'Auth.link.forgot-password' })}\n              </Typography>\n            </Link>\n          </Box>\n        </Flex>\n      </Main>\n    </UnauthenticatedLayout>\n  );\n};\n\nconst DividerFull = styled(Divider)`\n  flex: 1;\n`;\n\nexport { Providers };\n","import type { ComponentType } from 'react';\n\nimport { Providers } from './components/Providers';\n\ntype AuthType = 'providers';\n\ntype FormDictionary = Record<AuthType, ComponentType>;\n\nexport const FORMS = {\n  providers: Providers,\n} satisfies FormDictionary;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,MAAM,YAAY,MAAM;AAChB,QAAA,EAAE,SAAS;AACX,QAAA,EAAE,kBAAkB;AACpB,QAAA,EAAE,WAAW,MAAM,YAAY,CAAA,MAAO,qBAAqB,QAAW;AAAA,IAC1E,MAAM,CAAC,OAAO,OAAO,SAAS,UAAU,OAAO,OAAO,SAAS,GAAG;AAAA,EAAA,CACnE;AAED,QAAM,cAAc,MAAM;AACxB,SAAK,aAAa;AAAA,EAAA;AAGpB,MACE,CAAC,OAAO,OAAO,SAAS,UAAU,OAAO,OAAO,SAAS,GAAG,KAC3D,CAAC,aAAa,UAAU,WAAW,GACpC;AACO,WAAA,oBAAC,UAAS,EAAA,IAAG,cAAc,CAAA;AAAA,EACpC;AAGE,SAAA,oBAAC,uBACC,EAAA,UAAA,qBAAC,MACC,EAAA,UAAA;AAAA,IAAA,qBAAC,eACC,EAAA,UAAA;AAAA,MAAA,qBAAC,QACC,EAAA,UAAA;AAAA,QAAA,oBAAC,MAAK,EAAA;AAAA,4BACL,KAAI,EAAA,YAAY,GAAG,eAAe,GACjC,8BAAC,YAAW,EAAA,IAAG,MAAK,SAAQ,SACzB,UAAc,cAAA,EAAE,IAAI,0BAA0B,CAAC,EAClD,CAAA,GACF;AAAA,4BACC,KAAI,EAAA,eAAe,GAClB,UAAA,oBAAC,cAAW,SAAQ,WAAU,WAAU,cACrC,wBAAc,EAAE,IAAI,0BAA0B,CAAC,EAClD,CAAA,GACF;AAAA,MAAA,GACF;AAAA,2BACC,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GAChD,UAAA;AAAA,QAAA,gCACE,MAAK,EAAA,gBAAe,UACnB,UAAA,oBAAC,UAAQ,UAAc,cAAA,EAAE,IAAI,yBAA0B,CAAA,GAAE,EAAA,CAC3D,IAEA,oBAAC,gBAAa,WAAsB;AAAA,6BAErC,MACC,EAAA,UAAA;AAAA,UAAA,oBAAC,aAAY,EAAA;AAAA,8BACZ,KAAI,EAAA,aAAa,GAAG,cAAc,GACjC,8BAAC,YAAW,EAAA,SAAQ,SAAQ,WAAU,cACnC,UAAc,cAAA,EAAE,IAAI,KAAK,CAAC,EAC7B,CAAA,GACF;AAAA,8BACC,aAAY,EAAA;AAAA,QAAA,GACf;AAAA,QACC,oBAAA,QAAA,EAAO,WAAS,MAAC,MAAK,KAAI,SAAS,aACjC,UAAc,cAAA,EAAE,IAAI,gCAAA,CAAiC,EACxD,CAAA;AAAA,MAAA,GACF;AAAA,IAAA,GACF;AAAA,IACA,oBAAC,MAAK,EAAA,gBAAe,UACnB,UAAA,oBAAC,KAAI,EAAA,YAAY,GAEf,UAAA,oBAAC,MAAK,EAAA,IAAI,SAAS,IAAG,yBACpB,UAAC,oBAAA,YAAA,EAAW,SAAQ,MACjB,UAAc,cAAA,EAAE,IAAI,4BAA6B,CAAA,EACpD,CAAA,EACF,CAAA,EACF,CAAA,GACF;AAAA,EAAA,EACF,CAAA,EACF,CAAA;AAEJ;AAEA,MAAM,cAAc,OAAO,OAAO;AAAA;AAAA;AChF3B,MAAM,QAAQ;AAAA,EACnB,WAAW;AACb;"}