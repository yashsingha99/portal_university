{"version":3,"file":"useContentTypes-QIDjH8yt.mjs","sources":["../../admin/src/services/contentManager.ts","../../admin/src/hooks/useContentTypes.ts"],"sourcesContent":["/**\n * This will 100% be moved into it's own reducer space when\n * we move the content-manager back to it's plugin.\n */\n\nimport { adminApi } from './api';\n\nimport type { Contracts } from '@strapi/plugin-content-manager/_internal/shared';\n\nconst contentManager = adminApi.injectEndpoints({\n  endpoints: (builder) => ({\n    /**\n     * Components\n     */\n    getComponents: builder.query<Contracts.Components.FindComponents.Response['data'], void>({\n      query: () => ({\n        url: `/content-manager/components`,\n        method: 'GET',\n      }),\n      transformResponse: (res: Contracts.Components.FindComponents.Response) => res.data,\n    }),\n    /**\n     * Content Types\n     */\n    getContentTypes: builder.query<Contracts.ContentTypes.FindContentTypes.Response['data'], void>({\n      query: () => ({\n        url: `/content-manager/content-types`,\n        method: 'GET',\n      }),\n      transformResponse: (res: Contracts.ContentTypes.FindContentTypes.Response) => res.data,\n    }),\n  }),\n  overrideExisting: false,\n});\n\nconst { useGetComponentsQuery, useGetContentTypesQuery } = contentManager;\n\nexport { useGetComponentsQuery, useGetContentTypesQuery };\n","import * as React from 'react';\n\nimport { useAPIErrorHandler, useNotification } from '@strapi/helper-plugin';\nimport { Contracts } from '@strapi/plugin-content-manager/_internal/shared';\n\nimport { useGetComponentsQuery, useGetContentTypesQuery } from '../services/contentManager';\n\nexport function useContentTypes(): {\n  isLoading: boolean;\n  components: Contracts.Components.Component[];\n  collectionTypes: Contracts.ContentTypes.ContentType[];\n  singleTypes: Contracts.ContentTypes.ContentType[];\n} {\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const toggleNotification = useNotification();\n\n  const components = useGetComponentsQuery();\n  const contentTypes = useGetContentTypesQuery();\n\n  React.useEffect(() => {\n    if (contentTypes.error) {\n      toggleNotification({\n        type: 'warning',\n        message: formatAPIError(contentTypes.error),\n      });\n    }\n  }, [contentTypes.error, formatAPIError, toggleNotification]);\n\n  React.useEffect(() => {\n    if (components.error) {\n      toggleNotification({\n        type: 'warning',\n        message: formatAPIError(components.error),\n      });\n    }\n  }, [components.error, formatAPIError, toggleNotification]);\n\n  const isLoading = components.isLoading || contentTypes.isLoading;\n\n  // the return value needs to be memoized, because intantiating\n  // an empty array as default value would lead to an unstable return\n  // value, which later on triggers infinite loops if used in the\n  // dependency arrays of other hooks\n  const collectionTypes = React.useMemo(() => {\n    return (contentTypes?.data ?? []).filter(\n      (contentType) => contentType.kind === 'collectionType' && contentType.isDisplayed\n    );\n  }, [contentTypes?.data]);\n\n  const singleTypes = React.useMemo(() => {\n    return (contentTypes?.data ?? []).filter(\n      (contentType) => contentType.kind !== 'collectionType' && contentType.isDisplayed\n    );\n  }, [contentTypes?.data]);\n\n  return {\n    isLoading,\n    components: React.useMemo(() => components?.data ?? [], [components?.data]),\n    collectionTypes,\n    singleTypes,\n  };\n}\n"],"names":[],"mappings":";;;AASA,MAAM,iBAAiB,SAAS,gBAAgB;AAAA,EAC9C,WAAW,CAAC,aAAa;AAAA;AAAA;AAAA;AAAA,IAIvB,eAAe,QAAQ,MAAkE;AAAA,MACvF,OAAO,OAAO;AAAA,QACZ,KAAK;AAAA,QACL,QAAQ;AAAA,MAAA;AAAA,MAEV,mBAAmB,CAAC,QAAsD,IAAI;AAAA,IAAA,CAC/E;AAAA;AAAA;AAAA;AAAA,IAID,iBAAiB,QAAQ,MAAsE;AAAA,MAC7F,OAAO,OAAO;AAAA,QACZ,KAAK;AAAA,QACL,QAAQ;AAAA,MAAA;AAAA,MAEV,mBAAmB,CAAC,QAA0D,IAAI;AAAA,IAAA,CACnF;AAAA,EAAA;AAAA,EAEH,kBAAkB;AACpB,CAAC;AAED,MAAM,EAAE,uBAAuB,wBAAA,IAA4B;AC5BpD,SAAS,kBAKd;AACA,QAAM,EAAE,yBAAyB,eAAe,IAAI,mBAAmB;AACvE,QAAM,qBAAqB;AAE3B,QAAM,aAAa;AACnB,QAAM,eAAe;AAErB,QAAM,UAAU,MAAM;AACpB,QAAI,aAAa,OAAO;AACH,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,eAAe,aAAa,KAAK;AAAA,MAAA,CAC3C;AAAA,IACH;AAAA,KACC,CAAC,aAAa,OAAO,gBAAgB,kBAAkB,CAAC;AAE3D,QAAM,UAAU,MAAM;AACpB,QAAI,WAAW,OAAO;AACD,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,eAAe,WAAW,KAAK;AAAA,MAAA,CACzC;AAAA,IACH;AAAA,KACC,CAAC,WAAW,OAAO,gBAAgB,kBAAkB,CAAC;AAEnD,QAAA,YAAY,WAAW,aAAa,aAAa;AAMjD,QAAA,kBAAkB,MAAM,QAAQ,MAAM;AAClC,YAAA,cAAc,QAAQ,CAAA,GAAI;AAAA,MAChC,CAAC,gBAAgB,YAAY,SAAS,oBAAoB,YAAY;AAAA,IAAA;AAAA,EACxE,GACC,CAAC,cAAc,IAAI,CAAC;AAEjB,QAAA,cAAc,MAAM,QAAQ,MAAM;AAC9B,YAAA,cAAc,QAAQ,CAAA,GAAI;AAAA,MAChC,CAAC,gBAAgB,YAAY,SAAS,oBAAoB,YAAY;AAAA,IAAA;AAAA,EACxE,GACC,CAAC,cAAc,IAAI,CAAC;AAEhB,SAAA;AAAA,IACL;AAAA,IACA,YAAY,MAAM,QAAQ,MAAM,YAAY,QAAQ,IAAI,CAAC,YAAY,IAAI,CAAC;AAAA,IAC1E;AAAA,IACA;AAAA,EAAA;AAEJ;"}